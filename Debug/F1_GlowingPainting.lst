
F1_GlowingPainting.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049a4  080001d0  080001d0  000081d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000004  08004b74  08004b74  0000cb74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  08004b78  08004b78  0000cb78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000052c  20000000  08004b7c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000074  2000052c  080050a8  0001052c  2**2
                  ALLOC
  6 ._user_heap_stack 00000080  200005a0  0800511c  0001052c  2**0
                  ALLOC
  7 .ARM.attributes 00000027  00000000  00000000  0001052c  2**0
                  CONTENTS, READONLY
  8 .debug_info   00004ee5  00000000  00000000  00010553  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000afa  00000000  00000000  00015438  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000029e4  00000000  00000000  00015f32  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000130  00000000  00000000  00018918  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00018a48  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00001648  00000000  00000000  00018a80  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001e3a  00000000  00000000  0001a0c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      00000030  00000000  00000000  0001bf02  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000019e0  00000000  00000000  0001bf34  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	f240 542c 	movw	r4, #1324	; 0x52c
 80001d6:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80001da:	7823      	ldrb	r3, [r4, #0]
 80001dc:	b963      	cbnz	r3, 80001f8 <__do_global_dtors_aux+0x28>
 80001de:	f240 0000 	movw	r0, #0
 80001e2:	f2c0 0000 	movt	r0, #0
 80001e6:	b128      	cbz	r0, 80001f4 <__do_global_dtors_aux+0x24>
 80001e8:	f644 305c 	movw	r0, #19292	; 0x4b5c
 80001ec:	f6c0 0000 	movt	r0, #2048	; 0x800
 80001f0:	f3af 8000 	nop.w
 80001f4:	2101      	movs	r1, #1
 80001f6:	7021      	strb	r1, [r4, #0]
 80001f8:	bd10      	pop	{r4, pc}
 80001fa:	bf00      	nop

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	f240 0300 	movw	r3, #0
 8000202:	f2c0 0300 	movt	r3, #0
 8000206:	b14b      	cbz	r3, 800021c <frame_dummy+0x20>
 8000208:	f644 305c 	movw	r0, #19292	; 0x4b5c
 800020c:	f240 5130 	movw	r1, #1328	; 0x530
 8000210:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000214:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8000218:	f3af 8000 	nop.w
 800021c:	f240 502c 	movw	r0, #1324	; 0x52c
 8000220:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000224:	6801      	ldr	r1, [r0, #0]
 8000226:	b129      	cbz	r1, 8000234 <frame_dummy+0x38>
 8000228:	f240 0300 	movw	r3, #0
 800022c:	f2c0 0300 	movt	r3, #0
 8000230:	b103      	cbz	r3, 8000234 <frame_dummy+0x38>
 8000232:	4798      	blx	r3
 8000234:	bd08      	pop	{r3, pc}
 8000236:	bf00      	nop

08000238 <_Z5Delaym>:
void RCC_Configuration(void);
void NVIC_Configuration(void);
void GPIO_Configuration(void);
void PERIPH_Configuration(void);

void Delay(vu32 nCount) {
 8000238:	b480      	push	{r7}
 800023a:	b083      	sub	sp, #12
 800023c:	af00      	add	r7, sp, #0
 800023e:	6078      	str	r0, [r7, #4]
	while (nCount--)
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	2b00      	cmp	r3, #0
 8000244:	bf0c      	ite	eq
 8000246:	2200      	moveq	r2, #0
 8000248:	2201      	movne	r2, #1
 800024a:	b2d2      	uxtb	r2, r2
 800024c:	f103 33ff 	add.w	r3, r3, #4294967295
 8000250:	607b      	str	r3, [r7, #4]
 8000252:	2a00      	cmp	r2, #0
 8000254:	d1f4      	bne.n	8000240 <_Z5Delaym+0x8>
		;
}
 8000256:	f107 070c 	add.w	r7, r7, #12
 800025a:	46bd      	mov	sp, r7
 800025c:	bc80      	pop	{r7}
 800025e:	4770      	bx	lr

08000260 <_Z8SetColormmm>:

void SetColor(uint32_t R, uint32_t G, uint32_t B) {
 8000260:	b580      	push	{r7, lr}
 8000262:	b084      	sub	sp, #16
 8000264:	af00      	add	r7, sp, #0
 8000266:	60f8      	str	r0, [r7, #12]
 8000268:	60b9      	str	r1, [r7, #8]
 800026a:	607a      	str	r2, [r7, #4]

	TIM_OCInitStructure.TIM_Pulse = 0xFF - R;
 800026c:	68fb      	ldr	r3, [r7, #12]
 800026e:	b29b      	uxth	r3, r3
 8000270:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8000274:	b29a      	uxth	r2, r3
 8000276:	f240 537c 	movw	r3, #1404	; 0x57c
 800027a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800027e:	80da      	strh	r2, [r3, #6]
	TIM_OC2Init(TIM2, &TIM_OCInitStructure);
 8000280:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000284:	f240 517c 	movw	r1, #1404	; 0x57c
 8000288:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800028c:	f002 f802 	bl	8002294 <TIM_OC2Init>
	TIM_OC2PreloadConfig(TIM2, TIM_OCPreload_Enable );
 8000290:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000294:	f04f 0108 	mov.w	r1, #8
 8000298:	f002 fe16 	bl	8002ec8 <TIM_OC2PreloadConfig>

	TIM_OCInitStructure.TIM_Pulse = 0xFF - G;
 800029c:	68bb      	ldr	r3, [r7, #8]
 800029e:	b29b      	uxth	r3, r3
 80002a0:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80002a4:	b29a      	uxth	r2, r3
 80002a6:	f240 537c 	movw	r3, #1404	; 0x57c
 80002aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80002ae:	80da      	strh	r2, [r3, #6]
	TIM_OC2Init(TIM3, &TIM_OCInitStructure);
 80002b0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80002b4:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80002b8:	f240 517c 	movw	r1, #1404	; 0x57c
 80002bc:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80002c0:	f001 ffe8 	bl	8002294 <TIM_OC2Init>
	TIM_OC2PreloadConfig(TIM3, TIM_OCPreload_Enable );
 80002c4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80002c8:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80002cc:	f04f 0108 	mov.w	r1, #8
 80002d0:	f002 fdfa 	bl	8002ec8 <TIM_OC2PreloadConfig>

	TIM_OCInitStructure.TIM_Pulse = 0xFF - B;
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	b29b      	uxth	r3, r3
 80002d8:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80002dc:	b29a      	uxth	r2, r3
 80002de:	f240 537c 	movw	r3, #1404	; 0x57c
 80002e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80002e6:	80da      	strh	r2, [r3, #6]
	TIM_OC1Init(TIM3, &TIM_OCInitStructure);
 80002e8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80002ec:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80002f0:	f240 517c 	movw	r1, #1404	; 0x57c
 80002f4:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80002f8:	f001 ff38 	bl	800216c <TIM_OC1Init>
	TIM_OC1PreloadConfig(TIM3, TIM_OCPreload_Enable );
 80002fc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000300:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000304:	f04f 0108 	mov.w	r1, #8
 8000308:	f002 fdc2 	bl	8002e90 <TIM_OC1PreloadConfig>

}
 800030c:	f107 0710 	add.w	r7, r7, #16
 8000310:	46bd      	mov	sp, r7
 8000312:	bd80      	pop	{r7, pc}

08000314 <main>:
	void test(int a) {
		this->x = a + 10;
	}
};

int main(void) {
 8000314:	b580      	push	{r7, lr}
 8000316:	b084      	sub	sp, #16
 8000318:	af00      	add	r7, sp, #0

	Trieda t;
	t.test(2);
 800031a:	f107 0304 	add.w	r3, r7, #4
 800031e:	4618      	mov	r0, r3
 8000320:	f04f 0102 	mov.w	r1, #2
 8000324:	f004 fbde 	bl	8004ae4 <_ZN6Trieda4testEi>

	RCC_Configuration();
 8000328:	f000 f8ca 	bl	80004c0 <_Z17RCC_Configurationv>
	GPIO_Configuration();
 800032c:	f000 f8d8 	bl	80004e0 <_Z18GPIO_Configurationv>
	NVIC_Configuration();
 8000330:	f000 f8c0 	bl	80004b4 <_Z18NVIC_Configurationv>
	PERIPH_Configuration();
 8000334:	f000 f924 	bl	8000580 <_Z20PERIPH_Configurationv>

	#define STEP			0x1f
	#define MIN_INTENSITY	0x2f
	#define MAX_INTENSITY	0x5f

	uint16_t last1 = rand() % 0xff;
 8000338:	f003 fec0 	bl	80040bc <rand>
 800033c:	4601      	mov	r1, r0
 800033e:	f248 0381 	movw	r3, #32897	; 0x8081
 8000342:	f2c8 0380 	movt	r3, #32896	; 0x8080
 8000346:	fb83 2301 	smull	r2, r3, r3, r1
 800034a:	185b      	adds	r3, r3, r1
 800034c:	ea4f 12e3 	mov.w	r2, r3, asr #7
 8000350:	ea4f 73e1 	mov.w	r3, r1, asr #31
 8000354:	1ad2      	subs	r2, r2, r3
 8000356:	4613      	mov	r3, r2
 8000358:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800035c:	1a9b      	subs	r3, r3, r2
 800035e:	1aca      	subs	r2, r1, r3
 8000360:	4613      	mov	r3, r2
 8000362:	81fb      	strh	r3, [r7, #14]
	uint16_t last2 = rand() % 0xff;
 8000364:	f003 feaa 	bl	80040bc <rand>
 8000368:	4601      	mov	r1, r0
 800036a:	f248 0381 	movw	r3, #32897	; 0x8081
 800036e:	f2c8 0380 	movt	r3, #32896	; 0x8080
 8000372:	fb83 2301 	smull	r2, r3, r3, r1
 8000376:	185b      	adds	r3, r3, r1
 8000378:	ea4f 12e3 	mov.w	r2, r3, asr #7
 800037c:	ea4f 73e1 	mov.w	r3, r1, asr #31
 8000380:	1ad2      	subs	r2, r2, r3
 8000382:	4613      	mov	r3, r2
 8000384:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8000388:	1a9b      	subs	r3, r3, r2
 800038a:	1aca      	subs	r2, r1, r3
 800038c:	4613      	mov	r3, r2
 800038e:	81bb      	strh	r3, [r7, #12]
	uint16_t last3 = rand() % 0xff;
 8000390:	f003 fe94 	bl	80040bc <rand>
 8000394:	4601      	mov	r1, r0
 8000396:	f248 0381 	movw	r3, #32897	; 0x8081
 800039a:	f2c8 0380 	movt	r3, #32896	; 0x8080
 800039e:	fb83 2301 	smull	r2, r3, r3, r1
 80003a2:	185b      	adds	r3, r3, r1
 80003a4:	ea4f 12e3 	mov.w	r2, r3, asr #7
 80003a8:	ea4f 73e1 	mov.w	r3, r1, asr #31
 80003ac:	1ad2      	subs	r2, r2, r3
 80003ae:	4613      	mov	r3, r2
 80003b0:	ea4f 2303 	mov.w	r3, r3, lsl #8
 80003b4:	1a9b      	subs	r3, r3, r2
 80003b6:	1aca      	subs	r2, r1, r3
 80003b8:	4613      	mov	r3, r2
 80003ba:	817b      	strh	r3, [r7, #10]

	while (1) {
		last1 += (rand() % STEP) - (STEP / 2);
 80003bc:	f003 fe7e 	bl	80040bc <rand>
 80003c0:	4601      	mov	r1, r0
 80003c2:	f640 0343 	movw	r3, #2115	; 0x843
 80003c6:	f2c8 4321 	movt	r3, #33825	; 0x8421
 80003ca:	fb83 2301 	smull	r2, r3, r3, r1
 80003ce:	185b      	adds	r3, r3, r1
 80003d0:	ea4f 1223 	mov.w	r2, r3, asr #4
 80003d4:	ea4f 73e1 	mov.w	r3, r1, asr #31
 80003d8:	1ad2      	subs	r2, r2, r3
 80003da:	4613      	mov	r3, r2
 80003dc:	ea4f 1343 	mov.w	r3, r3, lsl #5
 80003e0:	1a9b      	subs	r3, r3, r2
 80003e2:	1aca      	subs	r2, r1, r3
 80003e4:	b292      	uxth	r2, r2
 80003e6:	89fb      	ldrh	r3, [r7, #14]
 80003e8:	18d3      	adds	r3, r2, r3
 80003ea:	b29b      	uxth	r3, r3
 80003ec:	f1a3 030f 	sub.w	r3, r3, #15
 80003f0:	81fb      	strh	r3, [r7, #14]
		last2 += (rand() % STEP) - (STEP / 2);
 80003f2:	f003 fe63 	bl	80040bc <rand>
 80003f6:	4601      	mov	r1, r0
 80003f8:	f640 0343 	movw	r3, #2115	; 0x843
 80003fc:	f2c8 4321 	movt	r3, #33825	; 0x8421
 8000400:	fb83 2301 	smull	r2, r3, r3, r1
 8000404:	185b      	adds	r3, r3, r1
 8000406:	ea4f 1223 	mov.w	r2, r3, asr #4
 800040a:	ea4f 73e1 	mov.w	r3, r1, asr #31
 800040e:	1ad2      	subs	r2, r2, r3
 8000410:	4613      	mov	r3, r2
 8000412:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8000416:	1a9b      	subs	r3, r3, r2
 8000418:	1aca      	subs	r2, r1, r3
 800041a:	b292      	uxth	r2, r2
 800041c:	89bb      	ldrh	r3, [r7, #12]
 800041e:	18d3      	adds	r3, r2, r3
 8000420:	b29b      	uxth	r3, r3
 8000422:	f1a3 030f 	sub.w	r3, r3, #15
 8000426:	81bb      	strh	r3, [r7, #12]
		last3 += (rand() % STEP) - (STEP / 2);
 8000428:	f003 fe48 	bl	80040bc <rand>
 800042c:	4601      	mov	r1, r0
 800042e:	f640 0343 	movw	r3, #2115	; 0x843
 8000432:	f2c8 4321 	movt	r3, #33825	; 0x8421
 8000436:	fb83 2301 	smull	r2, r3, r3, r1
 800043a:	185b      	adds	r3, r3, r1
 800043c:	ea4f 1223 	mov.w	r2, r3, asr #4
 8000440:	ea4f 73e1 	mov.w	r3, r1, asr #31
 8000444:	1ad2      	subs	r2, r2, r3
 8000446:	4613      	mov	r3, r2
 8000448:	ea4f 1343 	mov.w	r3, r3, lsl #5
 800044c:	1a9b      	subs	r3, r3, r2
 800044e:	1aca      	subs	r2, r1, r3
 8000450:	b292      	uxth	r2, r2
 8000452:	897b      	ldrh	r3, [r7, #10]
 8000454:	18d3      	adds	r3, r2, r3
 8000456:	b29b      	uxth	r3, r3
 8000458:	f1a3 030f 	sub.w	r3, r3, #15
 800045c:	817b      	strh	r3, [r7, #10]

		last1 = last1 > MAX_INTENSITY ? MAX_INTENSITY : last1;
 800045e:	89fb      	ldrh	r3, [r7, #14]
 8000460:	2b5f      	cmp	r3, #95	; 0x5f
 8000462:	bf28      	it	cs
 8000464:	235f      	movcs	r3, #95	; 0x5f
 8000466:	81fb      	strh	r3, [r7, #14]
		last2 = last2 > MAX_INTENSITY ? MAX_INTENSITY : last2;
 8000468:	89bb      	ldrh	r3, [r7, #12]
 800046a:	2b5f      	cmp	r3, #95	; 0x5f
 800046c:	bf28      	it	cs
 800046e:	235f      	movcs	r3, #95	; 0x5f
 8000470:	81bb      	strh	r3, [r7, #12]
		last3 = last3 > MAX_INTENSITY ? MAX_INTENSITY : last3;
 8000472:	897b      	ldrh	r3, [r7, #10]
 8000474:	2b5f      	cmp	r3, #95	; 0x5f
 8000476:	bf28      	it	cs
 8000478:	235f      	movcs	r3, #95	; 0x5f
 800047a:	817b      	strh	r3, [r7, #10]

		last1 = last1 < MIN_INTENSITY ? MIN_INTENSITY : last1;
 800047c:	89fb      	ldrh	r3, [r7, #14]
 800047e:	2b2f      	cmp	r3, #47	; 0x2f
 8000480:	bf38      	it	cc
 8000482:	232f      	movcc	r3, #47	; 0x2f
 8000484:	81fb      	strh	r3, [r7, #14]
		last2 = last2 < MIN_INTENSITY ? MIN_INTENSITY : last2;
 8000486:	89bb      	ldrh	r3, [r7, #12]
 8000488:	2b2f      	cmp	r3, #47	; 0x2f
 800048a:	bf38      	it	cc
 800048c:	232f      	movcc	r3, #47	; 0x2f
 800048e:	81bb      	strh	r3, [r7, #12]
		last3 = last3 < MIN_INTENSITY ? MIN_INTENSITY : last3;
 8000490:	897b      	ldrh	r3, [r7, #10]
 8000492:	2b2f      	cmp	r3, #47	; 0x2f
 8000494:	bf38      	it	cc
 8000496:	232f      	movcc	r3, #47	; 0x2f
 8000498:	817b      	strh	r3, [r7, #10]

		SetColor(last1, last2, last3);
 800049a:	89f9      	ldrh	r1, [r7, #14]
 800049c:	89ba      	ldrh	r2, [r7, #12]
 800049e:	897b      	ldrh	r3, [r7, #10]
 80004a0:	4608      	mov	r0, r1
 80004a2:	4611      	mov	r1, r2
 80004a4:	461a      	mov	r2, r3
 80004a6:	f7ff fedb 	bl	8000260 <_Z8SetColormmm>
		Delay(0x8fff);
 80004aa:	f648 70ff 	movw	r0, #36863	; 0x8fff
 80004ae:	f7ff fec3 	bl	8000238 <_Z5Delaym>

	uint16_t last1 = rand() % 0xff;
	uint16_t last2 = rand() % 0xff;
	uint16_t last3 = rand() % 0xff;

	while (1) {
 80004b2:	e783      	b.n	80003bc <main+0xa8>

080004b4 <_Z18NVIC_Configurationv>:
			Delay(_DELAY);
		}
	}
}

void NVIC_Configuration(void) {
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
	//NVIC_InitTypeDef NVIC_InitStructure;

}
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bc80      	pop	{r7}
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <_Z17RCC_Configurationv>:

void RCC_Configuration(void) {
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0

	RCC_APB2PeriphClockCmd(
			RCC_APB2Periph_GPIOA | RCC_APB2Periph_GPIOB | RCC_APB2Periph_AFIO | RCC_APB2Periph_TIM1,
			ENABLE);
 80004c4:	f640 000d 	movw	r0, #2061	; 0x80d
 80004c8:	f04f 0101 	mov.w	r1, #1
 80004cc:	f001 fb06 	bl	8001adc <RCC_APB2PeriphClockCmd>
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3 | RCC_APB1Periph_TIM2, ENABLE);
 80004d0:	f04f 0003 	mov.w	r0, #3
 80004d4:	f04f 0101 	mov.w	r1, #1
 80004d8:	f001 fb2a 	bl	8001b30 <RCC_APB1PeriphClockCmd>
}
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop

080004e0 <_Z18GPIO_Configurationv>:

void GPIO_Configuration(void) {
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
 80004e6:	f04f 0301 	mov.w	r3, #1
 80004ea:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 80004ec:	f04f 0348 	mov.w	r3, #72	; 0x48
 80004f0:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 80004f2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80004f6:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80004fa:	f107 0304 	add.w	r3, r7, #4
 80004fe:	4619      	mov	r1, r3
 8000500:	f000 fc50 	bl	8000da4 <GPIO_Init>

	if (GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_0 ) == Bit_SET) {
 8000504:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000508:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800050c:	f04f 0101 	mov.w	r1, #1
 8000510:	f000 fd36 	bl	8000f80 <GPIO_ReadInputDataBit>
 8000514:	4603      	mov	r3, r0
 8000516:	2b01      	cmp	r3, #1
 8000518:	bf14      	ite	ne
 800051a:	2300      	movne	r3, #0
 800051c:	2301      	moveq	r3, #1
 800051e:	b2db      	uxtb	r3, r3
 8000520:	2b00      	cmp	r3, #0
 8000522:	d029      	beq.n	8000578 <_Z18GPIO_Configurationv+0x98>
		GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_5;
 8000524:	f04f 0338 	mov.w	r3, #56	; 0x38
 8000528:	80bb      	strh	r3, [r7, #4]
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 800052a:	f04f 0318 	mov.w	r3, #24
 800052e:	71fb      	strb	r3, [r7, #7]
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000530:	f04f 0303 	mov.w	r3, #3
 8000534:	71bb      	strb	r3, [r7, #6]
		GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000536:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800053a:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800053e:	f107 0304 	add.w	r3, r7, #4
 8000542:	4619      	mov	r1, r3
 8000544:	f000 fc2e 	bl	8000da4 <GPIO_Init>

		GPIO_PinRemapConfig(GPIO_Remap_SWJ_JTAGDisable, ENABLE);
 8000548:	f44f 7000 	mov.w	r0, #512	; 0x200
 800054c:	f2c0 0030 	movt	r0, #48	; 0x30
 8000550:	f04f 0101 	mov.w	r1, #1
 8000554:	f000 fe0a 	bl	800116c <GPIO_PinRemapConfig>
		GPIO_PinRemapConfig(GPIO_PartialRemap1_TIM2, ENABLE);
 8000558:	f44f 7080 	mov.w	r0, #256	; 0x100
 800055c:	f2c0 0018 	movt	r0, #24
 8000560:	f04f 0101 	mov.w	r1, #1
 8000564:	f000 fe02 	bl	800116c <GPIO_PinRemapConfig>
		GPIO_PinRemapConfig(GPIO_PartialRemap_TIM3, ENABLE);
 8000568:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800056c:	f2c0 001a 	movt	r0, #26
 8000570:	f04f 0101 	mov.w	r1, #1
 8000574:	f000 fdfa 	bl	800116c <GPIO_PinRemapConfig>
	}
}
 8000578:	f107 0708 	add.w	r7, r7, #8
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}

08000580 <_Z20PERIPH_Configurationv>:

// TIM3-3, TIM3-4, TIM1-1

void PERIPH_Configuration(void) {
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0

	TIM_TimeBaseStructure.TIM_Period = 0xFF;
 8000584:	f240 538c 	movw	r3, #1420	; 0x58c
 8000588:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800058c:	f04f 02ff 	mov.w	r2, #255	; 0xff
 8000590:	809a      	strh	r2, [r3, #4]
	TIM_TimeBaseStructure.TIM_Prescaler = 0;
 8000592:	f240 538c 	movw	r3, #1420	; 0x58c
 8000596:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800059a:	f04f 0200 	mov.w	r2, #0
 800059e:	801a      	strh	r2, [r3, #0]
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 80005a0:	f240 538c 	movw	r3, #1420	; 0x58c
 80005a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80005a8:	f04f 0200 	mov.w	r2, #0
 80005ac:	80da      	strh	r2, [r3, #6]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_CenterAligned3;
 80005ae:	f240 538c 	movw	r3, #1420	; 0x58c
 80005b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80005b6:	f04f 0260 	mov.w	r2, #96	; 0x60
 80005ba:	805a      	strh	r2, [r3, #2]

	TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);
 80005bc:	f44f 5030 	mov.w	r0, #11264	; 0x2c00
 80005c0:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80005c4:	f240 518c 	movw	r1, #1420	; 0x58c
 80005c8:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80005cc:	f001 fd40 	bl	8002050 <TIM_TimeBaseInit>
	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 80005d0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80005d4:	f240 518c 	movw	r1, #1420	; 0x58c
 80005d8:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80005dc:	f001 fd38 	bl	8002050 <TIM_TimeBaseInit>
	TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);
 80005e0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80005e4:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80005e8:	f240 518c 	movw	r1, #1420	; 0x58c
 80005ec:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80005f0:	f001 fd2e 	bl	8002050 <TIM_TimeBaseInit>

	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 80005f4:	f240 537c 	movw	r3, #1404	; 0x57c
 80005f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80005fc:	f04f 0260 	mov.w	r2, #96	; 0x60
 8000600:	801a      	strh	r2, [r3, #0]
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8000602:	f240 537c 	movw	r3, #1404	; 0x57c
 8000606:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800060a:	f04f 0201 	mov.w	r2, #1
 800060e:	805a      	strh	r2, [r3, #2]
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 8000610:	f240 537c 	movw	r3, #1404	; 0x57c
 8000614:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000618:	f04f 0200 	mov.w	r2, #0
 800061c:	811a      	strh	r2, [r3, #8]
	TIM_OCInitStructure.TIM_Pulse = TIM_OCPolarity_High;
 800061e:	f240 537c 	movw	r3, #1404	; 0x57c
 8000622:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000626:	f04f 0200 	mov.w	r2, #0
 800062a:	80da      	strh	r2, [r3, #6]

	TIM_ARRPreloadConfig(TIM1, ENABLE);
 800062c:	f44f 5030 	mov.w	r0, #11264	; 0x2c00
 8000630:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000634:	f04f 0101 	mov.w	r1, #1
 8000638:	f002 fbaa 	bl	8002d90 <TIM_ARRPreloadConfig>
	TIM_ARRPreloadConfig(TIM2, ENABLE);
 800063c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000640:	f04f 0101 	mov.w	r1, #1
 8000644:	f002 fba4 	bl	8002d90 <TIM_ARRPreloadConfig>
	TIM_ARRPreloadConfig(TIM3, ENABLE);
 8000648:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800064c:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000650:	f04f 0101 	mov.w	r1, #1
 8000654:	f002 fb9c 	bl	8002d90 <TIM_ARRPreloadConfig>

	TIM_Cmd(TIM1, ENABLE);
 8000658:	f44f 5030 	mov.w	r0, #11264	; 0x2c00
 800065c:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000660:	f04f 0101 	mov.w	r1, #1
 8000664:	f002 f914 	bl	8002890 <TIM_Cmd>
	TIM_Cmd(TIM2, ENABLE);
 8000668:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800066c:	f04f 0101 	mov.w	r1, #1
 8000670:	f002 f90e 	bl	8002890 <TIM_Cmd>
	TIM_Cmd(TIM3, ENABLE);
 8000674:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000678:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800067c:	f04f 0101 	mov.w	r1, #1
 8000680:	f002 f906 	bl	8002890 <TIM_Cmd>

	TIM_CtrlPWMOutputs(TIM1, ENABLE);
 8000684:	f44f 5030 	mov.w	r0, #11264	; 0x2c00
 8000688:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800068c:	f04f 0101 	mov.w	r1, #1
 8000690:	f002 f91e 	bl	80028d0 <TIM_CtrlPWMOutputs>
	TIM_CtrlPWMOutputs(TIM2, ENABLE);
 8000694:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000698:	f04f 0101 	mov.w	r1, #1
 800069c:	f002 f918 	bl	80028d0 <TIM_CtrlPWMOutputs>
	TIM_CtrlPWMOutputs(TIM3, ENABLE);
 80006a0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80006a4:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80006a8:	f04f 0101 	mov.w	r1, #1
 80006ac:	f002 f910 	bl	80028d0 <TIM_CtrlPWMOutputs>
}
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop

080006b4 <_Z13__assert_funcPKciS0_S0_>:

void __assert_func(const char *file, int line, const char *func,
		const char *failedexpr) {
 80006b4:	b480      	push	{r7}
 80006b6:	b085      	sub	sp, #20
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	60f8      	str	r0, [r7, #12]
 80006bc:	60b9      	str	r1, [r7, #8]
 80006be:	607a      	str	r2, [r7, #4]
 80006c0:	603b      	str	r3, [r7, #0]
	while (1) {
 80006c2:	e7fe      	b.n	80006c2 <_Z13__assert_funcPKciS0_S0_+0xe>

080006c4 <_Z8__assertPKciS0_>:
	}
}

void __assert(const char *file, int line, const char *failedexpr) {
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b084      	sub	sp, #16
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	60f8      	str	r0, [r7, #12]
 80006cc:	60b9      	str	r1, [r7, #8]
 80006ce:	607a      	str	r2, [r7, #4]
	__assert_func(file, line, NULL, failedexpr);
 80006d0:	68f8      	ldr	r0, [r7, #12]
 80006d2:	68b9      	ldr	r1, [r7, #8]
 80006d4:	f04f 0200 	mov.w	r2, #0
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	f7ff ffeb 	bl	80006b4 <_Z13__assert_funcPKciS0_S0_>
}
 80006de:	f107 0710 	add.w	r7, r7, #16
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop

080006e8 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
}
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bc80      	pop	{r7}
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop

080006f4 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 80006f8:	e7fe      	b.n	80006f8 <HardFault_Handler+0x4>
 80006fa:	bf00      	nop

080006fc <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8000700:	e7fe      	b.n	8000700 <MemManage_Handler+0x4>
 8000702:	bf00      	nop

08000704 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8000708:	e7fe      	b.n	8000708 <BusFault_Handler+0x4>
 800070a:	bf00      	nop

0800070c <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8000710:	e7fe      	b.n	8000710 <UsageFault_Handler+0x4>
 8000712:	bf00      	nop

08000714 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
}
 8000718:	46bd      	mov	sp, r7
 800071a:	bc80      	pop	{r7}
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop

08000720 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
}
 8000724:	46bd      	mov	sp, r7
 8000726:	bc80      	pop	{r7}
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop

0800072c <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
}
 8000730:	46bd      	mov	sp, r7
 8000732:	bc80      	pop	{r7}
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop

08000738 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
}
 800073c:	46bd      	mov	sp, r7
 800073e:	bc80      	pop	{r7}
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop

08000744 <_kill>:

#undef errno
extern int errno;

int _kill(int pid, int sig)
{
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
 800074c:	6039      	str	r1, [r7, #0]
	(void)pid;
	(void)sig; /* avoid warnings */
	errno = EINVAL;
 800074e:	f240 539c 	movw	r3, #1436	; 0x59c
 8000752:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000756:	f04f 0216 	mov.w	r2, #22
 800075a:	601a      	str	r2, [r3, #0]
	return -1;
 800075c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000760:	4618      	mov	r0, r3
 8000762:	f107 070c 	add.w	r7, r7, #12
 8000766:	46bd      	mov	sp, r7
 8000768:	bc80      	pop	{r7}
 800076a:	4770      	bx	lr

0800076c <_exit>:

void _exit(int status)
{
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
	while(1) {;}
 8000774:	e7fe      	b.n	8000774 <_exit+0x8>
 8000776:	bf00      	nop

08000778 <_getpid>:
}

int _getpid(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
	return 1;
 800077c:	f04f 0301 	mov.w	r3, #1
}
 8000780:	4618      	mov	r0, r3
 8000782:	46bd      	mov	sp, r7
 8000784:	bc80      	pop	{r7}
 8000786:	4770      	bx	lr

08000788 <get_heap_end>:

extern char _end; /* Defined by the linker */
static char *heap_end;

char* get_heap_end(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
	return (char*) heap_end;
 800078c:	f240 5398 	movw	r3, #1432	; 0x598
 8000790:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000794:	681b      	ldr	r3, [r3, #0]
}
 8000796:	4618      	mov	r0, r3
 8000798:	46bd      	mov	sp, r7
 800079a:	bc80      	pop	{r7}
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop

080007a0 <get_stack_top>:

char* get_stack_top(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
	return (char*) __get_MSP();
 80007a4:	f003 faf0 	bl	8003d88 <__get_MSP>
 80007a8:	4603      	mov	r3, r0
	// return (char*) __get_PSP();
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop

080007b0 <_sbrk>:

caddr_t _sbrk(int incr)
{
 80007b0:	b590      	push	{r4, r7, lr}
 80007b2:	b085      	sub	sp, #20
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
	char *prev_heap_end;
	if (heap_end == 0) {
 80007b8:	f240 5398 	movw	r3, #1432	; 0x598
 80007bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d108      	bne.n	80007d8 <_sbrk+0x28>
		heap_end = &_end;
 80007c6:	f240 5398 	movw	r3, #1432	; 0x598
 80007ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80007ce:	f240 52a0 	movw	r2, #1440	; 0x5a0
 80007d2:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80007d6:	601a      	str	r2, [r3, #0]
	}
	prev_heap_end = heap_end;
 80007d8:	f240 5398 	movw	r3, #1432	; 0x598
 80007dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	60fb      	str	r3, [r7, #12]
#if 1
	if (heap_end + incr > get_stack_top()) {
 80007e4:	f240 5398 	movw	r3, #1432	; 0x598
 80007e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80007ec:	681a      	ldr	r2, [r3, #0]
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	18d4      	adds	r4, r2, r3
 80007f2:	f7ff ffd5 	bl	80007a0 <get_stack_top>
 80007f6:	4603      	mov	r3, r0
 80007f8:	429c      	cmp	r4, r3
 80007fa:	d901      	bls.n	8000800 <_sbrk+0x50>
		abort();
 80007fc:	f003 fbfe 	bl	8003ffc <abort>
	}
#endif
	heap_end += incr;
 8000800:	f240 5398 	movw	r3, #1432	; 0x598
 8000804:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000808:	681a      	ldr	r2, [r3, #0]
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	18d2      	adds	r2, r2, r3
 800080e:	f240 5398 	movw	r3, #1432	; 0x598
 8000812:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000816:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 8000818:	68fb      	ldr	r3, [r7, #12]
}
 800081a:	4618      	mov	r0, r3
 800081c:	f107 0714 	add.w	r7, r7, #20
 8000820:	46bd      	mov	sp, r7
 8000822:	bd90      	pop	{r4, r7, pc}

08000824 <_close>:

int _close(int file)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
	(void)file; /* avoid warning */
	return -1;
 800082c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000830:	4618      	mov	r0, r3
 8000832:	f107 070c 	add.w	r7, r7, #12
 8000836:	46bd      	mov	sp, r7
 8000838:	bc80      	pop	{r7}
 800083a:	4770      	bx	lr

0800083c <_fstat>:

int _fstat(int file, struct stat *st)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
 8000844:	6039      	str	r1, [r7, #0]
	(void)file; /* avoid warning */
	st->st_mode = S_IFCHR;
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800084c:	605a      	str	r2, [r3, #4]
	return 0;
 800084e:	f04f 0300 	mov.w	r3, #0
}
 8000852:	4618      	mov	r0, r3
 8000854:	f107 070c 	add.w	r7, r7, #12
 8000858:	46bd      	mov	sp, r7
 800085a:	bc80      	pop	{r7}
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop

08000860 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8000860:	b480      	push	{r7}
 8000862:	b085      	sub	sp, #20
 8000864:	af00      	add	r7, sp, #0
 8000866:	60f8      	str	r0, [r7, #12]
 8000868:	60b9      	str	r1, [r7, #8]
 800086a:	607a      	str	r2, [r7, #4]
	(void)file; /* avoid warning */
	(void)ptr;  /* avoid warning */
	(void)dir;  /* avoid warning */
	return 0;
 800086c:	f04f 0300 	mov.w	r3, #0
}
 8000870:	4618      	mov	r0, r3
 8000872:	f107 0714 	add.w	r7, r7, #20
 8000876:	46bd      	mov	sp, r7
 8000878:	bc80      	pop	{r7}
 800087a:	4770      	bx	lr

0800087c <_read>:

int _read(int file, char *ptr, int len)
{
 800087c:	b480      	push	{r7}
 800087e:	b085      	sub	sp, #20
 8000880:	af00      	add	r7, sp, #0
 8000882:	60f8      	str	r0, [r7, #12]
 8000884:	60b9      	str	r1, [r7, #8]
 8000886:	607a      	str	r2, [r7, #4]
	(void)file; /* avoid warning */
	(void)ptr;  /* avoid warning */
	(void)len;  /* avoid warning */
	return 0;
 8000888:	f04f 0300 	mov.w	r3, #0
}
 800088c:	4618      	mov	r0, r3
 800088e:	f107 0714 	add.w	r7, r7, #20
 8000892:	46bd      	mov	sp, r7
 8000894:	bc80      	pop	{r7}
 8000896:	4770      	bx	lr

08000898 <_write>:

int _write(int file, char *ptr, int len)
{
 8000898:	b480      	push	{r7}
 800089a:	b087      	sub	sp, #28
 800089c:	af00      	add	r7, sp, #0
 800089e:	60f8      	str	r0, [r7, #12]
 80008a0:	60b9      	str	r1, [r7, #8]
 80008a2:	607a      	str	r2, [r7, #4]
	int todo;
	(void)file; /* avoid warning */
	for (todo = 0; todo < len; todo++) {
 80008a4:	f04f 0300 	mov.w	r3, #0
 80008a8:	617b      	str	r3, [r7, #20]
 80008aa:	e003      	b.n	80008b4 <_write+0x1c>
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	f103 0301 	add.w	r3, r3, #1
 80008b2:	617b      	str	r3, [r7, #20]
 80008b4:	697a      	ldr	r2, [r7, #20]
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	429a      	cmp	r2, r3
 80008ba:	dbf7      	blt.n	80008ac <_write+0x14>
		// xputc(*ptr++);
	}
	return len;
 80008bc:	687b      	ldr	r3, [r7, #4]
}
 80008be:	4618      	mov	r0, r3
 80008c0:	f107 071c 	add.w	r7, r7, #28
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bc80      	pop	{r7}
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop

080008cc <_isatty_r>:

int _isatty_r(
struct _reent *ptr __attribute__((unused)),
int fd
)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
 80008d4:	6039      	str	r1, [r7, #0]
return isatty( fd );
 80008d6:	6838      	ldr	r0, [r7, #0]
 80008d8:	f003 fd00 	bl	80042dc <isatty>
 80008dc:	4603      	mov	r3, r0
}
 80008de:	4618      	mov	r0, r3
 80008e0:	f107 0708 	add.w	r7, r7, #8
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}

080008e8 <_isatty>:

int _isatty(int file)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
	(void)file; /* avoid warning */
	return 1;
 80008f0:	f04f 0301 	mov.w	r3, #1
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	f107 070c 	add.w	r7, r7, #12
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bc80      	pop	{r7}
 80008fe:	4770      	bx	lr

08000900 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000904:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000908:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800090c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000910:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000914:	6812      	ldr	r2, [r2, #0]
 8000916:	f042 0201 	orr.w	r2, r2, #1
 800091a:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 800091c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000920:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000924:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000928:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800092c:	6859      	ldr	r1, [r3, #4]
 800092e:	f04f 0300 	mov.w	r3, #0
 8000932:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
 8000936:	400b      	ands	r3, r1
 8000938:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800093a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800093e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000942:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000946:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800094a:	6812      	ldr	r2, [r2, #0]
 800094c:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000950:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000954:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000956:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800095a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800095e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000962:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000966:	6812      	ldr	r2, [r2, #0]
 8000968:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800096c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 800096e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000972:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000976:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800097a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800097e:	6852      	ldr	r2, [r2, #4]
 8000980:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8000984:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000986:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800098a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800098e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000992:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
 8000994:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000998:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800099c:	f04f 0200 	mov.w	r2, #0
 80009a0:	62da      	str	r2, [r3, #44]	; 0x2c
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 80009a2:	f000 f8a7 	bl	8000af4 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80009a6:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 80009aa:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80009ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009b2:	609a      	str	r2, [r3, #8]
#endif 
}
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop

080009b8 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b085      	sub	sp, #20
 80009bc:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0;
 80009be:	f04f 0300 	mov.w	r3, #0
 80009c2:	60fb      	str	r3, [r7, #12]
 80009c4:	f04f 0300 	mov.w	r3, #0
 80009c8:	60bb      	str	r3, [r7, #8]
 80009ca:	f04f 0300 	mov.w	r3, #0
 80009ce:	607b      	str	r3, [r7, #4]
#ifdef  STM32F10X_CL
  uint32_t prediv1source = 0, prediv1factor = 0, prediv2factor = 0, pll2mull = 0;
#endif /* STM32F10X_CL */

#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
 80009d0:	f04f 0300 	mov.w	r3, #0
 80009d4:	603b      	str	r3, [r7, #0]
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80009d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009da:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80009de:	685b      	ldr	r3, [r3, #4]
 80009e0:	f003 030c 	and.w	r3, r3, #12
 80009e4:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	2b04      	cmp	r3, #4
 80009ea:	d00d      	beq.n	8000a08 <SystemCoreClockUpdate+0x50>
 80009ec:	2b08      	cmp	r3, #8
 80009ee:	d015      	beq.n	8000a1c <SystemCoreClockUpdate+0x64>
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d153      	bne.n	8000a9c <SystemCoreClockUpdate+0xe4>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 80009f4:	f240 5304 	movw	r3, #1284	; 0x504
 80009f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80009fc:	f44f 5290 	mov.w	r2, #4608	; 0x1200
 8000a00:	f2c0 027a 	movt	r2, #122	; 0x7a
 8000a04:	601a      	str	r2, [r3, #0]
      break;
 8000a06:	e053      	b.n	8000ab0 <SystemCoreClockUpdate+0xf8>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8000a08:	f240 5304 	movw	r3, #1284	; 0x504
 8000a0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000a10:	f44f 5290 	mov.w	r2, #4608	; 0x1200
 8000a14:	f2c0 027a 	movt	r2, #122	; 0x7a
 8000a18:	601a      	str	r2, [r3, #0]
      break;
 8000a1a:	e049      	b.n	8000ab0 <SystemCoreClockUpdate+0xf8>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8000a1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a20:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000a24:	685b      	ldr	r3, [r3, #4]
 8000a26:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000a2a:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000a2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a30:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a3a:	607b      	str	r3, [r7, #4]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	ea4f 4393 	mov.w	r3, r3, lsr #18
 8000a42:	f103 0302 	add.w	r3, r3, #2
 8000a46:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d10c      	bne.n	8000a68 <SystemCoreClockUpdate+0xb0>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 8000a4e:	68ba      	ldr	r2, [r7, #8]
 8000a50:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8000a54:	f2c0 033d 	movt	r3, #61	; 0x3d
 8000a58:	fb03 f202 	mul.w	r2, r3, r2
 8000a5c:	f240 5304 	movw	r3, #1284	; 0x504
 8000a60:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000a64:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8000a66:	e023      	b.n	8000ab0 <SystemCoreClockUpdate+0xf8>
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
      }
      else
      {
 #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
       prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 8000a68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a6c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a72:	f003 030f 	and.w	r3, r3, #15
 8000a76:	f103 0301 	add.w	r3, r3, #1
 8000a7a:	603b      	str	r3, [r7, #0]
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
 8000a7c:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8000a80:	f2c0 037a 	movt	r3, #122	; 0x7a
 8000a84:	683a      	ldr	r2, [r7, #0]
 8000a86:	fbb3 f3f2 	udiv	r3, r3, r2
 8000a8a:	68ba      	ldr	r2, [r7, #8]
 8000a8c:	fb02 f203 	mul.w	r2, r2, r3
 8000a90:	f240 5304 	movw	r3, #1284	; 0x504
 8000a94:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000a98:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8000a9a:	e009      	b.n	8000ab0 <SystemCoreClockUpdate+0xf8>

    default:
      SystemCoreClock = HSI_VALUE;
 8000a9c:	f240 5304 	movw	r3, #1284	; 0x504
 8000aa0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000aa4:	f44f 5290 	mov.w	r2, #4608	; 0x1200
 8000aa8:	f2c0 027a 	movt	r2, #122	; 0x7a
 8000aac:	601a      	str	r2, [r3, #0]
      break;
 8000aae:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000ab0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ab4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000abe:	ea4f 1213 	mov.w	r2, r3, lsr #4
 8000ac2:	f240 5308 	movw	r3, #1288	; 0x508
 8000ac6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000aca:	5c9b      	ldrb	r3, [r3, r2]
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 8000ad0:	f240 5304 	movw	r3, #1284	; 0x504
 8000ad4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ad8:	681a      	ldr	r2, [r3, #0]
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	fa22 f203 	lsr.w	r2, r2, r3
 8000ae0:	f240 5304 	movw	r3, #1284	; 0x504
 8000ae4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ae8:	601a      	str	r2, [r3, #0]
}
 8000aea:	f107 0714 	add.w	r7, r7, #20
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bc80      	pop	{r7}
 8000af2:	4770      	bx	lr

08000af4 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
#ifdef SYSCLK_FREQ_HSE
  SetSysClockToHSE();
#elif defined SYSCLK_FREQ_24MHz
  SetSysClockTo24();
 8000af8:	f000 f802 	bl	8000b00 <SetSysClockTo24>
  SetSysClockTo72();
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop

08000b00 <SetSysClockTo24>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo24(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000b06:	f04f 0300 	mov.w	r3, #0
 8000b0a:	607b      	str	r3, [r7, #4]
 8000b0c:	f04f 0300 	mov.w	r3, #0
 8000b10:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000b12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b16:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000b1a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b1e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000b22:	6812      	ldr	r2, [r2, #0]
 8000b24:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000b28:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000b2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b2e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b38:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	f103 0301 	add.w	r3, r3, #1
 8000b40:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d103      	bne.n	8000b50 <SetSysClockTo24+0x50>
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000b4e:	d1ec      	bne.n	8000b2a <SetSysClockTo24+0x2a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000b50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b54:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d003      	beq.n	8000b6a <SetSysClockTo24+0x6a>
  {
    HSEStatus = (uint32_t)0x01;
 8000b62:	f04f 0301 	mov.w	r3, #1
 8000b66:	603b      	str	r3, [r7, #0]
 8000b68:	e002      	b.n	8000b70 <SetSysClockTo24+0x70>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000b6a:	f04f 0300 	mov.w	r3, #0
 8000b6e:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	2b01      	cmp	r3, #1
 8000b74:	d16d      	bne.n	8000c52 <SetSysClockTo24+0x152>
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_0;    
#endif
 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000b76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b7a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000b7e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b82:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000b86:	6852      	ldr	r2, [r2, #4]
 8000b88:	605a      	str	r2, [r3, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8000b8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b8e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000b92:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b96:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000b9a:	6852      	ldr	r2, [r2, #4]
 8000b9c:	605a      	str	r2, [r3, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 8000b9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ba2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000ba6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000baa:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000bae:	6852      	ldr	r2, [r2, #4]
 8000bb0:	605a      	str	r2, [r3, #4]
    while((RCC->CR & RCC_CR_PLL2RDY) == 0)
    {
    }   
#elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
    /*  PLL configuration:  = (HSE / 2) * 6 = 24 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 8000bb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bb6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000bba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000bbe:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000bc2:	6852      	ldr	r2, [r2, #4]
 8000bc4:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8000bc8:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLXTPRE_PREDIV1_Div2 | RCC_CFGR_PLLMULL6);
 8000bca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bce:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000bd2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000bd6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000bda:	6852      	ldr	r2, [r2, #4]
 8000bdc:	f442 1298 	orr.w	r2, r2, #1245184	; 0x130000
 8000be0:	605a      	str	r2, [r3, #4]
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLXTPRE_HSE_Div2 | RCC_CFGR_PLLMULL6);
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000be2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000be6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000bea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000bee:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000bf2:	6812      	ldr	r2, [r2, #0]
 8000bf4:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000bf8:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000bfa:	bf00      	nop
 8000bfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c00:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d0f6      	beq.n	8000bfc <SetSysClockTo24+0xfc>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000c0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c12:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000c16:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c1a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000c1e:	6852      	ldr	r2, [r2, #4]
 8000c20:	f022 0203 	bic.w	r2, r2, #3
 8000c24:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8000c26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c2a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000c2e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c32:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000c36:	6852      	ldr	r2, [r2, #4]
 8000c38:	f042 0202 	orr.w	r2, r2, #2
 8000c3c:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8000c3e:	bf00      	nop
 8000c40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c44:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	f003 030c 	and.w	r3, r3, #12
 8000c4e:	2b08      	cmp	r3, #8
 8000c50:	d1f6      	bne.n	8000c40 <SetSysClockTo24+0x140>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  } 
}
 8000c52:	f107 070c 	add.w	r7, r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bc80      	pop	{r7}
 8000c5a:	4770      	bx	lr

08000c5c <GPIO_DeInit>:
  * @brief  Deinitializes the GPIOx peripheral registers to their default reset values.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  if (GPIOx == GPIOA)
 8000c64:	687a      	ldr	r2, [r7, #4]
 8000c66:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c6a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	d10c      	bne.n	8000c8c <GPIO_DeInit+0x30>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
 8000c72:	f04f 0004 	mov.w	r0, #4
 8000c76:	f04f 0101 	mov.w	r1, #1
 8000c7a:	f000 ff83 	bl	8001b84 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
 8000c7e:	f04f 0004 	mov.w	r0, #4
 8000c82:	f04f 0100 	mov.w	r1, #0
 8000c86:	f000 ff7d 	bl	8001b84 <RCC_APB2PeriphResetCmd>
 8000c8a:	e076      	b.n	8000d7a <GPIO_DeInit+0x11e>
  }
  else if (GPIOx == GPIOB)
 8000c8c:	687a      	ldr	r2, [r7, #4]
 8000c8e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000c92:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000c96:	429a      	cmp	r2, r3
 8000c98:	d10c      	bne.n	8000cb4 <GPIO_DeInit+0x58>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
 8000c9a:	f04f 0008 	mov.w	r0, #8
 8000c9e:	f04f 0101 	mov.w	r1, #1
 8000ca2:	f000 ff6f 	bl	8001b84 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
 8000ca6:	f04f 0008 	mov.w	r0, #8
 8000caa:	f04f 0100 	mov.w	r1, #0
 8000cae:	f000 ff69 	bl	8001b84 <RCC_APB2PeriphResetCmd>
 8000cb2:	e062      	b.n	8000d7a <GPIO_DeInit+0x11e>
  }
  else if (GPIOx == GPIOC)
 8000cb4:	687a      	ldr	r2, [r7, #4]
 8000cb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cba:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000cbe:	429a      	cmp	r2, r3
 8000cc0:	d10c      	bne.n	8000cdc <GPIO_DeInit+0x80>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
 8000cc2:	f04f 0010 	mov.w	r0, #16
 8000cc6:	f04f 0101 	mov.w	r1, #1
 8000cca:	f000 ff5b 	bl	8001b84 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
 8000cce:	f04f 0010 	mov.w	r0, #16
 8000cd2:	f04f 0100 	mov.w	r1, #0
 8000cd6:	f000 ff55 	bl	8001b84 <RCC_APB2PeriphResetCmd>
 8000cda:	e04e      	b.n	8000d7a <GPIO_DeInit+0x11e>
  }
  else if (GPIOx == GPIOD)
 8000cdc:	687a      	ldr	r2, [r7, #4]
 8000cde:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ce2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	d10c      	bne.n	8000d04 <GPIO_DeInit+0xa8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
 8000cea:	f04f 0020 	mov.w	r0, #32
 8000cee:	f04f 0101 	mov.w	r1, #1
 8000cf2:	f000 ff47 	bl	8001b84 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
 8000cf6:	f04f 0020 	mov.w	r0, #32
 8000cfa:	f04f 0100 	mov.w	r1, #0
 8000cfe:	f000 ff41 	bl	8001b84 <RCC_APB2PeriphResetCmd>
 8000d02:	e03a      	b.n	8000d7a <GPIO_DeInit+0x11e>
  }    
  else if (GPIOx == GPIOE)
 8000d04:	687a      	ldr	r2, [r7, #4]
 8000d06:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000d0a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	d10c      	bne.n	8000d2c <GPIO_DeInit+0xd0>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
 8000d12:	f04f 0040 	mov.w	r0, #64	; 0x40
 8000d16:	f04f 0101 	mov.w	r1, #1
 8000d1a:	f000 ff33 	bl	8001b84 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
 8000d1e:	f04f 0040 	mov.w	r0, #64	; 0x40
 8000d22:	f04f 0100 	mov.w	r1, #0
 8000d26:	f000 ff2d 	bl	8001b84 <RCC_APB2PeriphResetCmd>
 8000d2a:	e026      	b.n	8000d7a <GPIO_DeInit+0x11e>
  } 
  else if (GPIOx == GPIOF)
 8000d2c:	687a      	ldr	r2, [r7, #4]
 8000d2e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000d32:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000d36:	429a      	cmp	r2, r3
 8000d38:	d10c      	bne.n	8000d54 <GPIO_DeInit+0xf8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
 8000d3a:	f04f 0080 	mov.w	r0, #128	; 0x80
 8000d3e:	f04f 0101 	mov.w	r1, #1
 8000d42:	f000 ff1f 	bl	8001b84 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
 8000d46:	f04f 0080 	mov.w	r0, #128	; 0x80
 8000d4a:	f04f 0100 	mov.w	r1, #0
 8000d4e:	f000 ff19 	bl	8001b84 <RCC_APB2PeriphResetCmd>
 8000d52:	e012      	b.n	8000d7a <GPIO_DeInit+0x11e>
  }
  else
  {
    if (GPIOx == GPIOG)
 8000d54:	687a      	ldr	r2, [r7, #4]
 8000d56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d5a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000d5e:	429a      	cmp	r2, r3
 8000d60:	d10b      	bne.n	8000d7a <GPIO_DeInit+0x11e>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
 8000d62:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000d66:	f04f 0101 	mov.w	r1, #1
 8000d6a:	f000 ff0b 	bl	8001b84 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
 8000d6e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000d72:	f04f 0100 	mov.w	r1, #0
 8000d76:	f000 ff05 	bl	8001b84 <RCC_APB2PeriphResetCmd>
    }
  }
}
 8000d7a:	f107 0708 	add.w	r7, r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop

08000d84 <GPIO_AFIODeInit>:
  *   and EXTI configuration) registers to their default reset values.
  * @param  None
  * @retval None
  */
void GPIO_AFIODeInit(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
 8000d88:	f04f 0001 	mov.w	r0, #1
 8000d8c:	f04f 0101 	mov.w	r1, #1
 8000d90:	f000 fef8 	bl	8001b84 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
 8000d94:	f04f 0001 	mov.w	r0, #1
 8000d98:	f04f 0100 	mov.w	r1, #0
 8000d9c:	f000 fef2 	bl	8001b84 <RCC_APB2PeriphResetCmd>
}
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop

08000da4 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b089      	sub	sp, #36	; 0x24
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 8000dae:	f04f 0300 	mov.w	r3, #0
 8000db2:	61fb      	str	r3, [r7, #28]
 8000db4:	f04f 0300 	mov.w	r3, #0
 8000db8:	613b      	str	r3, [r7, #16]
 8000dba:	f04f 0300 	mov.w	r3, #0
 8000dbe:	61bb      	str	r3, [r7, #24]
 8000dc0:	f04f 0300 	mov.w	r3, #0
 8000dc4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 8000dc6:	f04f 0300 	mov.w	r3, #0
 8000dca:	617b      	str	r3, [r7, #20]
 8000dcc:	f04f 0300 	mov.w	r3, #0
 8000dd0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	78db      	ldrb	r3, [r3, #3]
 8000dd6:	f003 030f 	and.w	r3, r3, #15
 8000dda:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	78db      	ldrb	r3, [r3, #3]
 8000de0:	f003 0310 	and.w	r3, r3, #16
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d004      	beq.n	8000df2 <GPIO_Init+0x4e>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	789b      	ldrb	r3, [r3, #2]
 8000dec:	69fa      	ldr	r2, [r7, #28]
 8000dee:	4313      	orrs	r3, r2
 8000df0:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	881b      	ldrh	r3, [r3, #0]
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d04e      	beq.n	8000e9a <GPIO_Init+0xf6>
  {
    tmpreg = GPIOx->CRL;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000e02:	f04f 0300 	mov.w	r3, #0
 8000e06:	61bb      	str	r3, [r7, #24]
 8000e08:	e041      	b.n	8000e8e <GPIO_Init+0xea>
    {
      pos = ((uint32_t)0x01) << pinpos;
 8000e0a:	69bb      	ldr	r3, [r7, #24]
 8000e0c:	f04f 0201 	mov.w	r2, #1
 8000e10:	fa02 f303 	lsl.w	r3, r2, r3
 8000e14:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	881b      	ldrh	r3, [r3, #0]
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	4013      	ands	r3, r2
 8000e20:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000e22:	693a      	ldr	r2, [r7, #16]
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	429a      	cmp	r2, r3
 8000e28:	d12d      	bne.n	8000e86 <GPIO_Init+0xe2>
      {
        pos = pinpos << 2;
 8000e2a:	69bb      	ldr	r3, [r7, #24]
 8000e2c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000e30:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	f04f 020f 	mov.w	r2, #15
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000e3e:	68bb      	ldr	r3, [r7, #8]
 8000e40:	ea6f 0303 	mvn.w	r3, r3
 8000e44:	697a      	ldr	r2, [r7, #20]
 8000e46:	4013      	ands	r3, r2
 8000e48:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	69fa      	ldr	r2, [r7, #28]
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	697a      	ldr	r2, [r7, #20]
 8000e54:	4313      	orrs	r3, r2
 8000e56:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	78db      	ldrb	r3, [r3, #3]
 8000e5c:	2b28      	cmp	r3, #40	; 0x28
 8000e5e:	d107      	bne.n	8000e70 <GPIO_Init+0xcc>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8000e60:	69bb      	ldr	r3, [r7, #24]
 8000e62:	f04f 0201 	mov.w	r2, #1
 8000e66:	fa02 f203 	lsl.w	r2, r2, r3
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	615a      	str	r2, [r3, #20]
 8000e6e:	e00a      	b.n	8000e86 <GPIO_Init+0xe2>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	78db      	ldrb	r3, [r3, #3]
 8000e74:	2b48      	cmp	r3, #72	; 0x48
 8000e76:	d106      	bne.n	8000e86 <GPIO_Init+0xe2>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000e78:	69bb      	ldr	r3, [r7, #24]
 8000e7a:	f04f 0201 	mov.w	r2, #1
 8000e7e:	fa02 f203 	lsl.w	r2, r2, r3
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000e86:	69bb      	ldr	r3, [r7, #24]
 8000e88:	f103 0301 	add.w	r3, r3, #1
 8000e8c:	61bb      	str	r3, [r7, #24]
 8000e8e:	69bb      	ldr	r3, [r7, #24]
 8000e90:	2b07      	cmp	r3, #7
 8000e92:	d9ba      	bls.n	8000e0a <GPIO_Init+0x66>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	697a      	ldr	r2, [r7, #20]
 8000e98:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	881b      	ldrh	r3, [r3, #0]
 8000e9e:	2bff      	cmp	r3, #255	; 0xff
 8000ea0:	d953      	bls.n	8000f4a <GPIO_Init+0x1a6>
  {
    tmpreg = GPIOx->CRH;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000ea8:	f04f 0300 	mov.w	r3, #0
 8000eac:	61bb      	str	r3, [r7, #24]
 8000eae:	e046      	b.n	8000f3e <GPIO_Init+0x19a>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8000eb0:	69bb      	ldr	r3, [r7, #24]
 8000eb2:	f103 0308 	add.w	r3, r3, #8
 8000eb6:	f04f 0201 	mov.w	r2, #1
 8000eba:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebe:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	881b      	ldrh	r3, [r3, #0]
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000ecc:	693a      	ldr	r2, [r7, #16]
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	d130      	bne.n	8000f36 <GPIO_Init+0x192>
      {
        pos = pinpos << 2;
 8000ed4:	69bb      	ldr	r3, [r7, #24]
 8000ed6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000eda:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	f04f 020f 	mov.w	r2, #15
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	ea6f 0303 	mvn.w	r3, r3
 8000eee:	697a      	ldr	r2, [r7, #20]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	69fa      	ldr	r2, [r7, #28]
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	697a      	ldr	r2, [r7, #20]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	78db      	ldrb	r3, [r3, #3]
 8000f06:	2b28      	cmp	r3, #40	; 0x28
 8000f08:	d108      	bne.n	8000f1c <GPIO_Init+0x178>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000f0a:	69bb      	ldr	r3, [r7, #24]
 8000f0c:	f103 0308 	add.w	r3, r3, #8
 8000f10:	f04f 0201 	mov.w	r2, #1
 8000f14:	fa02 f203 	lsl.w	r2, r2, r3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	78db      	ldrb	r3, [r3, #3]
 8000f20:	2b48      	cmp	r3, #72	; 0x48
 8000f22:	d108      	bne.n	8000f36 <GPIO_Init+0x192>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000f24:	69bb      	ldr	r3, [r7, #24]
 8000f26:	f103 0308 	add.w	r3, r3, #8
 8000f2a:	f04f 0201 	mov.w	r2, #1
 8000f2e:	fa02 f203 	lsl.w	r2, r2, r3
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000f36:	69bb      	ldr	r3, [r7, #24]
 8000f38:	f103 0301 	add.w	r3, r3, #1
 8000f3c:	61bb      	str	r3, [r7, #24]
 8000f3e:	69bb      	ldr	r3, [r7, #24]
 8000f40:	2b07      	cmp	r3, #7
 8000f42:	d9b5      	bls.n	8000eb0 <GPIO_Init+0x10c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	697a      	ldr	r2, [r7, #20]
 8000f48:	605a      	str	r2, [r3, #4]
  }
}
 8000f4a:	f107 0724 	add.w	r7, r7, #36	; 0x24
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bc80      	pop	{r7}
 8000f52:	4770      	bx	lr

08000f54 <GPIO_StructInit>:
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f62:	801a      	strh	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	f04f 0202 	mov.w	r2, #2
 8000f6a:	709a      	strb	r2, [r3, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	f04f 0204 	mov.w	r2, #4
 8000f72:	70da      	strb	r2, [r3, #3]
}
 8000f74:	f107 070c 	add.w	r7, r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bc80      	pop	{r7}
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop

08000f80 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	460b      	mov	r3, r1
 8000f8a:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8000f8c:	f04f 0300 	mov.w	r3, #0
 8000f90:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	689a      	ldr	r2, [r3, #8]
 8000f96:	887b      	ldrh	r3, [r7, #2]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d003      	beq.n	8000fa6 <GPIO_ReadInputDataBit+0x26>
  {
    bitstatus = (uint8_t)Bit_SET;
 8000f9e:	f04f 0301 	mov.w	r3, #1
 8000fa2:	73fb      	strb	r3, [r7, #15]
 8000fa4:	e002      	b.n	8000fac <GPIO_ReadInputDataBit+0x2c>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8000fa6:	f04f 0300 	mov.w	r3, #0
 8000faa:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f107 0714 	add.w	r7, r7, #20
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bc80      	pop	{r7}
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop

08000fbc <GPIO_ReadInputData>:
  * @brief  Reads the specified GPIO input data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  return ((uint16_t)GPIOx->IDR);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	689b      	ldr	r3, [r3, #8]
 8000fc8:	b29b      	uxth	r3, r3
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f107 070c 	add.w	r7, r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bc80      	pop	{r7}
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop

08000fd8 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8000fe4:	f04f 0300 	mov.w	r3, #0
 8000fe8:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	68da      	ldr	r2, [r3, #12]
 8000fee:	887b      	ldrh	r3, [r7, #2]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d003      	beq.n	8000ffe <GPIO_ReadOutputDataBit+0x26>
  {
    bitstatus = (uint8_t)Bit_SET;
 8000ff6:	f04f 0301 	mov.w	r3, #1
 8000ffa:	73fb      	strb	r3, [r7, #15]
 8000ffc:	e002      	b.n	8001004 <GPIO_ReadOutputDataBit+0x2c>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8000ffe:	f04f 0300 	mov.w	r3, #0
 8001002:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001004:	7bfb      	ldrb	r3, [r7, #15]
}
 8001006:	4618      	mov	r0, r3
 8001008:	f107 0714 	add.w	r7, r7, #20
 800100c:	46bd      	mov	sp, r7
 800100e:	bc80      	pop	{r7}
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop

08001014 <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    
  return ((uint16_t)GPIOx->ODR);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	b29b      	uxth	r3, r3
}
 8001022:	4618      	mov	r0, r3
 8001024:	f107 070c 	add.w	r7, r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	bc80      	pop	{r7}
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	460b      	mov	r3, r1
 800103a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 800103c:	887a      	ldrh	r2, [r7, #2]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	611a      	str	r2, [r3, #16]
}
 8001042:	f107 070c 	add.w	r7, r7, #12
 8001046:	46bd      	mov	sp, r7
 8001048:	bc80      	pop	{r7}
 800104a:	4770      	bx	lr

0800104c <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	460b      	mov	r3, r1
 8001056:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 8001058:	887a      	ldrh	r2, [r7, #2]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	615a      	str	r2, [r3, #20]
}
 800105e:	f107 070c 	add.w	r7, r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	bc80      	pop	{r7}
 8001066:	4770      	bx	lr

08001068 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	4613      	mov	r3, r2
 8001072:	460a      	mov	r2, r1
 8001074:	807a      	strh	r2, [r7, #2]
 8001076:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
 8001078:	787b      	ldrb	r3, [r7, #1]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d003      	beq.n	8001086 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800107e:	887a      	ldrh	r2, [r7, #2]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	611a      	str	r2, [r3, #16]
 8001084:	e002      	b.n	800108c <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
 8001086:	887a      	ldrh	r2, [r7, #2]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	615a      	str	r2, [r3, #20]
  }
}
 800108c:	f107 070c 	add.w	r7, r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	bc80      	pop	{r7}
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop

08001098 <GPIO_Write>:
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	460b      	mov	r3, r1
 80010a2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  GPIOx->ODR = PortVal;
 80010a4:	887a      	ldrh	r2, [r7, #2]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	60da      	str	r2, [r3, #12]
}
 80010aa:	f107 070c 	add.w	r7, r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bc80      	pop	{r7}
 80010b2:	4770      	bx	lr

080010b4 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b085      	sub	sp, #20
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	460b      	mov	r3, r1
 80010be:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0x00010000;
 80010c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010c4:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  tmp |= GPIO_Pin;
 80010c6:	887b      	ldrh	r3, [r7, #2]
 80010c8:	68fa      	ldr	r2, [r7, #12]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	68fa      	ldr	r2, [r7, #12]
 80010d2:	619a      	str	r2, [r3, #24]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 80010d4:	887a      	ldrh	r2, [r7, #2]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	619a      	str	r2, [r3, #24]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	68fa      	ldr	r2, [r7, #12]
 80010de:	619a      	str	r2, [r3, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	699b      	ldr	r3, [r3, #24]
 80010e4:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	699b      	ldr	r3, [r3, #24]
 80010ea:	60fb      	str	r3, [r7, #12]
}
 80010ec:	f107 0714 	add.w	r7, r7, #20
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bc80      	pop	{r7}
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop

080010f8 <GPIO_EventOutputConfig>:
  * @param  GPIO_PinSource: specifies the pin for the Event output.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EventOutputConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b085      	sub	sp, #20
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4602      	mov	r2, r0
 8001100:	460b      	mov	r3, r1
 8001102:	71fa      	strb	r2, [r7, #7]
 8001104:	71bb      	strb	r3, [r7, #6]
  uint32_t tmpreg = 0x00;
 8001106:	f04f 0300 	mov.w	r3, #0
 800110a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
    
  tmpreg = AFIO->EVCR;
 800110c:	f04f 0300 	mov.w	r3, #0
 8001110:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	60fb      	str	r3, [r7, #12]
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
 8001118:	68fa      	ldr	r2, [r7, #12]
 800111a:	f64f 7380 	movw	r3, #65408	; 0xff80
 800111e:	4013      	ands	r3, r2
 8001120:	60fb      	str	r3, [r7, #12]
  tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
 8001122:	79fb      	ldrb	r3, [r7, #7]
 8001124:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001128:	68fa      	ldr	r2, [r7, #12]
 800112a:	4313      	orrs	r3, r2
 800112c:	60fb      	str	r3, [r7, #12]
  tmpreg |= GPIO_PinSource;
 800112e:	79bb      	ldrb	r3, [r7, #6]
 8001130:	68fa      	ldr	r2, [r7, #12]
 8001132:	4313      	orrs	r3, r2
 8001134:	60fb      	str	r3, [r7, #12]
  AFIO->EVCR = tmpreg;
 8001136:	f04f 0300 	mov.w	r3, #0
 800113a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800113e:	68fa      	ldr	r2, [r7, #12]
 8001140:	601a      	str	r2, [r3, #0]
}
 8001142:	f107 0714 	add.w	r7, r7, #20
 8001146:	46bd      	mov	sp, r7
 8001148:	bc80      	pop	{r7}
 800114a:	4770      	bx	lr

0800114c <GPIO_EventOutputCmd>:
  * @param  NewState: new state of the Event output.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_EventOutputCmd(FunctionalState NewState)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
 8001156:	f04f 031c 	mov.w	r3, #28
 800115a:	f2c4 2320 	movt	r3, #16928	; 0x4220
 800115e:	79fa      	ldrb	r2, [r7, #7]
 8001160:	601a      	str	r2, [r3, #0]
}
 8001162:	f107 070c 	add.w	r7, r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	bc80      	pop	{r7}
 800116a:	4770      	bx	lr

0800116c <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
 800116c:	b480      	push	{r7}
 800116e:	b087      	sub	sp, #28
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	460b      	mov	r3, r1
 8001176:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
 8001178:	f04f 0300 	mov.w	r3, #0
 800117c:	613b      	str	r3, [r7, #16]
 800117e:	f04f 0300 	mov.w	r3, #0
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	f04f 0300 	mov.w	r3, #0
 8001188:	617b      	str	r3, [r7, #20]
 800118a:	f04f 0300 	mov.w	r3, #0
 800118e:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if((GPIO_Remap & 0x80000000) == 0x80000000)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2b00      	cmp	r3, #0
 8001194:	da06      	bge.n	80011a4 <GPIO_PinRemapConfig+0x38>
  {
    tmpreg = AFIO->MAPR2;
 8001196:	f04f 0300 	mov.w	r3, #0
 800119a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800119e:	69db      	ldr	r3, [r3, #28]
 80011a0:	617b      	str	r3, [r7, #20]
 80011a2:	e005      	b.n	80011b0 <GPIO_PinRemapConfig+0x44>
  }
  else
  {
    tmpreg = AFIO->MAPR;
 80011a4:	f04f 0300 	mov.w	r3, #0
 80011a8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	617b      	str	r3, [r7, #20]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80011b6:	ea4f 4313 	mov.w	r3, r3, lsr #16
 80011ba:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	ea4f 4303 	mov.w	r3, r3, lsl #16
 80011c2:	ea4f 4313 	mov.w	r3, r3, lsr #16
 80011c6:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80011ce:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80011d2:	d110      	bne.n	80011f6 <GPIO_PinRemapConfig+0x8a>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80011da:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 80011dc:	f04f 0300 	mov.w	r3, #0
 80011e0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80011e4:	f04f 0200 	mov.w	r2, #0
 80011e8:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80011ec:	6852      	ldr	r2, [r2, #4]
 80011ee:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80011f2:	605a      	str	r2, [r3, #4]
 80011f4:	e026      	b.n	8001244 <GPIO_PinRemapConfig+0xd8>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d010      	beq.n	8001222 <GPIO_PinRemapConfig+0xb6>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	f04f 0203 	mov.w	r2, #3
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	ea6f 0303 	mvn.w	r3, r3
 8001212:	697a      	ldr	r2, [r7, #20]
 8001214:	4013      	ands	r3, r2
 8001216:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 800121e:	617b      	str	r3, [r7, #20]
 8001220:	e010      	b.n	8001244 <GPIO_PinRemapConfig+0xd8>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	ea4f 5353 	mov.w	r3, r3, lsr #21
 8001228:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800122c:	693a      	ldr	r2, [r7, #16]
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	ea6f 0303 	mvn.w	r3, r3
 8001236:	697a      	ldr	r2, [r7, #20]
 8001238:	4013      	ands	r3, r2
 800123a:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8001242:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
 8001244:	78fb      	ldrb	r3, [r7, #3]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d00a      	beq.n	8001260 <GPIO_PinRemapConfig+0xf4>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	ea4f 5353 	mov.w	r3, r3, lsr #21
 8001250:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001254:	693a      	ldr	r2, [r7, #16]
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	697a      	ldr	r2, [r7, #20]
 800125c:	4313      	orrs	r3, r2
 800125e:	617b      	str	r3, [r7, #20]
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2b00      	cmp	r3, #0
 8001264:	da06      	bge.n	8001274 <GPIO_PinRemapConfig+0x108>
  {
    AFIO->MAPR2 = tmpreg;
 8001266:	f04f 0300 	mov.w	r3, #0
 800126a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800126e:	697a      	ldr	r2, [r7, #20]
 8001270:	61da      	str	r2, [r3, #28]
 8001272:	e005      	b.n	8001280 <GPIO_PinRemapConfig+0x114>
  }
  else
  {
    AFIO->MAPR = tmpreg;
 8001274:	f04f 0300 	mov.w	r3, #0
 8001278:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800127c:	697a      	ldr	r2, [r7, #20]
 800127e:	605a      	str	r2, [r3, #4]
  }  
}
 8001280:	f107 071c 	add.w	r7, r7, #28
 8001284:	46bd      	mov	sp, r7
 8001286:	bc80      	pop	{r7}
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop

0800128c <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
 800128c:	b490      	push	{r4, r7}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	4602      	mov	r2, r0
 8001294:	460b      	mov	r3, r1
 8001296:	71fa      	strb	r2, [r7, #7]
 8001298:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 800129a:	f04f 0300 	mov.w	r3, #0
 800129e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
 80012a0:	79bb      	ldrb	r3, [r7, #6]
 80012a2:	f003 0303 	and.w	r3, r3, #3
 80012a6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80012aa:	f04f 020f 	mov.w	r2, #15
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	60fb      	str	r3, [r7, #12]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 80012b4:	f04f 0300 	mov.w	r3, #0
 80012b8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80012bc:	79ba      	ldrb	r2, [r7, #6]
 80012be:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80012c2:	b2d2      	uxtb	r2, r2
 80012c4:	4610      	mov	r0, r2
 80012c6:	f04f 0200 	mov.w	r2, #0
 80012ca:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80012ce:	79b9      	ldrb	r1, [r7, #6]
 80012d0:	ea4f 0191 	mov.w	r1, r1, lsr #2
 80012d4:	b2c9      	uxtb	r1, r1
 80012d6:	f101 0102 	add.w	r1, r1, #2
 80012da:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 80012de:	68fa      	ldr	r2, [r7, #12]
 80012e0:	ea6f 0202 	mvn.w	r2, r2
 80012e4:	4011      	ands	r1, r2
 80012e6:	f100 0202 	add.w	r2, r0, #2
 80012ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
 80012ee:	f04f 0300 	mov.w	r3, #0
 80012f2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80012f6:	79ba      	ldrb	r2, [r7, #6]
 80012f8:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80012fc:	b2d2      	uxtb	r2, r2
 80012fe:	4610      	mov	r0, r2
 8001300:	f04f 0200 	mov.w	r2, #0
 8001304:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8001308:	79b9      	ldrb	r1, [r7, #6]
 800130a:	ea4f 0191 	mov.w	r1, r1, lsr #2
 800130e:	b2c9      	uxtb	r1, r1
 8001310:	f101 0102 	add.w	r1, r1, #2
 8001314:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8001318:	79fc      	ldrb	r4, [r7, #7]
 800131a:	79ba      	ldrb	r2, [r7, #6]
 800131c:	f002 0203 	and.w	r2, r2, #3
 8001320:	ea4f 0282 	mov.w	r2, r2, lsl #2
 8001324:	fa04 f202 	lsl.w	r2, r4, r2
 8001328:	4311      	orrs	r1, r2
 800132a:	f100 0202 	add.w	r2, r0, #2
 800132e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001332:	f107 0710 	add.w	r7, r7, #16
 8001336:	46bd      	mov	sp, r7
 8001338:	bc90      	pop	{r4, r7}
 800133a:	4770      	bx	lr

0800133c <GPIO_ETH_MediaInterfaceConfig>:
  *     @arg GPIO_ETH_MediaInterface_MII: MII mode
  *     @arg GPIO_ETH_MediaInterface_RMII: RMII mode    
  * @retval None
  */
void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface) 
{ 
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  assert_param(IS_GPIO_ETH_MEDIA_INTERFACE(GPIO_ETH_MediaInterface)); 

  /* Configure MII_RMII selection bit */ 
  *(__IO uint32_t *) MAPR_MII_RMII_SEL_BB = GPIO_ETH_MediaInterface; 
 8001344:	f04f 03dc 	mov.w	r3, #220	; 0xdc
 8001348:	f2c4 2320 	movt	r3, #16928	; 0x4220
 800134c:	687a      	ldr	r2, [r7, #4]
 800134e:	601a      	str	r2, [r3, #0]
}
 8001350:	f107 070c 	add.w	r7, r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	bc80      	pop	{r7}
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop

0800135c <RCC_DeInit>:
  * @brief  Resets the RCC clock configuration to the default reset state.
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001360:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001364:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001368:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800136c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001370:	6812      	ldr	r2, [r2, #0]
 8001372:	f042 0201 	orr.w	r2, r2, #1
 8001376:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8001378:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800137c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001380:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001384:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001388:	6859      	ldr	r1, [r3, #4]
 800138a:	f04f 0300 	mov.w	r3, #0
 800138e:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
 8001392:	400b      	ands	r3, r1
 8001394:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001396:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800139a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800139e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013a2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80013a6:	6812      	ldr	r2, [r2, #0]
 80013a8:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80013ac:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80013b0:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80013b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013b6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80013ba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013be:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80013c2:	6812      	ldr	r2, [r2, #0]
 80013c4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80013c8:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80013ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013ce:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80013d2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013d6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80013da:	6852      	ldr	r2, [r2, #4]
 80013dc:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80013e0:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 80013e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013e6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80013ea:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80013ee:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
 80013f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013f4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80013f8:	f04f 0200 	mov.w	r2, #0
 80013fc:	62da      	str	r2, [r3, #44]	; 0x2c
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
#endif /* STM32F10X_CL */

}
 80013fe:	46bd      	mov	sp, r7
 8001400:	bc80      	pop	{r7}
 8001402:	4770      	bx	lr

08001404 <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: HSE oscillator ON
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint32_t RCC_HSE)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
 800140c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001410:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001414:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001418:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800141c:	6812      	ldr	r2, [r2, #0]
 800141e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001422:	601a      	str	r2, [r3, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
 8001424:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001428:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800142c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001430:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001434:	6812      	ldr	r2, [r2, #0]
 8001436:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800143a:	601a      	str	r2, [r3, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001442:	d003      	beq.n	800144c <RCC_HSEConfig+0x48>
 8001444:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001448:	d00d      	beq.n	8001466 <RCC_HSEConfig+0x62>
 800144a:	e019      	b.n	8001480 <RCC_HSEConfig+0x7c>
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
 800144c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001450:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001454:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001458:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800145c:	6812      	ldr	r2, [r2, #0]
 800145e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001462:	601a      	str	r2, [r3, #0]
      break;
 8001464:	e00d      	b.n	8001482 <RCC_HSEConfig+0x7e>
      
    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
 8001466:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800146a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800146e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001472:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001476:	6812      	ldr	r2, [r2, #0]
 8001478:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
 800147c:	601a      	str	r2, [r3, #0]
      break;
 800147e:	e000      	b.n	8001482 <RCC_HSEConfig+0x7e>
      
    default:
      break;
 8001480:	bf00      	nop
  }
}
 8001482:	f107 070c 	add.w	r7, r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	bc80      	pop	{r7}
 800148a:	4770      	bx	lr

0800148c <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumuration value:
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0;
 8001492:	f04f 0300 	mov.w	r3, #0
 8001496:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
 8001498:	f04f 0300 	mov.w	r3, #0
 800149c:	71fb      	strb	r3, [r7, #7]
  FlagStatus HSEStatus = RESET;
 800149e:	f04f 0300 	mov.w	r3, #0
 80014a2:	71bb      	strb	r3, [r7, #6]
  
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 80014a4:	f04f 0031 	mov.w	r0, #49	; 0x31
 80014a8:	f000 fbf0 	bl	8001c8c <RCC_GetFlagStatus>
 80014ac:	4603      	mov	r3, r0
 80014ae:	71bb      	strb	r3, [r7, #6]
    StartUpCounter++;  
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	f103 0301 	add.w	r3, r3, #1
 80014b6:	603b      	str	r3, [r7, #0]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80014be:	d002      	beq.n	80014c6 <RCC_WaitForHSEStartUp+0x3a>
 80014c0:	79bb      	ldrb	r3, [r7, #6]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d0ee      	beq.n	80014a4 <RCC_WaitForHSEStartUp+0x18>
  
  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 80014c6:	f04f 0031 	mov.w	r0, #49	; 0x31
 80014ca:	f000 fbdf 	bl	8001c8c <RCC_GetFlagStatus>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d003      	beq.n	80014dc <RCC_WaitForHSEStartUp+0x50>
  {
    status = SUCCESS;
 80014d4:	f04f 0301 	mov.w	r3, #1
 80014d8:	71fb      	strb	r3, [r7, #7]
 80014da:	e002      	b.n	80014e2 <RCC_WaitForHSEStartUp+0x56>
  }
  else
  {
    status = ERROR;
 80014dc:	f04f 0300 	mov.w	r3, #0
 80014e0:	71fb      	strb	r3, [r7, #7]
  }  
  return (status);
 80014e2:	79fb      	ldrb	r3, [r7, #7]
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	f107 0708 	add.w	r7, r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop

080014f0 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *   This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b085      	sub	sp, #20
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4603      	mov	r3, r0
 80014f8:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
 80014fa:	f04f 0300 	mov.w	r3, #0
 80014fe:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
  tmpreg = RCC->CR;
 8001500:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001504:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	60fb      	str	r3, [r7, #12]
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= CR_HSITRIM_Mask;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001512:	60fb      	str	r3, [r7, #12]
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 8001514:	79fb      	ldrb	r3, [r7, #7]
 8001516:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800151a:	68fa      	ldr	r2, [r7, #12]
 800151c:	4313      	orrs	r3, r2
 800151e:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CR = tmpreg;
 8001520:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001524:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001528:	68fa      	ldr	r2, [r7, #12]
 800152a:	601a      	str	r2, [r3, #0]
}
 800152c:	f107 0714 	add.w	r7, r7, #20
 8001530:	46bd      	mov	sp, r7
 8001532:	bc80      	pop	{r7}
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop

08001538 <RCC_HSICmd>:
  * @note   HSI can not be stopped if it is used directly or through the PLL as system clock.
  * @param  NewState: new state of the HSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 8001542:	f04f 0300 	mov.w	r3, #0
 8001546:	f2c4 2342 	movt	r3, #16962	; 0x4242
 800154a:	79fa      	ldrb	r2, [r7, #7]
 800154c:	601a      	str	r2, [r3, #0]
}
 800154e:	f107 070c 	add.w	r7, r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	bc80      	pop	{r7}
 8001556:	4770      	bx	lr

08001558 <RCC_PLLConfig>:
  *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_5}
  *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]  
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
 8001558:	b480      	push	{r7}
 800155a:	b085      	sub	sp, #20
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8001562:	f04f 0300 	mov.w	r3, #0
 8001566:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
 8001568:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800156c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	60fb      	str	r3, [r7, #12]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 800157a:	60fb      	str	r3, [r7, #12]
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
 800157c:	687a      	ldr	r2, [r7, #4]
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	4313      	orrs	r3, r2
 8001582:	68fa      	ldr	r2, [r7, #12]
 8001584:	4313      	orrs	r3, r2
 8001586:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001588:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800158c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001590:	68fa      	ldr	r2, [r7, #12]
 8001592:	605a      	str	r2, [r3, #4]
}
 8001594:	f107 0714 	add.w	r7, r7, #20
 8001598:	46bd      	mov	sp, r7
 800159a:	bc80      	pop	{r7}
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop

080015a0 <RCC_PLLCmd>:
  * @note   The PLL can not be disabled if it is used as system clock.
  * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 80015aa:	f04f 0360 	mov.w	r3, #96	; 0x60
 80015ae:	f2c4 2342 	movt	r3, #16962	; 0x4242
 80015b2:	79fa      	ldrb	r2, [r7, #7]
 80015b4:	601a      	str	r2, [r3, #0]
}
 80015b6:	f107 070c 	add.w	r7, r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bc80      	pop	{r7}
 80015be:	4770      	bx	lr

080015c0 <RCC_PREDIV1Config>:
  * @param  RCC_PREDIV1_Div: specifies the PREDIV1 clock division factor.
  *   This parameter can be RCC_PREDIV1_Divx where x:[1,16]
  * @retval None
  */
void RCC_PREDIV1Config(uint32_t RCC_PREDIV1_Source, uint32_t RCC_PREDIV1_Div)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80015ca:	f04f 0300 	mov.w	r3, #0
 80015ce:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PREDIV1_SOURCE(RCC_PREDIV1_Source));
  assert_param(IS_RCC_PREDIV1(RCC_PREDIV1_Div));

  tmpreg = RCC->CFGR2;
 80015d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015d4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80015d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015da:	60fb      	str	r3, [r7, #12]
  /* Clear PREDIV1[3:0] and PREDIV1SRC bits */
  tmpreg &= ~(CFGR2_PREDIV1 | CFGR2_PREDIV1SRC);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015e2:	f023 030f 	bic.w	r3, r3, #15
 80015e6:	60fb      	str	r3, [r7, #12]
  /* Set the PREDIV1 clock source and division factor */
  tmpreg |= RCC_PREDIV1_Source | RCC_PREDIV1_Div ;
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	68fa      	ldr	r2, [r7, #12]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR2 = tmpreg;
 80015f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015f8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80015fc:	68fa      	ldr	r2, [r7, #12]
 80015fe:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001600:	f107 0714 	add.w	r7, r7, #20
 8001604:	46bd      	mov	sp, r7
 8001606:	bc80      	pop	{r7}
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop

0800160c <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 800160c:	b480      	push	{r7}
 800160e:	b085      	sub	sp, #20
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8001614:	f04f 0300 	mov.w	r3, #0
 8001618:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
 800161a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800161e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	60fb      	str	r3, [r7, #12]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	f023 0303 	bic.w	r3, r3, #3
 800162c:	60fb      	str	r3, [r7, #12]
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 800162e:	68fa      	ldr	r2, [r7, #12]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	4313      	orrs	r3, r2
 8001634:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001636:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800163a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800163e:	68fa      	ldr	r2, [r7, #12]
 8001640:	605a      	str	r2, [r3, #4]
}
 8001642:	f107 0714 	add.w	r7, r7, #20
 8001646:	46bd      	mov	sp, r7
 8001648:	bc80      	pop	{r7}
 800164a:	4770      	bx	lr

0800164c <RCC_GetSYSCLKSource>:
  *     - 0x00: HSI used as system clock
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
 8001650:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001654:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	b2db      	uxtb	r3, r3
 800165c:	f003 030c 	and.w	r3, r3, #12
 8001660:	b2db      	uxtb	r3, r3
}
 8001662:	4618      	mov	r0, r3
 8001664:	46bd      	mov	sp, r7
 8001666:	bc80      	pop	{r7}
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop

0800166c <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
 800166c:	b480      	push	{r7}
 800166e:	b085      	sub	sp, #20
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8001674:	f04f 0300 	mov.w	r3, #0
 8001678:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
 800167a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800167e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	60fb      	str	r3, [r7, #12]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800168c:	60fb      	str	r3, [r7, #12]
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 800168e:	68fa      	ldr	r2, [r7, #12]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	4313      	orrs	r3, r2
 8001694:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800169a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800169e:	68fa      	ldr	r2, [r7, #12]
 80016a0:	605a      	str	r2, [r3, #4]
}
 80016a2:	f107 0714 	add.w	r7, r7, #20
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bc80      	pop	{r7}
 80016aa:	4770      	bx	lr

080016ac <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80016b4:	f04f 0300 	mov.w	r3, #0
 80016b8:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
 80016ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016be:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80016cc:	60fb      	str	r3, [r7, #12]
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 80016ce:	68fa      	ldr	r2, [r7, #12]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80016d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016da:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80016de:	68fa      	ldr	r2, [r7, #12]
 80016e0:	605a      	str	r2, [r3, #4]
}
 80016e2:	f107 0714 	add.w	r7, r7, #20
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bc80      	pop	{r7}
 80016ea:	4770      	bx	lr

080016ec <RCC_PCLK2Config>:
  *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80016f4:	f04f 0300 	mov.w	r3, #0
 80016f8:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
 80016fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016fe:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800170c:	60fb      	str	r3, [r7, #12]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8001714:	68fa      	ldr	r2, [r7, #12]
 8001716:	4313      	orrs	r3, r2
 8001718:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 800171a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800171e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001722:	68fa      	ldr	r2, [r7, #12]
 8001724:	605a      	str	r2, [r3, #4]
}
 8001726:	f107 0714 	add.w	r7, r7, #20
 800172a:	46bd      	mov	sp, r7
 800172c:	bc80      	pop	{r7}
 800172e:	4770      	bx	lr

08001730 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	4602      	mov	r2, r0
 8001738:	460b      	mov	r3, r1
 800173a:	71fa      	strb	r2, [r7, #7]
 800173c:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800173e:	79bb      	ldrb	r3, [r7, #6]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d00e      	beq.n	8001762 <RCC_ITConfig+0x32>
  {
    /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8001744:	f241 0309 	movw	r3, #4105	; 0x1009
 8001748:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800174c:	f241 0209 	movw	r2, #4105	; 0x1009
 8001750:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001754:	7812      	ldrb	r2, [r2, #0]
 8001756:	b2d1      	uxtb	r1, r2
 8001758:	79fa      	ldrb	r2, [r7, #7]
 800175a:	430a      	orrs	r2, r1
 800175c:	b2d2      	uxtb	r2, r2
 800175e:	701a      	strb	r2, [r3, #0]
 8001760:	e010      	b.n	8001784 <RCC_ITConfig+0x54>
  }
  else
  {
    /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 8001762:	f241 0309 	movw	r3, #4105	; 0x1009
 8001766:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800176a:	f241 0209 	movw	r2, #4105	; 0x1009
 800176e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001772:	7812      	ldrb	r2, [r2, #0]
 8001774:	b2d1      	uxtb	r1, r2
 8001776:	79fa      	ldrb	r2, [r7, #7]
 8001778:	ea6f 0202 	mvn.w	r2, r2
 800177c:	b2d2      	uxtb	r2, r2
 800177e:	400a      	ands	r2, r1
 8001780:	b2d2      	uxtb	r2, r2
 8001782:	701a      	strb	r2, [r3, #0]
  }
}
 8001784:	f107 070c 	add.w	r7, r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	bc80      	pop	{r7}
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop

08001790 <RCC_USBCLKConfig>:
  *                                     clock source
  *     @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
  * @retval None
  */
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
 8001798:	f04f 03d8 	mov.w	r3, #216	; 0xd8
 800179c:	f2c4 2342 	movt	r3, #16962	; 0x4242
 80017a0:	687a      	ldr	r2, [r7, #4]
 80017a2:	601a      	str	r2, [r3, #0]
}
 80017a4:	f107 070c 	add.w	r7, r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bc80      	pop	{r7}
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop

080017b0 <RCC_ADCCLKConfig>:
  *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
  *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b085      	sub	sp, #20
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80017b8:	f04f 0300 	mov.w	r3, #0
 80017bc:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
 80017be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017c2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	60fb      	str	r3, [r7, #12]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80017d0:	60fb      	str	r3, [r7, #12]
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
 80017d2:	68fa      	ldr	r2, [r7, #12]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	4313      	orrs	r3, r2
 80017d8:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80017da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017de:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80017e2:	68fa      	ldr	r2, [r7, #12]
 80017e4:	605a      	str	r2, [r3, #4]
}
 80017e6:	f107 0714 	add.w	r7, r7, #20
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bc80      	pop	{r7}
 80017ee:	4770      	bx	lr

080017f0 <RCC_LSEConfig>:
  *     @arg RCC_LSE_ON: LSE oscillator ON
  *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 80017fa:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 80017fe:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001802:	f04f 0200 	mov.w	r2, #0
 8001806:	701a      	strb	r2, [r3, #0]
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8001808:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 800180c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001810:	f04f 0200 	mov.w	r2, #0
 8001814:	701a      	strb	r2, [r3, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
 8001816:	79fb      	ldrb	r3, [r7, #7]
 8001818:	2b01      	cmp	r3, #1
 800181a:	d002      	beq.n	8001822 <RCC_LSEConfig+0x32>
 800181c:	2b04      	cmp	r3, #4
 800181e:	d008      	beq.n	8001832 <RCC_LSEConfig+0x42>
 8001820:	e00f      	b.n	8001842 <RCC_LSEConfig+0x52>
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 8001822:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8001826:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800182a:	f04f 0201 	mov.w	r2, #1
 800182e:	701a      	strb	r2, [r3, #0]
      break;
 8001830:	e008      	b.n	8001844 <RCC_LSEConfig+0x54>
      
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 8001832:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8001836:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800183a:	f04f 0205 	mov.w	r2, #5
 800183e:	701a      	strb	r2, [r3, #0]
      break;            
 8001840:	e000      	b.n	8001844 <RCC_LSEConfig+0x54>
      
    default:
      break;      
 8001842:	bf00      	nop
  }
}
 8001844:	f107 070c 	add.w	r7, r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	bc80      	pop	{r7}
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop

08001850 <RCC_LSICmd>:
  * @note   LSI can not be disabled if the IWDG is running.
  * @param  NewState: new state of the LSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	4603      	mov	r3, r0
 8001858:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 800185a:	f44f 6390 	mov.w	r3, #1152	; 0x480
 800185e:	f2c4 2342 	movt	r3, #16962	; 0x4242
 8001862:	79fa      	ldrb	r2, [r7, #7]
 8001864:	601a      	str	r2, [r3, #0]
}
 8001866:	f107 070c 	add.w	r7, r7, #12
 800186a:	46bd      	mov	sp, r7
 800186c:	bc80      	pop	{r7}
 800186e:	4770      	bx	lr

08001870 <RCC_RTCCLKConfig>:
  *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
  *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
 8001878:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800187c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001880:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001884:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001888:	6a11      	ldr	r1, [r2, #32]
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	430a      	orrs	r2, r1
 800188e:	621a      	str	r2, [r3, #32]
}
 8001890:	f107 070c 	add.w	r7, r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	bc80      	pop	{r7}
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop

0800189c <RCC_RTCCLKCmd>:
  * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	4603      	mov	r3, r0
 80018a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 80018a6:	f240 433c 	movw	r3, #1084	; 0x43c
 80018aa:	f2c4 2342 	movt	r3, #16962	; 0x4242
 80018ae:	79fa      	ldrb	r2, [r7, #7]
 80018b0:	601a      	str	r2, [r3, #0]
}
 80018b2:	f107 070c 	add.w	r7, r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bc80      	pop	{r7}
 80018ba:	4770      	bx	lr

080018bc <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80018bc:	b480      	push	{r7}
 80018be:	b089      	sub	sp, #36	; 0x24
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 80018c4:	f04f 0300 	mov.w	r3, #0
 80018c8:	61fb      	str	r3, [r7, #28]
 80018ca:	f04f 0300 	mov.w	r3, #0
 80018ce:	61bb      	str	r3, [r7, #24]
 80018d0:	f04f 0300 	mov.w	r3, #0
 80018d4:	617b      	str	r3, [r7, #20]
 80018d6:	f04f 0300 	mov.w	r3, #0
 80018da:	613b      	str	r3, [r7, #16]
#ifdef  STM32F10X_CL
  uint32_t prediv1source = 0, prediv1factor = 0, prediv2factor = 0, pll2mull = 0;
#endif /* STM32F10X_CL */

#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
 80018dc:	f04f 0300 	mov.w	r3, #0
 80018e0:	60fb      	str	r3, [r7, #12]
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 80018e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018e6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f003 030c 	and.w	r3, r3, #12
 80018f0:	61fb      	str	r3, [r7, #28]
  
  switch (tmp)
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	2b04      	cmp	r3, #4
 80018f6:	d00a      	beq.n	800190e <RCC_GetClocksFreq+0x52>
 80018f8:	2b08      	cmp	r3, #8
 80018fa:	d00f      	beq.n	800191c <RCC_GetClocksFreq+0x60>
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d147      	bne.n	8001990 <RCC_GetClocksFreq+0xd4>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8001906:	f2c0 037a 	movt	r3, #122	; 0x7a
 800190a:	6013      	str	r3, [r2, #0]
      break;
 800190c:	e047      	b.n	800199e <RCC_GetClocksFreq+0xe2>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8001914:	f2c0 037a 	movt	r3, #122	; 0x7a
 8001918:	6013      	str	r3, [r2, #0]
      break;
 800191a:	e040      	b.n	800199e <RCC_GetClocksFreq+0xe2>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 800191c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001920:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800192a:	61bb      	str	r3, [r7, #24]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 800192c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001930:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800193a:	617b      	str	r3, [r7, #20]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	ea4f 4393 	mov.w	r3, r3, lsr #18
 8001942:	f103 0302 	add.w	r3, r3, #2
 8001946:	61bb      	str	r3, [r7, #24]
      
      if (pllsource == 0x00)
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d109      	bne.n	8001962 <RCC_GetClocksFreq+0xa6>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 800194e:	69ba      	ldr	r2, [r7, #24]
 8001950:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8001954:	f2c0 033d 	movt	r3, #61	; 0x3d
 8001958:	fb03 f202 	mul.w	r2, r3, r2
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8001960:	e01d      	b.n	800199e <RCC_GetClocksFreq+0xe2>
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
      }
      else
      {
 #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
       prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
 8001962:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001966:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800196a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800196c:	f003 030f 	and.w	r3, r3, #15
 8001970:	f103 0301 	add.w	r3, r3, #1
 8001974:	60fb      	str	r3, [r7, #12]
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull; 
 8001976:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 800197a:	f2c0 037a 	movt	r3, #122	; 0x7a
 800197e:	68fa      	ldr	r2, [r7, #12]
 8001980:	fbb3 f3f2 	udiv	r3, r3, r2
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	fb02 f203 	mul.w	r2, r2, r3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 800198e:	e006      	b.n	800199e <RCC_GetClocksFreq+0xe2>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8001996:	f2c0 037a 	movt	r3, #122	; 0x7a
 800199a:	6013      	str	r3, [r2, #0]
      break;
 800199c:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 800199e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019a2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019ac:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 4;
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	ea4f 1313 	mov.w	r3, r3, lsr #4
 80019b4:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 80019b6:	f240 5318 	movw	r3, #1304	; 0x518
 80019ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80019be:	69fa      	ldr	r2, [r7, #28]
 80019c0:	189b      	adds	r3, r3, r2
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	613b      	str	r3, [r7, #16]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	fa22 f203 	lsr.w	r2, r2, r3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 80019d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019da:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80019e4:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 8;
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	ea4f 2313 	mov.w	r3, r3, lsr #8
 80019ec:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 80019ee:	f240 5318 	movw	r3, #1304	; 0x518
 80019f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80019f6:	69fa      	ldr	r2, [r7, #28]
 80019f8:	189b      	adds	r3, r3, r2
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	613b      	str	r3, [r7, #16]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	685a      	ldr	r2, [r3, #4]
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	fa22 f203 	lsr.w	r2, r2, r3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8001a0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a12:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001a1c:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 11;
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8001a24:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 8001a26:	f240 5318 	movw	r3, #1304	; 0x518
 8001a2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001a2e:	69fa      	ldr	r2, [r7, #28]
 8001a30:	189b      	adds	r3, r3, r2
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	613b      	str	r3, [r7, #16]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	685a      	ldr	r2, [r3, #4]
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	fa22 f203 	lsr.w	r2, r2, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8001a46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a4a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a54:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 14;
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	ea4f 3393 	mov.w	r3, r3, lsr #14
 8001a5c:	61fb      	str	r3, [r7, #28]
  presc = ADCPrescTable[tmp];
 8001a5e:	f240 5328 	movw	r3, #1320	; 0x528
 8001a62:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001a66:	69fa      	ldr	r2, [r7, #28]
 8001a68:	189b      	adds	r3, r3, r2
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	613b      	str	r3, [r7, #16]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	68da      	ldr	r2, [r3, #12]
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	611a      	str	r2, [r3, #16]
}
 8001a7e:	f107 0724 	add.w	r7, r7, #36	; 0x24
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bc80      	pop	{r7}
 8001a86:	4770      	bx	lr

08001a88 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	460b      	mov	r3, r1
 8001a92:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001a94:	78fb      	ldrb	r3, [r7, #3]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d00c      	beq.n	8001ab4 <RCC_AHBPeriphClockCmd+0x2c>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8001a9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a9e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001aa2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001aa6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001aaa:	6951      	ldr	r1, [r2, #20]
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	430a      	orrs	r2, r1
 8001ab0:	615a      	str	r2, [r3, #20]
 8001ab2:	e00d      	b.n	8001ad0 <RCC_AHBPeriphClockCmd+0x48>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8001ab4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ab8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001abc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ac0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001ac4:	6951      	ldr	r1, [r2, #20]
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	ea6f 0202 	mvn.w	r2, r2
 8001acc:	400a      	ands	r2, r1
 8001ace:	615a      	str	r2, [r3, #20]
  }
}
 8001ad0:	f107 070c 	add.w	r7, r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bc80      	pop	{r7}
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop

08001adc <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001ae8:	78fb      	ldrb	r3, [r7, #3]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d00c      	beq.n	8001b08 <RCC_APB2PeriphClockCmd+0x2c>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001aee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001af2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001af6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001afa:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001afe:	6991      	ldr	r1, [r2, #24]
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	430a      	orrs	r2, r1
 8001b04:	619a      	str	r2, [r3, #24]
 8001b06:	e00d      	b.n	8001b24 <RCC_APB2PeriphClockCmd+0x48>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001b08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b0c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001b10:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b14:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001b18:	6991      	ldr	r1, [r2, #24]
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	ea6f 0202 	mvn.w	r2, r2
 8001b20:	400a      	ands	r2, r1
 8001b22:	619a      	str	r2, [r3, #24]
  }
}
 8001b24:	f107 070c 	add.w	r7, r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bc80      	pop	{r7}
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop

08001b30 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	460b      	mov	r3, r1
 8001b3a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001b3c:	78fb      	ldrb	r3, [r7, #3]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d00c      	beq.n	8001b5c <RCC_APB1PeriphClockCmd+0x2c>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8001b42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b46:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001b4a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b4e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001b52:	69d1      	ldr	r1, [r2, #28]
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	430a      	orrs	r2, r1
 8001b58:	61da      	str	r2, [r3, #28]
 8001b5a:	e00d      	b.n	8001b78 <RCC_APB1PeriphClockCmd+0x48>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001b5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b60:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001b64:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b68:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001b6c:	69d1      	ldr	r1, [r2, #28]
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	ea6f 0202 	mvn.w	r2, r2
 8001b74:	400a      	ands	r2, r1
 8001b76:	61da      	str	r2, [r3, #28]
  }
}
 8001b78:	f107 070c 	add.w	r7, r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bc80      	pop	{r7}
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop

08001b84 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001b90:	78fb      	ldrb	r3, [r7, #3]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d00c      	beq.n	8001bb0 <RCC_APB2PeriphResetCmd+0x2c>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8001b96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b9a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001b9e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ba2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001ba6:	68d1      	ldr	r1, [r2, #12]
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	430a      	orrs	r2, r1
 8001bac:	60da      	str	r2, [r3, #12]
 8001bae:	e00d      	b.n	8001bcc <RCC_APB2PeriphResetCmd+0x48>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8001bb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bb4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001bb8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001bbc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001bc0:	68d1      	ldr	r1, [r2, #12]
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	ea6f 0202 	mvn.w	r2, r2
 8001bc8:	400a      	ands	r2, r1
 8001bca:	60da      	str	r2, [r3, #12]
  }
}
 8001bcc:	f107 070c 	add.w	r7, r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bc80      	pop	{r7}
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop

08001bd8 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	460b      	mov	r3, r1
 8001be2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001be4:	78fb      	ldrb	r3, [r7, #3]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d00c      	beq.n	8001c04 <RCC_APB1PeriphResetCmd+0x2c>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8001bea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bee:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001bf2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001bf6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001bfa:	6911      	ldr	r1, [r2, #16]
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	430a      	orrs	r2, r1
 8001c00:	611a      	str	r2, [r3, #16]
 8001c02:	e00d      	b.n	8001c20 <RCC_APB1PeriphResetCmd+0x48>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8001c04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c08:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001c0c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c10:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001c14:	6911      	ldr	r1, [r2, #16]
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	ea6f 0202 	mvn.w	r2, r2
 8001c1c:	400a      	ands	r2, r1
 8001c1e:	611a      	str	r2, [r3, #16]
  }
}
 8001c20:	f107 070c 	add.w	r7, r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bc80      	pop	{r7}
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop

08001c2c <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4603      	mov	r3, r0
 8001c34:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 8001c36:	f44f 6388 	mov.w	r3, #1088	; 0x440
 8001c3a:	f2c4 2342 	movt	r3, #16962	; 0x4242
 8001c3e:	79fa      	ldrb	r2, [r7, #7]
 8001c40:	601a      	str	r2, [r3, #0]
}
 8001c42:	f107 070c 	add.w	r7, r7, #12
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bc80      	pop	{r7}
 8001c4a:	4770      	bx	lr

08001c4c <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System..
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	4603      	mov	r3, r0
 8001c54:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 8001c56:	f04f 034c 	mov.w	r3, #76	; 0x4c
 8001c5a:	f2c4 2342 	movt	r3, #16962	; 0x4242
 8001c5e:	79fa      	ldrb	r2, [r7, #7]
 8001c60:	601a      	str	r2, [r3, #0]
}
 8001c62:	f107 070c 	add.w	r7, r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bc80      	pop	{r7}
 8001c6a:	4770      	bx	lr

08001c6c <RCC_MCOConfig>:
  *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
  *   
  * @retval None
  */
void RCC_MCOConfig(uint8_t RCC_MCO)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	4603      	mov	r3, r0
 8001c74:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO bits to select the MCO source */
  *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
 8001c76:	f241 0307 	movw	r3, #4103	; 0x1007
 8001c7a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001c7e:	79fa      	ldrb	r2, [r7, #7]
 8001c80:	701a      	strb	r2, [r3, #0]
}
 8001c82:	f107 070c 	add.w	r7, r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bc80      	pop	{r7}
 8001c8a:	4770      	bx	lr

08001c8c <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  *   
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b087      	sub	sp, #28
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4603      	mov	r3, r0
 8001c94:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 8001c96:	f04f 0300 	mov.w	r3, #0
 8001c9a:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 8001c9c:	f04f 0300 	mov.w	r3, #0
 8001ca0:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 8001ca2:	f04f 0300 	mov.w	r3, #0
 8001ca6:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8001ca8:	79fb      	ldrb	r3, [r7, #7]
 8001caa:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d106      	bne.n	8001cc6 <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->CR;
 8001cb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cbc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	617b      	str	r3, [r7, #20]
 8001cc4:	e00f      	b.n	8001ce6 <RCC_GetFlagStatus+0x5a>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d106      	bne.n	8001cda <RCC_GetFlagStatus+0x4e>
  {
    statusreg = RCC->BDCR;
 8001ccc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cd0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001cd4:	6a1b      	ldr	r3, [r3, #32]
 8001cd6:	617b      	str	r3, [r7, #20]
 8001cd8:	e005      	b.n	8001ce6 <RCC_GetFlagStatus+0x5a>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8001cda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cde:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce4:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
 8001ce6:	79fb      	ldrb	r3, [r7, #7]
 8001ce8:	f003 031f 	and.w	r3, r3, #31
 8001cec:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	697a      	ldr	r2, [r7, #20]
 8001cf2:	fa22 f303 	lsr.w	r3, r2, r3
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d003      	beq.n	8001d08 <RCC_GetFlagStatus+0x7c>
  {
    bitstatus = SET;
 8001d00:	f04f 0301 	mov.w	r3, #1
 8001d04:	74fb      	strb	r3, [r7, #19]
 8001d06:	e002      	b.n	8001d0e <RCC_GetFlagStatus+0x82>
  }
  else
  {
    bitstatus = RESET;
 8001d08:	f04f 0300 	mov.w	r3, #0
 8001d0c:	74fb      	strb	r3, [r7, #19]
  }

  /* Return the flag status */
  return bitstatus;
 8001d0e:	7cfb      	ldrb	r3, [r7, #19]
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	f107 071c 	add.w	r7, r7, #28
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bc80      	pop	{r7}
 8001d1a:	4770      	bx	lr

08001d1c <RCC_ClearFlag>:
  *   RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
 8001d20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d24:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001d28:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d2c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001d30:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d32:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001d36:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bc80      	pop	{r7}
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop

08001d40 <RCC_GetITStatus>:
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  *   
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b085      	sub	sp, #20
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4603      	mov	r3, r0
 8001d48:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
 8001d4a:	f04f 0300 	mov.w	r3, #0
 8001d4e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 8001d50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d54:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001d58:	689a      	ldr	r2, [r3, #8]
 8001d5a:	79fb      	ldrb	r3, [r7, #7]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d003      	beq.n	8001d6a <RCC_GetITStatus+0x2a>
  {
    bitstatus = SET;
 8001d62:	f04f 0301 	mov.w	r3, #1
 8001d66:	73fb      	strb	r3, [r7, #15]
 8001d68:	e002      	b.n	8001d70 <RCC_GetITStatus+0x30>
  }
  else
  {
    bitstatus = RESET;
 8001d6a:	f04f 0300 	mov.w	r3, #0
 8001d6e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the RCC_IT status */
  return  bitstatus;
 8001d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	f107 0714 	add.w	r7, r7, #20
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bc80      	pop	{r7}
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop

08001d80 <RCC_ClearITPendingBit>:
  *   
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	4603      	mov	r3, r0
 8001d88:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 8001d8a:	f241 030a 	movw	r3, #4106	; 0x100a
 8001d8e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001d92:	79fa      	ldrb	r2, [r7, #7]
 8001d94:	701a      	strb	r2, [r3, #0]
}
 8001d96:	f107 070c 	add.w	r7, r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bc80      	pop	{r7}
 8001d9e:	4770      	bx	lr

08001da0 <TIM_DeInit>:
  * @brief  Deinitializes the TIMx peripheral registers to their default reset values.
  * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
  * @retval None
  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8001dae:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d10c      	bne.n	8001dd0 <TIM_DeInit+0x30>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 8001db6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001dba:	f04f 0101 	mov.w	r1, #1
 8001dbe:	f7ff fee1 	bl	8001b84 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 8001dc2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001dc6:	f04f 0100 	mov.w	r1, #0
 8001dca:	f7ff fedb 	bl	8001b84 <RCC_APB2PeriphResetCmd>
 8001dce:	e13b      	b.n	8002048 <TIM_DeInit+0x2a8>
  }     
  else if (TIMx == TIM2)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dd6:	d10c      	bne.n	8001df2 <TIM_DeInit+0x52>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 8001dd8:	f04f 0001 	mov.w	r0, #1
 8001ddc:	f04f 0101 	mov.w	r1, #1
 8001de0:	f7ff fefa 	bl	8001bd8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 8001de4:	f04f 0001 	mov.w	r0, #1
 8001de8:	f04f 0100 	mov.w	r1, #0
 8001dec:	f7ff fef4 	bl	8001bd8 <RCC_APB1PeriphResetCmd>
 8001df0:	e12a      	b.n	8002048 <TIM_DeInit+0x2a8>
  }
  else if (TIMx == TIM3)
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001df8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d10c      	bne.n	8001e1a <TIM_DeInit+0x7a>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 8001e00:	f04f 0002 	mov.w	r0, #2
 8001e04:	f04f 0101 	mov.w	r1, #1
 8001e08:	f7ff fee6 	bl	8001bd8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 8001e0c:	f04f 0002 	mov.w	r0, #2
 8001e10:	f04f 0100 	mov.w	r1, #0
 8001e14:	f7ff fee0 	bl	8001bd8 <RCC_APB1PeriphResetCmd>
 8001e18:	e116      	b.n	8002048 <TIM_DeInit+0x2a8>
  }
  else if (TIMx == TIM4)
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e20:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d10c      	bne.n	8001e42 <TIM_DeInit+0xa2>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 8001e28:	f04f 0004 	mov.w	r0, #4
 8001e2c:	f04f 0101 	mov.w	r1, #1
 8001e30:	f7ff fed2 	bl	8001bd8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 8001e34:	f04f 0004 	mov.w	r0, #4
 8001e38:	f04f 0100 	mov.w	r1, #0
 8001e3c:	f7ff fecc 	bl	8001bd8 <RCC_APB1PeriphResetCmd>
 8001e40:	e102      	b.n	8002048 <TIM_DeInit+0x2a8>
  } 
  else if (TIMx == TIM5)
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001e48:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d10c      	bne.n	8001e6a <TIM_DeInit+0xca>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 8001e50:	f04f 0008 	mov.w	r0, #8
 8001e54:	f04f 0101 	mov.w	r1, #1
 8001e58:	f7ff febe 	bl	8001bd8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 8001e5c:	f04f 0008 	mov.w	r0, #8
 8001e60:	f04f 0100 	mov.w	r1, #0
 8001e64:	f7ff feb8 	bl	8001bd8 <RCC_APB1PeriphResetCmd>
 8001e68:	e0ee      	b.n	8002048 <TIM_DeInit+0x2a8>
  } 
  else if (TIMx == TIM6)
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e70:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d10c      	bne.n	8001e92 <TIM_DeInit+0xf2>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 8001e78:	f04f 0010 	mov.w	r0, #16
 8001e7c:	f04f 0101 	mov.w	r1, #1
 8001e80:	f7ff feaa 	bl	8001bd8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 8001e84:	f04f 0010 	mov.w	r0, #16
 8001e88:	f04f 0100 	mov.w	r1, #0
 8001e8c:	f7ff fea4 	bl	8001bd8 <RCC_APB1PeriphResetCmd>
 8001e90:	e0da      	b.n	8002048 <TIM_DeInit+0x2a8>
  } 
  else if (TIMx == TIM7)
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001e98:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d10c      	bne.n	8001eba <TIM_DeInit+0x11a>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 8001ea0:	f04f 0020 	mov.w	r0, #32
 8001ea4:	f04f 0101 	mov.w	r1, #1
 8001ea8:	f7ff fe96 	bl	8001bd8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 8001eac:	f04f 0020 	mov.w	r0, #32
 8001eb0:	f04f 0100 	mov.w	r1, #0
 8001eb4:	f7ff fe90 	bl	8001bd8 <RCC_APB1PeriphResetCmd>
 8001eb8:	e0c6      	b.n	8002048 <TIM_DeInit+0x2a8>
  } 
  else if (TIMx == TIM8)
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 8001ec0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d10c      	bne.n	8001ee2 <TIM_DeInit+0x142>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 8001ec8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001ecc:	f04f 0101 	mov.w	r1, #1
 8001ed0:	f7ff fe58 	bl	8001b84 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);
 8001ed4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001ed8:	f04f 0100 	mov.w	r1, #0
 8001edc:	f7ff fe52 	bl	8001b84 <RCC_APB2PeriphResetCmd>
 8001ee0:	e0b2      	b.n	8002048 <TIM_DeInit+0x2a8>
  }
  else if (TIMx == TIM9)
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
 8001ee8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d10c      	bne.n	8001f0a <TIM_DeInit+0x16a>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
 8001ef0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001ef4:	f04f 0101 	mov.w	r1, #1
 8001ef8:	f7ff fe44 	bl	8001b84 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 8001efc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001f00:	f04f 0100 	mov.w	r1, #0
 8001f04:	f7ff fe3e 	bl	8001b84 <RCC_APB2PeriphResetCmd>
 8001f08:	e09e      	b.n	8002048 <TIM_DeInit+0x2a8>
   }  
  else if (TIMx == TIM10)
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8001f10:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d10c      	bne.n	8001f32 <TIM_DeInit+0x192>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
 8001f18:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001f1c:	f04f 0101 	mov.w	r1, #1
 8001f20:	f7ff fe30 	bl	8001b84 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 8001f24:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001f28:	f04f 0100 	mov.w	r1, #0
 8001f2c:	f7ff fe2a 	bl	8001b84 <RCC_APB2PeriphResetCmd>
 8001f30:	e08a      	b.n	8002048 <TIM_DeInit+0x2a8>
  }  
  else if (TIMx == TIM11) 
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 8001f38:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d10c      	bne.n	8001f5a <TIM_DeInit+0x1ba>
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
 8001f40:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001f44:	f04f 0101 	mov.w	r1, #1
 8001f48:	f7ff fe1c 	bl	8001b84 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 8001f4c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001f50:	f04f 0100 	mov.w	r1, #0
 8001f54:	f7ff fe16 	bl	8001b84 <RCC_APB2PeriphResetCmd>
 8001f58:	e076      	b.n	8002048 <TIM_DeInit+0x2a8>
  }  
  else if (TIMx == TIM12)
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001f60:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d10c      	bne.n	8001f82 <TIM_DeInit+0x1e2>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
 8001f68:	f04f 0040 	mov.w	r0, #64	; 0x40
 8001f6c:	f04f 0101 	mov.w	r1, #1
 8001f70:	f7ff fe32 	bl	8001bd8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 8001f74:	f04f 0040 	mov.w	r0, #64	; 0x40
 8001f78:	f04f 0100 	mov.w	r1, #0
 8001f7c:	f7ff fe2c 	bl	8001bd8 <RCC_APB1PeriphResetCmd>
 8001f80:	e062      	b.n	8002048 <TIM_DeInit+0x2a8>
  }  
  else if (TIMx == TIM13) 
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001f88:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d10c      	bne.n	8001faa <TIM_DeInit+0x20a>
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
 8001f90:	f04f 0080 	mov.w	r0, #128	; 0x80
 8001f94:	f04f 0101 	mov.w	r1, #1
 8001f98:	f7ff fe1e 	bl	8001bd8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 8001f9c:	f04f 0080 	mov.w	r0, #128	; 0x80
 8001fa0:	f04f 0100 	mov.w	r1, #0
 8001fa4:	f7ff fe18 	bl	8001bd8 <RCC_APB1PeriphResetCmd>
 8001fa8:	e04e      	b.n	8002048 <TIM_DeInit+0x2a8>
  }
  else if (TIMx == TIM14) 
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fb0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d10c      	bne.n	8001fd2 <TIM_DeInit+0x232>
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 8001fb8:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001fbc:	f04f 0101 	mov.w	r1, #1
 8001fc0:	f7ff fe0a 	bl	8001bd8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE);  
 8001fc4:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001fc8:	f04f 0100 	mov.w	r1, #0
 8001fcc:	f7ff fe04 	bl	8001bd8 <RCC_APB1PeriphResetCmd>
 8001fd0:	e03a      	b.n	8002048 <TIM_DeInit+0x2a8>
  }        
  else if (TIMx == TIM15)
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001fd8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d10c      	bne.n	8001ffa <TIM_DeInit+0x25a>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, ENABLE);
 8001fe0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001fe4:	f04f 0101 	mov.w	r1, #1
 8001fe8:	f7ff fdcc 	bl	8001b84 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, DISABLE);
 8001fec:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001ff0:	f04f 0100 	mov.w	r1, #0
 8001ff4:	f7ff fdc6 	bl	8001b84 <RCC_APB2PeriphResetCmd>
 8001ff8:	e026      	b.n	8002048 <TIM_DeInit+0x2a8>
  } 
  else if (TIMx == TIM16)
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8002000:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002004:	429a      	cmp	r2, r3
 8002006:	d10c      	bne.n	8002022 <TIM_DeInit+0x282>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, ENABLE);
 8002008:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800200c:	f04f 0101 	mov.w	r1, #1
 8002010:	f7ff fdb8 	bl	8001b84 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, DISABLE);
 8002014:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002018:	f04f 0100 	mov.w	r1, #0
 800201c:	f7ff fdb2 	bl	8001b84 <RCC_APB2PeriphResetCmd>
 8002020:	e012      	b.n	8002048 <TIM_DeInit+0x2a8>
  } 
  else
  {
    if (TIMx == TIM17)
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8002028:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800202c:	429a      	cmp	r2, r3
 800202e:	d10b      	bne.n	8002048 <TIM_DeInit+0x2a8>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, ENABLE);
 8002030:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002034:	f04f 0101 	mov.w	r1, #1
 8002038:	f7ff fda4 	bl	8001b84 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, DISABLE);
 800203c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002040:	f04f 0100 	mov.w	r1, #0
 8002044:	f7ff fd9e 	bl	8001b84 <RCC_APB2PeriphResetCmd>
    }  
  }
}
 8002048:	f107 0708 	add.w	r7, r7, #8
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}

08002050 <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for the 
  *         specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8002050:	b480      	push	{r7}
 8002052:	b085      	sub	sp, #20
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 800205a:	f04f 0300 	mov.w	r3, #0
 800205e:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	881b      	ldrh	r3, [r3, #0]
 8002064:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800206c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002070:	429a      	cmp	r2, r3
 8002072:	d01f      	beq.n	80020b4 <TIM_TimeBaseInit+0x64>
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 800207a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800207e:	429a      	cmp	r2, r3
 8002080:	d018      	beq.n	80020b4 <TIM_TimeBaseInit+0x64>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002088:	d014      	beq.n	80020b4 <TIM_TimeBaseInit+0x64>
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002090:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002094:	429a      	cmp	r2, r3
 8002096:	d00d      	beq.n	80020b4 <TIM_TimeBaseInit+0x64>
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800209e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d006      	beq.n	80020b4 <TIM_TimeBaseInit+0x64>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80020ac:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d108      	bne.n	80020c6 <TIM_TimeBaseInit+0x76>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 80020b4:	89fb      	ldrh	r3, [r7, #14]
 80020b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020ba:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	885a      	ldrh	r2, [r3, #2]
 80020c0:	89fb      	ldrh	r3, [r7, #14]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020cc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d00f      	beq.n	80020f4 <TIM_TimeBaseInit+0xa4>
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80020da:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80020de:	429a      	cmp	r2, r3
 80020e0:	d008      	beq.n	80020f4 <TIM_TimeBaseInit+0xa4>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 80020e2:	89fb      	ldrh	r3, [r7, #14]
 80020e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020e8:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	88da      	ldrh	r2, [r3, #6]
 80020ee:	89fb      	ldrh	r3, [r7, #14]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	89fa      	ldrh	r2, [r7, #14]
 80020f8:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	889a      	ldrh	r2, [r3, #4]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	859a      	strh	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	881a      	ldrh	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8002110:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002114:	429a      	cmp	r2, r3
 8002116:	d01b      	beq.n	8002150 <TIM_TimeBaseInit+0x100>
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 800211e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002122:	429a      	cmp	r2, r3
 8002124:	d014      	beq.n	8002150 <TIM_TimeBaseInit+0x100>
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800212c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002130:	429a      	cmp	r2, r3
 8002132:	d00d      	beq.n	8002150 <TIM_TimeBaseInit+0x100>
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 800213a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800213e:	429a      	cmp	r2, r3
 8002140:	d006      	beq.n	8002150 <TIM_TimeBaseInit+0x100>
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8002148:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800214c:	429a      	cmp	r2, r3
 800214e:	d104      	bne.n	800215a <TIM_TimeBaseInit+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	7a1b      	ldrb	r3, [r3, #8]
 8002154:	461a      	mov	r2, r3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f04f 0201 	mov.w	r2, #1
 8002160:	829a      	strh	r2, [r3, #20]
}
 8002162:	f107 0714 	add.w	r7, r7, #20
 8002166:	46bd      	mov	sp, r7
 8002168:	bc80      	pop	{r7}
 800216a:	4770      	bx	lr

0800216c <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800216c:	b480      	push	{r7}
 800216e:	b085      	sub	sp, #20
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8002176:	f04f 0300 	mov.w	r3, #0
 800217a:	817b      	strh	r3, [r7, #10]
 800217c:	f04f 0300 	mov.w	r3, #0
 8002180:	81fb      	strh	r3, [r7, #14]
 8002182:	f04f 0300 	mov.w	r3, #0
 8002186:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
 /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	8c1b      	ldrh	r3, [r3, #32]
 800218c:	b29b      	uxth	r3, r3
 800218e:	f023 0301 	bic.w	r3, r3, #1
 8002192:	b29a      	uxth	r2, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	841a      	strh	r2, [r3, #32]
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	8c1b      	ldrh	r3, [r3, #32]
 800219c:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	889b      	ldrh	r3, [r3, #4]
 80021a2:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	8b1b      	ldrh	r3, [r3, #24]
 80021a8:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC1M));
 80021aa:	897b      	ldrh	r3, [r7, #10]
 80021ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021b0:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
 80021b2:	897b      	ldrh	r3, [r7, #10]
 80021b4:	f023 0303 	bic.w	r3, r3, #3
 80021b8:	817b      	strh	r3, [r7, #10]

  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	881a      	ldrh	r2, [r3, #0]
 80021be:	897b      	ldrh	r3, [r7, #10]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 80021c4:	89fb      	ldrh	r3, [r7, #14]
 80021c6:	f023 0302 	bic.w	r3, r3, #2
 80021ca:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	891a      	ldrh	r2, [r3, #8]
 80021d0:	89fb      	ldrh	r3, [r7, #14]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	885a      	ldrh	r2, [r3, #2]
 80021da:	89fb      	ldrh	r3, [r7, #14]
 80021dc:	4313      	orrs	r3, r2
 80021de:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80021e6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d01b      	beq.n	8002226 <TIM_OC1Init+0xba>
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 80021f4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d014      	beq.n	8002226 <TIM_OC1Init+0xba>
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002202:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002206:	429a      	cmp	r2, r3
 8002208:	d00d      	beq.n	8002226 <TIM_OC1Init+0xba>
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8002210:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002214:	429a      	cmp	r2, r3
 8002216:	d006      	beq.n	8002226 <TIM_OC1Init+0xba>
     (TIMx == TIM16)|| (TIMx == TIM17))
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 800221e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002222:	429a      	cmp	r2, r3
 8002224:	d123      	bne.n	800226e <TIM_OC1Init+0x102>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NP));
 8002226:	89fb      	ldrh	r3, [r7, #14]
 8002228:	f023 0308 	bic.w	r3, r3, #8
 800222c:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	895a      	ldrh	r2, [r3, #10]
 8002232:	89fb      	ldrh	r3, [r7, #14]
 8002234:	4313      	orrs	r3, r2
 8002236:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NE));    
 8002238:	89fb      	ldrh	r3, [r7, #14]
 800223a:	f023 0304 	bic.w	r3, r3, #4
 800223e:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	889a      	ldrh	r2, [r3, #4]
 8002244:	89fb      	ldrh	r3, [r7, #14]
 8002246:	4313      	orrs	r3, r2
 8002248:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1));
 800224a:	89bb      	ldrh	r3, [r7, #12]
 800224c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002250:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1N));
 8002252:	89bb      	ldrh	r3, [r7, #12]
 8002254:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002258:	81bb      	strh	r3, [r7, #12]
    
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	899a      	ldrh	r2, [r3, #12]
 800225e:	89bb      	ldrh	r3, [r7, #12]
 8002260:	4313      	orrs	r3, r2
 8002262:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	89da      	ldrh	r2, [r3, #14]
 8002268:	89bb      	ldrh	r3, [r7, #12]
 800226a:	4313      	orrs	r3, r2
 800226c:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	89ba      	ldrh	r2, [r7, #12]
 8002272:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	897a      	ldrh	r2, [r7, #10]
 8002278:	831a      	strh	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse; 
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	88da      	ldrh	r2, [r3, #6]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	869a      	strh	r2, [r3, #52]	; 0x34
 
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	89fa      	ldrh	r2, [r7, #14]
 8002286:	841a      	strh	r2, [r3, #32]
}
 8002288:	f107 0714 	add.w	r7, r7, #20
 800228c:	46bd      	mov	sp, r7
 800228e:	bc80      	pop	{r7}
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop

08002294 <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8002294:	b480      	push	{r7}
 8002296:	b085      	sub	sp, #20
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800229e:	f04f 0300 	mov.w	r3, #0
 80022a2:	817b      	strh	r3, [r7, #10]
 80022a4:	f04f 0300 	mov.w	r3, #0
 80022a8:	81fb      	strh	r3, [r7, #14]
 80022aa:	f04f 0300 	mov.w	r3, #0
 80022ae:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST6_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
   /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC2E));
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	8c1b      	ldrh	r3, [r3, #32]
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	f023 0310 	bic.w	r3, r3, #16
 80022ba:	b29a      	uxth	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	8c1b      	ldrh	r3, [r3, #32]
 80022c4:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	889b      	ldrh	r3, [r3, #4]
 80022ca:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	8b1b      	ldrh	r3, [r3, #24]
 80022d0:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC2M));
 80022d2:	897b      	ldrh	r3, [r7, #10]
 80022d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022d8:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S));
 80022da:	897b      	ldrh	r3, [r7, #10]
 80022dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022e0:	817b      	strh	r3, [r7, #10]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	881b      	ldrh	r3, [r3, #0]
 80022e6:	ea4f 2303 	mov.w	r3, r3, lsl #8
 80022ea:	b29a      	uxth	r2, r3
 80022ec:	897b      	ldrh	r3, [r7, #10]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2P));
 80022f2:	89fb      	ldrh	r3, [r7, #14]
 80022f4:	f023 0320 	bic.w	r3, r3, #32
 80022f8:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	891b      	ldrh	r3, [r3, #8]
 80022fe:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002302:	b29a      	uxth	r2, r3
 8002304:	89fb      	ldrh	r3, [r7, #14]
 8002306:	4313      	orrs	r3, r2
 8002308:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	885b      	ldrh	r3, [r3, #2]
 800230e:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002312:	b29a      	uxth	r2, r3
 8002314:	89fb      	ldrh	r3, [r7, #14]
 8002316:	4313      	orrs	r3, r2
 8002318:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8002320:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002324:	429a      	cmp	r2, r3
 8002326:	d006      	beq.n	8002336 <TIM_OC2Init+0xa2>
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 800232e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002332:	429a      	cmp	r2, r3
 8002334:	d12f      	bne.n	8002396 <TIM_OC2Init+0x102>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NP));
 8002336:	89fb      	ldrh	r3, [r7, #14]
 8002338:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800233c:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	895b      	ldrh	r3, [r3, #10]
 8002342:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002346:	b29a      	uxth	r2, r3
 8002348:	89fb      	ldrh	r3, [r7, #14]
 800234a:	4313      	orrs	r3, r2
 800234c:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NE));    
 800234e:	89fb      	ldrh	r3, [r7, #14]
 8002350:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002354:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	889b      	ldrh	r3, [r3, #4]
 800235a:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800235e:	b29a      	uxth	r2, r3
 8002360:	89fb      	ldrh	r3, [r7, #14]
 8002362:	4313      	orrs	r3, r2
 8002364:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2));
 8002366:	89bb      	ldrh	r3, [r7, #12]
 8002368:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800236c:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2N));
 800236e:	89bb      	ldrh	r3, [r7, #12]
 8002370:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002374:	81bb      	strh	r3, [r7, #12]
    
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	899b      	ldrh	r3, [r3, #12]
 800237a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800237e:	b29a      	uxth	r2, r3
 8002380:	89bb      	ldrh	r3, [r7, #12]
 8002382:	4313      	orrs	r3, r2
 8002384:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	89db      	ldrh	r3, [r3, #14]
 800238a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800238e:	b29a      	uxth	r2, r3
 8002390:	89bb      	ldrh	r3, [r7, #12]
 8002392:	4313      	orrs	r3, r2
 8002394:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	89ba      	ldrh	r2, [r7, #12]
 800239a:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	897a      	ldrh	r2, [r7, #10]
 80023a0:	831a      	strh	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	88da      	ldrh	r2, [r3, #6]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	871a      	strh	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	89fa      	ldrh	r2, [r7, #14]
 80023ae:	841a      	strh	r2, [r3, #32]
}
 80023b0:	f107 0714 	add.w	r7, r7, #20
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bc80      	pop	{r7}
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop

080023bc <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80023bc:	b480      	push	{r7}
 80023be:	b085      	sub	sp, #20
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 80023c6:	f04f 0300 	mov.w	r3, #0
 80023ca:	817b      	strh	r3, [r7, #10]
 80023cc:	f04f 0300 	mov.w	r3, #0
 80023d0:	81fb      	strh	r3, [r7, #14]
 80023d2:	f04f 0300 	mov.w	r3, #0
 80023d6:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC3E));
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	8c1b      	ldrh	r3, [r3, #32]
 80023dc:	b29b      	uxth	r3, r3
 80023de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023e2:	b29a      	uxth	r2, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	8c1b      	ldrh	r3, [r3, #32]
 80023ec:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	889b      	ldrh	r3, [r3, #4]
 80023f2:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	8b9b      	ldrh	r3, [r3, #28]
 80023f8:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC3M));
 80023fa:	897b      	ldrh	r3, [r7, #10]
 80023fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002400:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC3S));  
 8002402:	897b      	ldrh	r3, [r7, #10]
 8002404:	f023 0303 	bic.w	r3, r3, #3
 8002408:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	881a      	ldrh	r2, [r3, #0]
 800240e:	897b      	ldrh	r3, [r7, #10]
 8002410:	4313      	orrs	r3, r2
 8002412:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
 8002414:	89fb      	ldrh	r3, [r7, #14]
 8002416:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800241a:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	891b      	ldrh	r3, [r3, #8]
 8002420:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8002424:	b29a      	uxth	r2, r3
 8002426:	89fb      	ldrh	r3, [r7, #14]
 8002428:	4313      	orrs	r3, r2
 800242a:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	885b      	ldrh	r3, [r3, #2]
 8002430:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8002434:	b29a      	uxth	r2, r3
 8002436:	89fb      	ldrh	r3, [r7, #14]
 8002438:	4313      	orrs	r3, r2
 800243a:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8002442:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002446:	429a      	cmp	r2, r3
 8002448:	d006      	beq.n	8002458 <TIM_OC3Init+0x9c>
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 8002450:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002454:	429a      	cmp	r2, r3
 8002456:	d12f      	bne.n	80024b8 <TIM_OC3Init+0xfc>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NP));
 8002458:	89fb      	ldrh	r3, [r7, #14]
 800245a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800245e:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	895b      	ldrh	r3, [r3, #10]
 8002464:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8002468:	b29a      	uxth	r2, r3
 800246a:	89fb      	ldrh	r3, [r7, #14]
 800246c:	4313      	orrs	r3, r2
 800246e:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NE));
 8002470:	89fb      	ldrh	r3, [r7, #14]
 8002472:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002476:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	889b      	ldrh	r3, [r3, #4]
 800247c:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8002480:	b29a      	uxth	r2, r3
 8002482:	89fb      	ldrh	r3, [r7, #14]
 8002484:	4313      	orrs	r3, r2
 8002486:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3));
 8002488:	89bb      	ldrh	r3, [r7, #12]
 800248a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800248e:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3N));
 8002490:	89bb      	ldrh	r3, [r7, #12]
 8002492:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002496:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	899b      	ldrh	r3, [r3, #12]
 800249c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80024a0:	b29a      	uxth	r2, r3
 80024a2:	89bb      	ldrh	r3, [r7, #12]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	89db      	ldrh	r3, [r3, #14]
 80024ac:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80024b0:	b29a      	uxth	r2, r3
 80024b2:	89bb      	ldrh	r3, [r7, #12]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	89ba      	ldrh	r2, [r7, #12]
 80024bc:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	897a      	ldrh	r2, [r7, #10]
 80024c2:	839a      	strh	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	88da      	ldrh	r2, [r3, #6]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	89fa      	ldrh	r2, [r7, #14]
 80024d0:	841a      	strh	r2, [r3, #32]
}
 80024d2:	f107 0714 	add.w	r7, r7, #20
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bc80      	pop	{r7}
 80024da:	4770      	bx	lr

080024dc <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80024dc:	b480      	push	{r7}
 80024de:	b085      	sub	sp, #20
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 80024e6:	f04f 0300 	mov.w	r3, #0
 80024ea:	81bb      	strh	r3, [r7, #12]
 80024ec:	f04f 0300 	mov.w	r3, #0
 80024f0:	817b      	strh	r3, [r7, #10]
 80024f2:	f04f 0300 	mov.w	r3, #0
 80024f6:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC4E));
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	8c1b      	ldrh	r3, [r3, #32]
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002502:	b29a      	uxth	r2, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	8c1b      	ldrh	r3, [r3, #32]
 800250c:	817b      	strh	r3, [r7, #10]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	889b      	ldrh	r3, [r3, #4]
 8002512:	81fb      	strh	r3, [r7, #14]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	8b9b      	ldrh	r3, [r3, #28]
 8002518:	81bb      	strh	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC4M));
 800251a:	89bb      	ldrh	r3, [r7, #12]
 800251c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002520:	81bb      	strh	r3, [r7, #12]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC4S));
 8002522:	89bb      	ldrh	r3, [r7, #12]
 8002524:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002528:	81bb      	strh	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	881b      	ldrh	r3, [r3, #0]
 800252e:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8002532:	b29a      	uxth	r2, r3
 8002534:	89bb      	ldrh	r3, [r7, #12]
 8002536:	4313      	orrs	r3, r2
 8002538:	81bb      	strh	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
 800253a:	897b      	ldrh	r3, [r7, #10]
 800253c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002540:	817b      	strh	r3, [r7, #10]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	891b      	ldrh	r3, [r3, #8]
 8002546:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800254a:	b29a      	uxth	r2, r3
 800254c:	897b      	ldrh	r3, [r7, #10]
 800254e:	4313      	orrs	r3, r2
 8002550:	817b      	strh	r3, [r7, #10]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	885b      	ldrh	r3, [r3, #2]
 8002556:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800255a:	b29a      	uxth	r2, r3
 800255c:	897b      	ldrh	r3, [r7, #10]
 800255e:	4313      	orrs	r3, r2
 8002560:	817b      	strh	r3, [r7, #10]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8002568:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800256c:	429a      	cmp	r2, r3
 800256e:	d006      	beq.n	800257e <TIM_OC4Init+0xa2>
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 8002576:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800257a:	429a      	cmp	r2, r3
 800257c:	d10b      	bne.n	8002596 <TIM_OC4Init+0xba>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS4));
 800257e:	89fb      	ldrh	r3, [r7, #14]
 8002580:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002584:	81fb      	strh	r3, [r7, #14]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	899b      	ldrh	r3, [r3, #12]
 800258a:	ea4f 1383 	mov.w	r3, r3, lsl #6
 800258e:	b29a      	uxth	r2, r3
 8002590:	89fb      	ldrh	r3, [r7, #14]
 8002592:	4313      	orrs	r3, r2
 8002594:	81fb      	strh	r3, [r7, #14]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	89fa      	ldrh	r2, [r7, #14]
 800259a:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	89ba      	ldrh	r2, [r7, #12]
 80025a0:	839a      	strh	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	88da      	ldrh	r2, [r3, #6]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	897a      	ldrh	r2, [r7, #10]
 80025b0:	841a      	strh	r2, [r3, #32]
}
 80025b2:	f107 0714 	add.w	r7, r7, #20
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bc80      	pop	{r7}
 80025ba:	4770      	bx	lr

080025bc <TIM_ICInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
  }
  else
  {
    assert_param(IS_TIM_IC_POLARITY_LITE(TIM_ICInitStruct->TIM_ICPolarity));
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	881b      	ldrh	r3, [r3, #0]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d10f      	bne.n	80025ee <TIM_ICInit+0x32>
  {
    assert_param(IS_TIM_LIST8_PERIPH(TIMx));
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	8859      	ldrh	r1, [r3, #2]
               TIM_ICInitStruct->TIM_ICSelection,
 80025d2:	683b      	ldr	r3, [r7, #0]
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    assert_param(IS_TIM_LIST8_PERIPH(TIMx));
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 80025d4:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
 80025d6:	683b      	ldr	r3, [r7, #0]
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    assert_param(IS_TIM_LIST8_PERIPH(TIMx));
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 80025d8:	891b      	ldrh	r3, [r3, #8]
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f001 f9d4 	bl	8003988 <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	88db      	ldrh	r3, [r3, #6]
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	4619      	mov	r1, r3
 80025e8:	f001 f876 	bl	80036d8 <TIM_SetIC1Prescaler>
 80025ec:	e036      	b.n	800265c <TIM_ICInit+0xa0>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	881b      	ldrh	r3, [r3, #0]
 80025f2:	2b04      	cmp	r3, #4
 80025f4:	d10f      	bne.n	8002616 <TIM_ICInit+0x5a>
  {
    assert_param(IS_TIM_LIST6_PERIPH(TIMx));
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	8859      	ldrh	r1, [r3, #2]
               TIM_ICInitStruct->TIM_ICSelection,
 80025fa:	683b      	ldr	r3, [r7, #0]
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
  {
    assert_param(IS_TIM_LIST6_PERIPH(TIMx));
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 80025fc:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
 80025fe:	683b      	ldr	r3, [r7, #0]
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
  {
    assert_param(IS_TIM_LIST6_PERIPH(TIMx));
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8002600:	891b      	ldrh	r3, [r3, #8]
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f001 fa32 	bl	8003a6c <TI2_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	88db      	ldrh	r3, [r3, #6]
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	4619      	mov	r1, r3
 8002610:	f001 f87e 	bl	8003710 <TIM_SetIC2Prescaler>
 8002614:	e022      	b.n	800265c <TIM_ICInit+0xa0>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	881b      	ldrh	r3, [r3, #0]
 800261a:	2b08      	cmp	r3, #8
 800261c:	d10f      	bne.n	800263e <TIM_ICInit+0x82>
  {
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    /* TI3 Configuration */
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	8859      	ldrh	r1, [r3, #2]
               TIM_ICInitStruct->TIM_ICSelection,
 8002622:	683b      	ldr	r3, [r7, #0]
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
  {
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    /* TI3 Configuration */
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 8002624:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
 8002626:	683b      	ldr	r3, [r7, #0]
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
  {
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    /* TI3 Configuration */
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 8002628:	891b      	ldrh	r3, [r3, #8]
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f001 faa0 	bl	8003b70 <TI3_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	88db      	ldrh	r3, [r3, #6]
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	4619      	mov	r1, r3
 8002638:	f001 f888 	bl	800374c <TIM_SetIC3Prescaler>
 800263c:	e00e      	b.n	800265c <TIM_ICInit+0xa0>
  }
  else
  {
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    /* TI4 Configuration */
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	8859      	ldrh	r1, [r3, #2]
               TIM_ICInitStruct->TIM_ICSelection,
 8002642:	683b      	ldr	r3, [r7, #0]
  }
  else
  {
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    /* TI4 Configuration */
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8002644:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
 8002646:	683b      	ldr	r3, [r7, #0]
  }
  else
  {
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    /* TI4 Configuration */
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8002648:	891b      	ldrh	r3, [r3, #8]
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f001 fb0a 	bl	8003c64 <TI4_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	88db      	ldrh	r3, [r3, #6]
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	4619      	mov	r1, r3
 8002658:	f001 f894 	bl	8003784 <TIM_SetIC4Prescaler>
  }
}
 800265c:	f107 0708 	add.w	r7, r7, #8
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}

08002664 <TIM_PWMIConfig>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
  uint16_t icoppositepolarity = TIM_ICPolarity_Rising;
 800266e:	f04f 0300 	mov.w	r3, #0
 8002672:	81fb      	strh	r3, [r7, #14]
  uint16_t icoppositeselection = TIM_ICSelection_DirectTI;
 8002674:	f04f 0301 	mov.w	r3, #1
 8002678:	81bb      	strh	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	885b      	ldrh	r3, [r3, #2]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d103      	bne.n	800268a <TIM_PWMIConfig+0x26>
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
 8002682:	f04f 0302 	mov.w	r3, #2
 8002686:	81fb      	strh	r3, [r7, #14]
 8002688:	e002      	b.n	8002690 <TIM_PWMIConfig+0x2c>
  }
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
 800268a:	f04f 0300 	mov.w	r3, #0
 800268e:	81fb      	strh	r3, [r7, #14]
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	889b      	ldrh	r3, [r3, #4]
 8002694:	2b01      	cmp	r3, #1
 8002696:	d103      	bne.n	80026a0 <TIM_PWMIConfig+0x3c>
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
 8002698:	f04f 0302 	mov.w	r3, #2
 800269c:	81bb      	strh	r3, [r7, #12]
 800269e:	e002      	b.n	80026a6 <TIM_PWMIConfig+0x42>
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
 80026a0:	f04f 0301 	mov.w	r3, #1
 80026a4:	81bb      	strh	r3, [r7, #12]
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	881b      	ldrh	r3, [r3, #0]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d11c      	bne.n	80026e8 <TIM_PWMIConfig+0x84>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	8859      	ldrh	r1, [r3, #2]
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICFilter);
 80026b6:	683b      	ldr	r3, [r7, #0]
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 80026b8:	891b      	ldrh	r3, [r3, #8]
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f001 f964 	bl	8003988 <TI1_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	88db      	ldrh	r3, [r3, #6]
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	4619      	mov	r1, r3
 80026c8:	f001 f806 	bl	80036d8 <TIM_SetIC1Prescaler>
    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	891b      	ldrh	r3, [r3, #8]
 80026d0:	89f9      	ldrh	r1, [r7, #14]
 80026d2:	89ba      	ldrh	r2, [r7, #12]
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f001 f9c9 	bl	8003a6c <TI2_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	88db      	ldrh	r3, [r3, #6]
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	4619      	mov	r1, r3
 80026e2:	f001 f815 	bl	8003710 <TIM_SetIC2Prescaler>
 80026e6:	e01b      	b.n	8002720 <TIM_PWMIConfig+0xbc>
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	8859      	ldrh	r1, [r3, #2]
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICFilter);
 80026f0:	683b      	ldr	r3, [r7, #0]
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 80026f2:	891b      	ldrh	r3, [r3, #8]
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f001 f9b9 	bl	8003a6c <TI2_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	88db      	ldrh	r3, [r3, #6]
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	4619      	mov	r1, r3
 8002702:	f001 f805 	bl	8003710 <TIM_SetIC2Prescaler>
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	891b      	ldrh	r3, [r3, #8]
 800270a:	89f9      	ldrh	r1, [r7, #14]
 800270c:	89ba      	ldrh	r2, [r7, #12]
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f001 f93a 	bl	8003988 <TI1_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	88db      	ldrh	r3, [r3, #6]
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	4619      	mov	r1, r3
 800271c:	f000 ffdc 	bl	80036d8 <TIM_SetIC1Prescaler>
  }
}
 8002720:	f107 0710 	add.w	r7, r7, #16
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}

08002728 <TIM_BDTRConfig>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure that
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval None
  */
void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	881a      	ldrh	r2, [r3, #0]
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	885b      	ldrh	r3, [r3, #2]
 800273a:	4313      	orrs	r3, r2
 800273c:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	889b      	ldrh	r3, [r3, #4]
  assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8002742:	4313      	orrs	r3, r2
 8002744:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	88db      	ldrh	r3, [r3, #6]
  assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 800274a:	4313      	orrs	r3, r2
 800274c:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	891b      	ldrh	r3, [r3, #8]
  assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8002752:	4313      	orrs	r3, r2
 8002754:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	895b      	ldrh	r3, [r3, #10]
  assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 800275a:	4313      	orrs	r3, r2
 800275c:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	899b      	ldrh	r3, [r3, #12]
  assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8002762:	4313      	orrs	r3, r2
 8002764:	b29a      	uxth	r2, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
}
 800276c:	f107 070c 	add.w	r7, r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	bc80      	pop	{r7}
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop

08002778 <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFF;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002786:	809a      	strh	r2, [r3, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f04f 0200 	mov.w	r2, #0
 800278e:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f04f 0200 	mov.w	r2, #0
 8002796:	80da      	strh	r2, [r3, #6]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f04f 0200 	mov.w	r2, #0
 800279e:	805a      	strh	r2, [r3, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f04f 0200 	mov.w	r2, #0
 80027a6:	721a      	strb	r2, [r3, #8]
}
 80027a8:	f107 070c 	add.w	r7, r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bc80      	pop	{r7}
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop

080027b4 <TIM_OCStructInit>:
  * @param  TIM_OCInitStruct : pointer to a TIM_OCInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f04f 0200 	mov.w	r2, #0
 80027c2:	801a      	strh	r2, [r3, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f04f 0200 	mov.w	r2, #0
 80027ca:	805a      	strh	r2, [r3, #2]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f04f 0200 	mov.w	r2, #0
 80027d2:	809a      	strh	r2, [r3, #4]
  TIM_OCInitStruct->TIM_Pulse = 0x0000;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f04f 0200 	mov.w	r2, #0
 80027da:	80da      	strh	r2, [r3, #6]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f04f 0200 	mov.w	r2, #0
 80027e2:	811a      	strh	r2, [r3, #8]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f04f 0200 	mov.w	r2, #0
 80027ea:	815a      	strh	r2, [r3, #10]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f04f 0200 	mov.w	r2, #0
 80027f2:	819a      	strh	r2, [r3, #12]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f04f 0200 	mov.w	r2, #0
 80027fa:	81da      	strh	r2, [r3, #14]
}
 80027fc:	f107 070c 	add.w	r7, r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	bc80      	pop	{r7}
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop

08002808 <TIM_ICStructInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f04f 0200 	mov.w	r2, #0
 8002816:	801a      	strh	r2, [r3, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f04f 0200 	mov.w	r2, #0
 800281e:	805a      	strh	r2, [r3, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f04f 0201 	mov.w	r2, #1
 8002826:	809a      	strh	r2, [r3, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f04f 0200 	mov.w	r2, #0
 800282e:	80da      	strh	r2, [r3, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f04f 0200 	mov.w	r2, #0
 8002836:	811a      	strh	r2, [r3, #8]
}
 8002838:	f107 070c 	add.w	r7, r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	bc80      	pop	{r7}
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop

08002844 <TIM_BDTRStructInit>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure which
  *         will be initialized.
  * @retval None
  */
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f04f 0200 	mov.w	r2, #0
 8002852:	801a      	strh	r2, [r3, #0]
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f04f 0200 	mov.w	r2, #0
 800285a:	805a      	strh	r2, [r3, #2]
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f04f 0200 	mov.w	r2, #0
 8002862:	809a      	strh	r2, [r3, #4]
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f04f 0200 	mov.w	r2, #0
 800286a:	80da      	strh	r2, [r3, #6]
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f04f 0200 	mov.w	r2, #0
 8002872:	811a      	strh	r2, [r3, #8]
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f04f 0200 	mov.w	r2, #0
 800287a:	815a      	strh	r2, [r3, #10]
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f04f 0200 	mov.w	r2, #0
 8002882:	819a      	strh	r2, [r3, #12]
}
 8002884:	f107 070c 	add.w	r7, r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	bc80      	pop	{r7}
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop

08002890 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	460b      	mov	r3, r1
 800289a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800289c:	78fb      	ldrb	r3, [r7, #3]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d008      	beq.n	80028b4 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	881b      	ldrh	r3, [r3, #0]
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	f043 0301 	orr.w	r3, r3, #1
 80028ac:	b29a      	uxth	r2, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	801a      	strh	r2, [r3, #0]
 80028b2:	e007      	b.n	80028c4 <TIM_Cmd+0x34>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	881b      	ldrh	r3, [r3, #0]
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	f023 0301 	bic.w	r3, r3, #1
 80028be:	b29a      	uxth	r2, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	801a      	strh	r2, [r3, #0]
  }
}
 80028c4:	f107 070c 	add.w	r7, r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bc80      	pop	{r7}
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop

080028d0 <TIM_CtrlPWMOutputs>:
  * @param  NewState: new state of the TIM peripheral Main Outputs.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	460b      	mov	r3, r1
 80028da:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80028dc:	78fb      	ldrb	r3, [r7, #3]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d00c      	beq.n	80028fc <TIM_CtrlPWMOutputs+0x2c>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028f2:	b29a      	uxth	r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 80028fa:	e00b      	b.n	8002914 <TIM_CtrlPWMOutputs+0x44>
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)(~((uint16_t)TIM_BDTR_MOE));
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002902:	b29b      	uxth	r3, r3
 8002904:	ea4f 4343 	mov.w	r3, r3, lsl #17
 8002908:	ea4f 4353 	mov.w	r3, r3, lsr #17
 800290c:	b29a      	uxth	r2, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }  
}
 8002914:	f107 070c 	add.w	r7, r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	bc80      	pop	{r7}
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop

08002920 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	4613      	mov	r3, r2
 800292a:	460a      	mov	r2, r1
 800292c:	807a      	strh	r2, [r7, #2]
 800292e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002930:	787b      	ldrb	r3, [r7, #1]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d008      	beq.n	8002948 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	899b      	ldrh	r3, [r3, #12]
 800293a:	b29a      	uxth	r2, r3
 800293c:	887b      	ldrh	r3, [r7, #2]
 800293e:	4313      	orrs	r3, r2
 8002940:	b29a      	uxth	r2, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	819a      	strh	r2, [r3, #12]
 8002946:	e00a      	b.n	800295e <TIM_ITConfig+0x3e>
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	899b      	ldrh	r3, [r3, #12]
 800294c:	b29a      	uxth	r2, r3
 800294e:	887b      	ldrh	r3, [r7, #2]
 8002950:	ea6f 0303 	mvn.w	r3, r3
 8002954:	b29b      	uxth	r3, r3
 8002956:	4013      	ands	r3, r2
 8002958:	b29a      	uxth	r2, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	819a      	strh	r2, [r3, #12]
  }
}
 800295e:	f107 070c 	add.w	r7, r7, #12
 8002962:	46bd      	mov	sp, r7
 8002964:	bc80      	pop	{r7}
 8002966:	4770      	bx	lr

08002968 <TIM_GenerateEvent>:
  *   - TIM6 and TIM7 can only generate an update event. 
  *   - TIM_EventSource_COM and TIM_EventSource_Break are used only with TIM1 and TIM8.      
  * @retval None
  */
void TIM_GenerateEvent(TIM_TypeDef* TIMx, uint16_t TIM_EventSource)
{ 
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	460b      	mov	r3, r1
 8002972:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
  
  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	887a      	ldrh	r2, [r7, #2]
 8002978:	829a      	strh	r2, [r3, #20]
}
 800297a:	f107 070c 	add.w	r7, r7, #12
 800297e:	46bd      	mov	sp, r7
 8002980:	bc80      	pop	{r7}
 8002982:	4770      	bx	lr

08002984 <TIM_DMAConfig>:
  *   This parameter can be one value between:
  *   TIM_DMABurstLength_1Transfer and TIM_DMABurstLength_18Transfers.
  * @retval None
  */
void TIM_DMAConfig(TIM_TypeDef* TIMx, uint16_t TIM_DMABase, uint16_t TIM_DMABurstLength)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	4613      	mov	r3, r2
 800298e:	460a      	mov	r2, r1
 8002990:	807a      	strh	r2, [r7, #2]
 8002992:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase));
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));
  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
 8002994:	887a      	ldrh	r2, [r7, #2]
 8002996:	883b      	ldrh	r3, [r7, #0]
 8002998:	4313      	orrs	r3, r2
 800299a:	b29a      	uxth	r2, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
}
 80029a2:	f107 070c 	add.w	r7, r7, #12
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bc80      	pop	{r7}
 80029aa:	4770      	bx	lr

080029ac <TIM_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState)
{ 
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	4613      	mov	r3, r2
 80029b6:	460a      	mov	r2, r1
 80029b8:	807a      	strh	r2, [r7, #2]
 80029ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_LIST9_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80029bc:	787b      	ldrb	r3, [r7, #1]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d008      	beq.n	80029d4 <TIM_DMACmd+0x28>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	899b      	ldrh	r3, [r3, #12]
 80029c6:	b29a      	uxth	r2, r3
 80029c8:	887b      	ldrh	r3, [r7, #2]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	b29a      	uxth	r2, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	819a      	strh	r2, [r3, #12]
 80029d2:	e00a      	b.n	80029ea <TIM_DMACmd+0x3e>
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	899b      	ldrh	r3, [r3, #12]
 80029d8:	b29a      	uxth	r2, r3
 80029da:	887b      	ldrh	r3, [r7, #2]
 80029dc:	ea6f 0303 	mvn.w	r3, r3
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	4013      	ands	r3, r2
 80029e4:	b29a      	uxth	r2, r3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	819a      	strh	r2, [r3, #12]
  }
}
 80029ea:	f107 070c 	add.w	r7, r7, #12
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bc80      	pop	{r7}
 80029f2:	4770      	bx	lr

080029f4 <TIM_InternalClockConfig>:
  * @param  TIMx: where x can be  1, 2, 3, 4, 5, 8, 9, 12 or 15
  *         to select the TIM peripheral.
  * @retval None
  */
void TIM_InternalClockConfig(TIM_TypeDef* TIMx)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	891b      	ldrh	r3, [r3, #8]
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	f023 0307 	bic.w	r3, r3, #7
 8002a06:	b29a      	uxth	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	811a      	strh	r2, [r3, #8]
}
 8002a0c:	f107 070c 	add.w	r7, r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bc80      	pop	{r7}
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop

08002a18 <TIM_ITRxExternalClockConfig>:
  * @param  TIM_TS_ITR2: Internal Trigger 2
  * @param  TIM_TS_ITR3: Internal Trigger 3
  * @retval None
  */
void TIM_ITRxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	460b      	mov	r3, r1
 8002a22:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_INTERNAL_TRIGGER_SELECTION(TIM_InputTriggerSource));
  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);
 8002a24:	887b      	ldrh	r3, [r7, #2]
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	4619      	mov	r1, r3
 8002a2a:	f000 f8d3 	bl	8002bd4 <TIM_SelectInputTrigger>
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	891b      	ldrh	r3, [r3, #8]
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	f043 0307 	orr.w	r3, r3, #7
 8002a38:	b29a      	uxth	r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	811a      	strh	r2, [r3, #8]
}
 8002a3e:	f107 0708 	add.w	r7, r7, #8
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop

08002a48 <TIM_TIxExternalClockConfig>:
  *   This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	8179      	strh	r1, [r7, #10]
 8002a52:	813a      	strh	r2, [r7, #8]
 8002a54:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_TIXCLK_SOURCE(TIM_TIxExternalCLKSource));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));
  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 8002a56:	897b      	ldrh	r3, [r7, #10]
 8002a58:	2b60      	cmp	r3, #96	; 0x60
 8002a5a:	d108      	bne.n	8002a6e <TIM_TIxExternalClockConfig+0x26>
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 8002a5c:	893a      	ldrh	r2, [r7, #8]
 8002a5e:	88fb      	ldrh	r3, [r7, #6]
 8002a60:	68f8      	ldr	r0, [r7, #12]
 8002a62:	4611      	mov	r1, r2
 8002a64:	f04f 0201 	mov.w	r2, #1
 8002a68:	f001 f800 	bl	8003a6c <TI2_Config>
 8002a6c:	e007      	b.n	8002a7e <TIM_TIxExternalClockConfig+0x36>
  }
  else
  {
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 8002a6e:	893a      	ldrh	r2, [r7, #8]
 8002a70:	88fb      	ldrh	r3, [r7, #6]
 8002a72:	68f8      	ldr	r0, [r7, #12]
 8002a74:	4611      	mov	r1, r2
 8002a76:	f04f 0201 	mov.w	r2, #1
 8002a7a:	f000 ff85 	bl	8003988 <TI1_Config>
  }
  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
 8002a7e:	897b      	ldrh	r3, [r7, #10]
 8002a80:	68f8      	ldr	r0, [r7, #12]
 8002a82:	4619      	mov	r1, r3
 8002a84:	f000 f8a6 	bl	8002bd4 <TIM_SelectInputTrigger>
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	891b      	ldrh	r3, [r3, #8]
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	f043 0307 	orr.w	r3, r3, #7
 8002a92:	b29a      	uxth	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	811a      	strh	r2, [r3, #8]
}
 8002a98:	f107 0710 	add.w	r7, r7, #16
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <TIM_ETRClockMode1Config>:
  *   This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,
                             uint16_t ExtTRGFilter)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b086      	sub	sp, #24
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	8179      	strh	r1, [r7, #10]
 8002aaa:	813a      	strh	r2, [r7, #8]
 8002aac:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 8002aae:	f04f 0300 	mov.w	r3, #0
 8002ab2:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 8002ab4:	8979      	ldrh	r1, [r7, #10]
 8002ab6:	893a      	ldrh	r2, [r7, #8]
 8002ab8:	88fb      	ldrh	r3, [r7, #6]
 8002aba:	68f8      	ldr	r0, [r7, #12]
 8002abc:	f000 f834 	bl	8002b28 <TIM_ETRConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	891b      	ldrh	r3, [r3, #8]
 8002ac4:	82fb      	strh	r3, [r7, #22]
  /* Reset the SMS Bits */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
 8002ac6:	8afb      	ldrh	r3, [r7, #22]
 8002ac8:	f023 0307 	bic.w	r3, r3, #7
 8002acc:	82fb      	strh	r3, [r7, #22]
  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;
 8002ace:	8afb      	ldrh	r3, [r7, #22]
 8002ad0:	f043 0307 	orr.w	r3, r3, #7
 8002ad4:	82fb      	strh	r3, [r7, #22]
  /* Select the Trigger selection : ETRF */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
 8002ad6:	8afb      	ldrh	r3, [r7, #22]
 8002ad8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002adc:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_TS_ETRF;
 8002ade:	8afb      	ldrh	r3, [r7, #22]
 8002ae0:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002ae4:	82fb      	strh	r3, [r7, #22]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	8afa      	ldrh	r2, [r7, #22]
 8002aea:	811a      	strh	r2, [r3, #8]
}
 8002aec:	f107 0718 	add.w	r7, r7, #24
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <TIM_ETRClockMode2Config>:
  *   This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	8179      	strh	r1, [r7, #10]
 8002afe:	813a      	strh	r2, [r7, #8]
 8002b00:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 8002b02:	8979      	ldrh	r1, [r7, #10]
 8002b04:	893a      	ldrh	r2, [r7, #8]
 8002b06:	88fb      	ldrh	r3, [r7, #6]
 8002b08:	68f8      	ldr	r0, [r7, #12]
 8002b0a:	f000 f80d 	bl	8002b28 <TIM_ETRConfig>
  /* Enable the External clock mode2 */
  TIMx->SMCR |= TIM_SMCR_ECE;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	891b      	ldrh	r3, [r3, #8]
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b18:	b29a      	uxth	r2, r3
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	811a      	strh	r2, [r3, #8]
}
 8002b1e:	f107 0710 	add.w	r7, r7, #16
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop

08002b28 <TIM_ETRConfig>:
  *   This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,
                   uint16_t ExtTRGFilter)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b087      	sub	sp, #28
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	8179      	strh	r1, [r7, #10]
 8002b32:	813a      	strh	r2, [r7, #8]
 8002b34:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 8002b36:	f04f 0300 	mov.w	r3, #0
 8002b3a:	82fb      	strh	r3, [r7, #22]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  tmpsmcr = TIMx->SMCR;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	891b      	ldrh	r3, [r3, #8]
 8002b40:	82fb      	strh	r3, [r7, #22]
  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_Mask;
 8002b42:	8afb      	ldrh	r3, [r7, #22]
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	82fb      	strh	r3, [r7, #22]
  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 8002b48:	88fb      	ldrh	r3, [r7, #6]
 8002b4a:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8002b4e:	b29a      	uxth	r2, r3
 8002b50:	893b      	ldrh	r3, [r7, #8]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	b29a      	uxth	r2, r3
 8002b56:	897b      	ldrh	r3, [r7, #10]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	b29a      	uxth	r2, r3
 8002b5c:	8afb      	ldrh	r3, [r7, #22]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	82fb      	strh	r3, [r7, #22]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	8afa      	ldrh	r2, [r7, #22]
 8002b66:	811a      	strh	r2, [r3, #8]
}
 8002b68:	f107 071c 	add.w	r7, r7, #28
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bc80      	pop	{r7}
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop

08002b74 <TIM_PrescalerConfig>:
  *     @arg TIM_PSCReloadMode_Update: The Prescaler is loaded at the update event.
  *     @arg TIM_PSCReloadMode_Immediate: The Prescaler is loaded immediately.
  * @retval None
  */
void TIM_PrescalerConfig(TIM_TypeDef* TIMx, uint16_t Prescaler, uint16_t TIM_PSCReloadMode)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	460a      	mov	r2, r1
 8002b80:	807a      	strh	r2, [r7, #2]
 8002b82:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	887a      	ldrh	r2, [r7, #2]
 8002b88:	851a      	strh	r2, [r3, #40]	; 0x28
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	883a      	ldrh	r2, [r7, #0]
 8002b8e:	829a      	strh	r2, [r3, #20]
}
 8002b90:	f107 070c 	add.w	r7, r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bc80      	pop	{r7}
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop

08002b9c <TIM_CounterModeConfig>:
  *     @arg TIM_CounterMode_CenterAligned2: TIM Center Aligned Mode2
  *     @arg TIM_CounterMode_CenterAligned3: TIM Center Aligned Mode3
  * @retval None
  */
void TIM_CounterModeConfig(TIM_TypeDef* TIMx, uint16_t TIM_CounterMode)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b085      	sub	sp, #20
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpcr1 = 0;
 8002ba8:	f04f 0300 	mov.w	r3, #0
 8002bac:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));
  tmpcr1 = TIMx->CR1;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	881b      	ldrh	r3, [r3, #0]
 8002bb2:	81fb      	strh	r3, [r7, #14]
  /* Reset the CMS and DIR Bits */
  tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 8002bb4:	89fb      	ldrh	r3, [r7, #14]
 8002bb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bba:	81fb      	strh	r3, [r7, #14]
  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
 8002bbc:	89fa      	ldrh	r2, [r7, #14]
 8002bbe:	887b      	ldrh	r3, [r7, #2]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	89fa      	ldrh	r2, [r7, #14]
 8002bc8:	801a      	strh	r2, [r3, #0]
}
 8002bca:	f107 0714 	add.w	r7, r7, #20
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bc80      	pop	{r7}
 8002bd2:	4770      	bx	lr

08002bd4 <TIM_SelectInputTrigger>:
  *     @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *     @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
void TIM_SelectInputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b085      	sub	sp, #20
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	460b      	mov	r3, r1
 8002bde:	807b      	strh	r3, [r7, #2]
  uint16_t tmpsmcr = 0;
 8002be0:	f04f 0300 	mov.w	r3, #0
 8002be4:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	891b      	ldrh	r3, [r3, #8]
 8002bea:	81fb      	strh	r3, [r7, #14]
  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
 8002bec:	89fb      	ldrh	r3, [r7, #14]
 8002bee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bf2:	81fb      	strh	r3, [r7, #14]
  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 8002bf4:	89fa      	ldrh	r2, [r7, #14]
 8002bf6:	887b      	ldrh	r3, [r7, #2]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	89fa      	ldrh	r2, [r7, #14]
 8002c00:	811a      	strh	r2, [r3, #8]
}
 8002c02:	f107 0714 	add.w	r7, r7, #20
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bc80      	pop	{r7}
 8002c0a:	4770      	bx	lr

08002c0c <TIM_EncoderInterfaceConfig>:
  *     @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b087      	sub	sp, #28
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	60f8      	str	r0, [r7, #12]
 8002c14:	8179      	strh	r1, [r7, #10]
 8002c16:	813a      	strh	r2, [r7, #8]
 8002c18:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 8002c1a:	f04f 0300 	mov.w	r3, #0
 8002c1e:	82fb      	strh	r3, [r7, #22]
  uint16_t tmpccmr1 = 0;
 8002c20:	f04f 0300 	mov.w	r3, #0
 8002c24:	82bb      	strh	r3, [r7, #20]
  uint16_t tmpccer = 0;
 8002c26:	f04f 0300 	mov.w	r3, #0
 8002c2a:	827b      	strh	r3, [r7, #18]
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	891b      	ldrh	r3, [r3, #8]
 8002c30:	82fb      	strh	r3, [r7, #22]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	8b1b      	ldrh	r3, [r3, #24]
 8002c36:	82bb      	strh	r3, [r7, #20]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	8c1b      	ldrh	r3, [r3, #32]
 8002c3c:	827b      	strh	r3, [r7, #18]
  
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
 8002c3e:	8afb      	ldrh	r3, [r7, #22]
 8002c40:	f023 0307 	bic.w	r3, r3, #7
 8002c44:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_EncoderMode;
 8002c46:	8afa      	ldrh	r2, [r7, #22]
 8002c48:	897b      	ldrh	r3, [r7, #10]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	82fb      	strh	r3, [r7, #22]
  
  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S)));
 8002c4e:	8abb      	ldrh	r3, [r7, #20]
 8002c50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c54:	f023 0303 	bic.w	r3, r3, #3
 8002c58:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 8002c5a:	8abb      	ldrh	r3, [r7, #20]
 8002c5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c60:	f043 0301 	orr.w	r3, r3, #1
 8002c64:	82bb      	strh	r3, [r7, #20]
  
  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCER_CC1P)) & ((uint16_t)~((uint16_t)TIM_CCER_CC2P)));
 8002c66:	8a7b      	ldrh	r3, [r7, #18]
 8002c68:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002c6c:	827b      	strh	r3, [r7, #18]
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 8002c6e:	88fb      	ldrh	r3, [r7, #6]
 8002c70:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002c74:	b29a      	uxth	r2, r3
 8002c76:	893b      	ldrh	r3, [r7, #8]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	b29a      	uxth	r2, r3
 8002c7c:	8a7b      	ldrh	r3, [r7, #18]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	827b      	strh	r3, [r7, #18]
  
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	8afa      	ldrh	r2, [r7, #22]
 8002c86:	811a      	strh	r2, [r3, #8]
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	8aba      	ldrh	r2, [r7, #20]
 8002c8c:	831a      	strh	r2, [r3, #24]
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	8a7a      	ldrh	r2, [r7, #18]
 8002c92:	841a      	strh	r2, [r3, #32]
}
 8002c94:	f107 071c 	add.w	r7, r7, #28
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bc80      	pop	{r7}
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop

08002ca0 <TIM_ForcedOC1Config>:
  *     @arg TIM_ForcedAction_Active: Force active level on OC1REF
  *     @arg TIM_ForcedAction_InActive: Force inactive level on OC1REF.
  * @retval None
  */
void TIM_ForcedOC1Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b085      	sub	sp, #20
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	460b      	mov	r3, r1
 8002caa:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8002cac:	f04f 0300 	mov.w	r3, #0
 8002cb0:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	8b1b      	ldrh	r3, [r3, #24]
 8002cb6:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1M Bits */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1M);
 8002cb8:	89fb      	ldrh	r3, [r7, #14]
 8002cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cbe:	81fb      	strh	r3, [r7, #14]
  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
 8002cc0:	89fa      	ldrh	r2, [r7, #14]
 8002cc2:	887b      	ldrh	r3, [r7, #2]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	89fa      	ldrh	r2, [r7, #14]
 8002ccc:	831a      	strh	r2, [r3, #24]
}
 8002cce:	f107 0714 	add.w	r7, r7, #20
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bc80      	pop	{r7}
 8002cd6:	4770      	bx	lr

08002cd8 <TIM_ForcedOC2Config>:
  *     @arg TIM_ForcedAction_Active: Force active level on OC2REF
  *     @arg TIM_ForcedAction_InActive: Force inactive level on OC2REF.
  * @retval None
  */
void TIM_ForcedOC2Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b085      	sub	sp, #20
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8002ce4:	f04f 0300 	mov.w	r3, #0
 8002ce8:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	8b1b      	ldrh	r3, [r3, #24]
 8002cee:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2M Bits */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2M);
 8002cf0:	89fb      	ldrh	r3, [r7, #14]
 8002cf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cf6:	81fb      	strh	r3, [r7, #14]
  /* Configure The Forced output Mode */
  tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
 8002cf8:	887b      	ldrh	r3, [r7, #2]
 8002cfa:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8002cfe:	b29a      	uxth	r2, r3
 8002d00:	89fb      	ldrh	r3, [r7, #14]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	89fa      	ldrh	r2, [r7, #14]
 8002d0a:	831a      	strh	r2, [r3, #24]
}
 8002d0c:	f107 0714 	add.w	r7, r7, #20
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bc80      	pop	{r7}
 8002d14:	4770      	bx	lr
 8002d16:	bf00      	nop

08002d18 <TIM_ForcedOC3Config>:
  *     @arg TIM_ForcedAction_Active: Force active level on OC3REF
  *     @arg TIM_ForcedAction_InActive: Force inactive level on OC3REF.
  * @retval None
  */
void TIM_ForcedOC3Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b085      	sub	sp, #20
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	460b      	mov	r3, r1
 8002d22:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8002d24:	f04f 0300 	mov.w	r3, #0
 8002d28:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	8b9b      	ldrh	r3, [r3, #28]
 8002d2e:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1M Bits */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3M);
 8002d30:	89fb      	ldrh	r3, [r7, #14]
 8002d32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d36:	81fb      	strh	r3, [r7, #14]
  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
 8002d38:	89fa      	ldrh	r2, [r7, #14]
 8002d3a:	887b      	ldrh	r3, [r7, #2]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	89fa      	ldrh	r2, [r7, #14]
 8002d44:	839a      	strh	r2, [r3, #28]
}
 8002d46:	f107 0714 	add.w	r7, r7, #20
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bc80      	pop	{r7}
 8002d4e:	4770      	bx	lr

08002d50 <TIM_ForcedOC4Config>:
  *     @arg TIM_ForcedAction_Active: Force active level on OC4REF
  *     @arg TIM_ForcedAction_InActive: Force inactive level on OC4REF.
  * @retval None
  */
void TIM_ForcedOC4Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b085      	sub	sp, #20
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	460b      	mov	r3, r1
 8002d5a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8002d5c:	f04f 0300 	mov.w	r3, #0
 8002d60:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	8b9b      	ldrh	r3, [r3, #28]
 8002d66:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2M Bits */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4M);
 8002d68:	89fb      	ldrh	r3, [r7, #14]
 8002d6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d6e:	81fb      	strh	r3, [r7, #14]
  /* Configure The Forced output Mode */
  tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
 8002d70:	887b      	ldrh	r3, [r7, #2]
 8002d72:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8002d76:	b29a      	uxth	r2, r3
 8002d78:	89fb      	ldrh	r3, [r7, #14]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	89fa      	ldrh	r2, [r7, #14]
 8002d82:	839a      	strh	r2, [r3, #28]
}
 8002d84:	f107 0714 	add.w	r7, r7, #20
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bc80      	pop	{r7}
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop

08002d90 <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	460b      	mov	r3, r1
 8002d9a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002d9c:	78fb      	ldrb	r3, [r7, #3]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d008      	beq.n	8002db4 <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	881b      	ldrh	r3, [r3, #0]
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dac:	b29a      	uxth	r2, r3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	801a      	strh	r2, [r3, #0]
 8002db2:	e007      	b.n	8002dc4 <TIM_ARRPreloadConfig+0x34>
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_ARPE);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	881b      	ldrh	r3, [r3, #0]
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002dbe:	b29a      	uxth	r2, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	801a      	strh	r2, [r3, #0]
  }
}
 8002dc4:	f107 070c 	add.w	r7, r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bc80      	pop	{r7}
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop

08002dd0 <TIM_SelectCOM>:
  * @param  NewState: new state of the Commutation event.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCOM(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	460b      	mov	r3, r1
 8002dda:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002ddc:	78fb      	ldrb	r3, [r7, #3]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d008      	beq.n	8002df4 <TIM_SelectCOM+0x24>
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	889b      	ldrh	r3, [r3, #4]
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	f043 0304 	orr.w	r3, r3, #4
 8002dec:	b29a      	uxth	r2, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	809a      	strh	r2, [r3, #4]
 8002df2:	e007      	b.n	8002e04 <TIM_SelectCOM+0x34>
  }
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCUS);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	889b      	ldrh	r3, [r3, #4]
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	f023 0304 	bic.w	r3, r3, #4
 8002dfe:	b29a      	uxth	r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	809a      	strh	r2, [r3, #4]
  }
}
 8002e04:	f107 070c 	add.w	r7, r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bc80      	pop	{r7}
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop

08002e10 <TIM_SelectCCDMA>:
  * @param  NewState: new state of the Capture Compare DMA source
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCCDMA(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	460b      	mov	r3, r1
 8002e1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002e1c:	78fb      	ldrb	r3, [r7, #3]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d008      	beq.n	8002e34 <TIM_SelectCCDMA+0x24>
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	889b      	ldrh	r3, [r3, #4]
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	f043 0308 	orr.w	r3, r3, #8
 8002e2c:	b29a      	uxth	r2, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	809a      	strh	r2, [r3, #4]
 8002e32:	e007      	b.n	8002e44 <TIM_SelectCCDMA+0x34>
  }
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCDS);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	889b      	ldrh	r3, [r3, #4]
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	f023 0308 	bic.w	r3, r3, #8
 8002e3e:	b29a      	uxth	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	809a      	strh	r2, [r3, #4]
  }
}
 8002e44:	f107 070c 	add.w	r7, r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bc80      	pop	{r7}
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop

08002e50 <TIM_CCPreloadControl>:
  * @param  NewState: new state of the Capture Compare Preload Control bit
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	460b      	mov	r3, r1
 8002e5a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002e5c:	78fb      	ldrb	r3, [r7, #3]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d008      	beq.n	8002e74 <TIM_CCPreloadControl+0x24>
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	889b      	ldrh	r3, [r3, #4]
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	f043 0301 	orr.w	r3, r3, #1
 8002e6c:	b29a      	uxth	r2, r3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	809a      	strh	r2, [r3, #4]
 8002e72:	e007      	b.n	8002e84 <TIM_CCPreloadControl+0x34>
  }
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCPC);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	889b      	ldrh	r3, [r3, #4]
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	f023 0301 	bic.w	r3, r3, #1
 8002e7e:	b29a      	uxth	r2, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	809a      	strh	r2, [r3, #4]
  }
}
 8002e84:	f107 070c 	add.w	r7, r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bc80      	pop	{r7}
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop

08002e90 <TIM_OC1PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b085      	sub	sp, #20
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	460b      	mov	r3, r1
 8002e9a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8002e9c:	f04f 0300 	mov.w	r3, #0
 8002ea0:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr1 = TIMx->CCMR1;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	8b1b      	ldrh	r3, [r3, #24]
 8002ea6:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1PE);
 8002ea8:	89fb      	ldrh	r3, [r7, #14]
 8002eaa:	f023 0308 	bic.w	r3, r3, #8
 8002eae:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 8002eb0:	89fa      	ldrh	r2, [r7, #14]
 8002eb2:	887b      	ldrh	r3, [r7, #2]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	89fa      	ldrh	r2, [r7, #14]
 8002ebc:	831a      	strh	r2, [r3, #24]
}
 8002ebe:	f107 0714 	add.w	r7, r7, #20
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bc80      	pop	{r7}
 8002ec6:	4770      	bx	lr

08002ec8 <TIM_OC2PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b085      	sub	sp, #20
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8002ed4:	f04f 0300 	mov.w	r3, #0
 8002ed8:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr1 = TIMx->CCMR1;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	8b1b      	ldrh	r3, [r3, #24]
 8002ede:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2PE);
 8002ee0:	89fb      	ldrh	r3, [r7, #14]
 8002ee2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ee6:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 8002ee8:	887b      	ldrh	r3, [r7, #2]
 8002eea:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8002eee:	b29a      	uxth	r2, r3
 8002ef0:	89fb      	ldrh	r3, [r7, #14]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	89fa      	ldrh	r2, [r7, #14]
 8002efa:	831a      	strh	r2, [r3, #24]
}
 8002efc:	f107 0714 	add.w	r7, r7, #20
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bc80      	pop	{r7}
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop

08002f08 <TIM_OC3PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b085      	sub	sp, #20
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	460b      	mov	r3, r1
 8002f12:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8002f14:	f04f 0300 	mov.w	r3, #0
 8002f18:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr2 = TIMx->CCMR2;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	8b9b      	ldrh	r3, [r3, #28]
 8002f1e:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3PE);
 8002f20:	89fb      	ldrh	r3, [r7, #14]
 8002f22:	f023 0308 	bic.w	r3, r3, #8
 8002f26:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 8002f28:	89fa      	ldrh	r2, [r7, #14]
 8002f2a:	887b      	ldrh	r3, [r7, #2]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	89fa      	ldrh	r2, [r7, #14]
 8002f34:	839a      	strh	r2, [r3, #28]
}
 8002f36:	f107 0714 	add.w	r7, r7, #20
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bc80      	pop	{r7}
 8002f3e:	4770      	bx	lr

08002f40 <TIM_OC4PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b085      	sub	sp, #20
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	460b      	mov	r3, r1
 8002f4a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8002f4c:	f04f 0300 	mov.w	r3, #0
 8002f50:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr2 = TIMx->CCMR2;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	8b9b      	ldrh	r3, [r3, #28]
 8002f56:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4PE);
 8002f58:	89fb      	ldrh	r3, [r7, #14]
 8002f5a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002f5e:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 8002f60:	887b      	ldrh	r3, [r7, #2]
 8002f62:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8002f66:	b29a      	uxth	r2, r3
 8002f68:	89fb      	ldrh	r3, [r7, #14]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	89fa      	ldrh	r2, [r7, #14]
 8002f72:	839a      	strh	r2, [r3, #28]
}
 8002f74:	f107 0714 	add.w	r7, r7, #20
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bc80      	pop	{r7}
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop

08002f80 <TIM_OC1FastConfig>:
  *     @arg TIM_OCFast_Enable: TIM output compare fast enable
  *     @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC1FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b085      	sub	sp, #20
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	460b      	mov	r3, r1
 8002f8a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8002f8c:	f04f 0300 	mov.w	r3, #0
 8002f90:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	8b1b      	ldrh	r3, [r3, #24]
 8002f96:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1FE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1FE);
 8002f98:	89fb      	ldrh	r3, [r7, #14]
 8002f9a:	f023 0304 	bic.w	r3, r3, #4
 8002f9e:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
 8002fa0:	89fa      	ldrh	r2, [r7, #14]
 8002fa2:	887b      	ldrh	r3, [r7, #2]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	89fa      	ldrh	r2, [r7, #14]
 8002fac:	831a      	strh	r2, [r3, #24]
}
 8002fae:	f107 0714 	add.w	r7, r7, #20
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bc80      	pop	{r7}
 8002fb6:	4770      	bx	lr

08002fb8 <TIM_OC2FastConfig>:
  *     @arg TIM_OCFast_Enable: TIM output compare fast enable
  *     @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC2FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b085      	sub	sp, #20
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8002fc4:	f04f 0300 	mov.w	r3, #0
 8002fc8:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	8b1b      	ldrh	r3, [r3, #24]
 8002fce:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2FE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2FE);
 8002fd0:	89fb      	ldrh	r3, [r7, #14]
 8002fd2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002fd6:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
 8002fd8:	887b      	ldrh	r3, [r7, #2]
 8002fda:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8002fde:	b29a      	uxth	r2, r3
 8002fe0:	89fb      	ldrh	r3, [r7, #14]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	89fa      	ldrh	r2, [r7, #14]
 8002fea:	831a      	strh	r2, [r3, #24]
}
 8002fec:	f107 0714 	add.w	r7, r7, #20
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bc80      	pop	{r7}
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop

08002ff8 <TIM_OC3FastConfig>:
  *     @arg TIM_OCFast_Enable: TIM output compare fast enable
  *     @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC3FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b085      	sub	sp, #20
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	460b      	mov	r3, r1
 8003002:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8003004:	f04f 0300 	mov.w	r3, #0
 8003008:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	8b9b      	ldrh	r3, [r3, #28]
 800300e:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC3FE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3FE);
 8003010:	89fb      	ldrh	r3, [r7, #14]
 8003012:	f023 0304 	bic.w	r3, r3, #4
 8003016:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
 8003018:	89fa      	ldrh	r2, [r7, #14]
 800301a:	887b      	ldrh	r3, [r7, #2]
 800301c:	4313      	orrs	r3, r2
 800301e:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	89fa      	ldrh	r2, [r7, #14]
 8003024:	839a      	strh	r2, [r3, #28]
}
 8003026:	f107 0714 	add.w	r7, r7, #20
 800302a:	46bd      	mov	sp, r7
 800302c:	bc80      	pop	{r7}
 800302e:	4770      	bx	lr

08003030 <TIM_OC4FastConfig>:
  *     @arg TIM_OCFast_Enable: TIM output compare fast enable
  *     @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC4FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 8003030:	b480      	push	{r7}
 8003032:	b085      	sub	sp, #20
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	460b      	mov	r3, r1
 800303a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800303c:	f04f 0300 	mov.w	r3, #0
 8003040:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	8b9b      	ldrh	r3, [r3, #28]
 8003046:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC4FE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4FE);
 8003048:	89fb      	ldrh	r3, [r7, #14]
 800304a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800304e:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
 8003050:	887b      	ldrh	r3, [r7, #2]
 8003052:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8003056:	b29a      	uxth	r2, r3
 8003058:	89fb      	ldrh	r3, [r7, #14]
 800305a:	4313      	orrs	r3, r2
 800305c:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	89fa      	ldrh	r2, [r7, #14]
 8003062:	839a      	strh	r2, [r3, #28]
}
 8003064:	f107 0714 	add.w	r7, r7, #20
 8003068:	46bd      	mov	sp, r7
 800306a:	bc80      	pop	{r7}
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop

08003070 <TIM_ClearOC1Ref>:
  *     @arg TIM_OCClear_Enable: TIM Output clear enable
  *     @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC1Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 8003070:	b480      	push	{r7}
 8003072:	b085      	sub	sp, #20
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	460b      	mov	r3, r1
 800307a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 800307c:	f04f 0300 	mov.w	r3, #0
 8003080:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	8b1b      	ldrh	r3, [r3, #24]
 8003086:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1CE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1CE);
 8003088:	89fb      	ldrh	r3, [r7, #14]
 800308a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800308e:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
 8003090:	89fa      	ldrh	r2, [r7, #14]
 8003092:	887b      	ldrh	r3, [r7, #2]
 8003094:	4313      	orrs	r3, r2
 8003096:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	89fa      	ldrh	r2, [r7, #14]
 800309c:	831a      	strh	r2, [r3, #24]
}
 800309e:	f107 0714 	add.w	r7, r7, #20
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bc80      	pop	{r7}
 80030a6:	4770      	bx	lr

080030a8 <TIM_ClearOC2Ref>:
  *     @arg TIM_OCClear_Enable: TIM Output clear enable
  *     @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC2Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b085      	sub	sp, #20
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	460b      	mov	r3, r1
 80030b2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 80030b4:	f04f 0300 	mov.w	r3, #0
 80030b8:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  tmpccmr1 = TIMx->CCMR1;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	8b1b      	ldrh	r3, [r3, #24]
 80030be:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2CE);
 80030c0:	89fb      	ldrh	r3, [r7, #14]
 80030c2:	ea4f 4343 	mov.w	r3, r3, lsl #17
 80030c6:	ea4f 4353 	mov.w	r3, r3, lsr #17
 80030ca:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
 80030cc:	887b      	ldrh	r3, [r7, #2]
 80030ce:	ea4f 2303 	mov.w	r3, r3, lsl #8
 80030d2:	b29a      	uxth	r2, r3
 80030d4:	89fb      	ldrh	r3, [r7, #14]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	89fa      	ldrh	r2, [r7, #14]
 80030de:	831a      	strh	r2, [r3, #24]
}
 80030e0:	f107 0714 	add.w	r7, r7, #20
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bc80      	pop	{r7}
 80030e8:	4770      	bx	lr
 80030ea:	bf00      	nop

080030ec <TIM_ClearOC3Ref>:
  *     @arg TIM_OCClear_Enable: TIM Output clear enable
  *     @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC3Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b085      	sub	sp, #20
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	460b      	mov	r3, r1
 80030f6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 80030f8:	f04f 0300 	mov.w	r3, #0
 80030fc:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  tmpccmr2 = TIMx->CCMR2;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	8b9b      	ldrh	r3, [r3, #28]
 8003102:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC3CE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3CE);
 8003104:	89fb      	ldrh	r3, [r7, #14]
 8003106:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800310a:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
 800310c:	89fa      	ldrh	r2, [r7, #14]
 800310e:	887b      	ldrh	r3, [r7, #2]
 8003110:	4313      	orrs	r3, r2
 8003112:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	89fa      	ldrh	r2, [r7, #14]
 8003118:	839a      	strh	r2, [r3, #28]
}
 800311a:	f107 0714 	add.w	r7, r7, #20
 800311e:	46bd      	mov	sp, r7
 8003120:	bc80      	pop	{r7}
 8003122:	4770      	bx	lr

08003124 <TIM_ClearOC4Ref>:
  *     @arg TIM_OCClear_Enable: TIM Output clear enable
  *     @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC4Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 8003124:	b480      	push	{r7}
 8003126:	b085      	sub	sp, #20
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	460b      	mov	r3, r1
 800312e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8003130:	f04f 0300 	mov.w	r3, #0
 8003134:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  tmpccmr2 = TIMx->CCMR2;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	8b9b      	ldrh	r3, [r3, #28]
 800313a:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4CE);
 800313c:	89fb      	ldrh	r3, [r7, #14]
 800313e:	ea4f 4343 	mov.w	r3, r3, lsl #17
 8003142:	ea4f 4353 	mov.w	r3, r3, lsr #17
 8003146:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
 8003148:	887b      	ldrh	r3, [r7, #2]
 800314a:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800314e:	b29a      	uxth	r2, r3
 8003150:	89fb      	ldrh	r3, [r7, #14]
 8003152:	4313      	orrs	r3, r2
 8003154:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	89fa      	ldrh	r2, [r7, #14]
 800315a:	839a      	strh	r2, [r3, #28]
}
 800315c:	f107 0714 	add.w	r7, r7, #20
 8003160:	46bd      	mov	sp, r7
 8003162:	bc80      	pop	{r7}
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop

08003168 <TIM_OC1PolarityConfig>:
  *     @arg TIM_OCPolarity_High: Output Compare active high
  *     @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 8003168:	b480      	push	{r7}
 800316a:	b085      	sub	sp, #20
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	460b      	mov	r3, r1
 8003172:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 8003174:	f04f 0300 	mov.w	r3, #0
 8003178:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	8c1b      	ldrh	r3, [r3, #32]
 800317e:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC1P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC1P);
 8003180:	89fb      	ldrh	r3, [r7, #14]
 8003182:	f023 0302 	bic.w	r3, r3, #2
 8003186:	81fb      	strh	r3, [r7, #14]
  tmpccer |= TIM_OCPolarity;
 8003188:	89fa      	ldrh	r2, [r7, #14]
 800318a:	887b      	ldrh	r3, [r7, #2]
 800318c:	4313      	orrs	r3, r2
 800318e:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	89fa      	ldrh	r2, [r7, #14]
 8003194:	841a      	strh	r2, [r3, #32]
}
 8003196:	f107 0714 	add.w	r7, r7, #20
 800319a:	46bd      	mov	sp, r7
 800319c:	bc80      	pop	{r7}
 800319e:	4770      	bx	lr

080031a0 <TIM_OC1NPolarityConfig>:
  *     @arg TIM_OCNPolarity_High: Output Compare active high
  *     @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b085      	sub	sp, #20
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	460b      	mov	r3, r1
 80031aa:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 80031ac:	f04f 0300 	mov.w	r3, #0
 80031b0:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	8c1b      	ldrh	r3, [r3, #32]
 80031b6:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC1NP Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC1NP);
 80031b8:	89fb      	ldrh	r3, [r7, #14]
 80031ba:	f023 0308 	bic.w	r3, r3, #8
 80031be:	81fb      	strh	r3, [r7, #14]
  tmpccer |= TIM_OCNPolarity;
 80031c0:	89fa      	ldrh	r2, [r7, #14]
 80031c2:	887b      	ldrh	r3, [r7, #2]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	89fa      	ldrh	r2, [r7, #14]
 80031cc:	841a      	strh	r2, [r3, #32]
}
 80031ce:	f107 0714 	add.w	r7, r7, #20
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bc80      	pop	{r7}
 80031d6:	4770      	bx	lr

080031d8 <TIM_OC2PolarityConfig>:
  *     @arg TIM_OCPolarity_High: Output Compare active high
  *     @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 80031d8:	b480      	push	{r7}
 80031da:	b085      	sub	sp, #20
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	460b      	mov	r3, r1
 80031e2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 80031e4:	f04f 0300 	mov.w	r3, #0
 80031e8:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	8c1b      	ldrh	r3, [r3, #32]
 80031ee:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC2P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC2P);
 80031f0:	89fb      	ldrh	r3, [r7, #14]
 80031f2:	f023 0320 	bic.w	r3, r3, #32
 80031f6:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
 80031f8:	887b      	ldrh	r3, [r7, #2]
 80031fa:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80031fe:	b29a      	uxth	r2, r3
 8003200:	89fb      	ldrh	r3, [r7, #14]
 8003202:	4313      	orrs	r3, r2
 8003204:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	89fa      	ldrh	r2, [r7, #14]
 800320a:	841a      	strh	r2, [r3, #32]
}
 800320c:	f107 0714 	add.w	r7, r7, #20
 8003210:	46bd      	mov	sp, r7
 8003212:	bc80      	pop	{r7}
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop

08003218 <TIM_OC2NPolarityConfig>:
  *     @arg TIM_OCNPolarity_High: Output Compare active high
  *     @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 8003218:	b480      	push	{r7}
 800321a:	b085      	sub	sp, #20
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	460b      	mov	r3, r1
 8003222:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 8003224:	f04f 0300 	mov.w	r3, #0
 8003228:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	8c1b      	ldrh	r3, [r3, #32]
 800322e:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC2NP Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC2NP);
 8003230:	89fb      	ldrh	r3, [r7, #14]
 8003232:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003236:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
 8003238:	887b      	ldrh	r3, [r7, #2]
 800323a:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800323e:	b29a      	uxth	r2, r3
 8003240:	89fb      	ldrh	r3, [r7, #14]
 8003242:	4313      	orrs	r3, r2
 8003244:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	89fa      	ldrh	r2, [r7, #14]
 800324a:	841a      	strh	r2, [r3, #32]
}
 800324c:	f107 0714 	add.w	r7, r7, #20
 8003250:	46bd      	mov	sp, r7
 8003252:	bc80      	pop	{r7}
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop

08003258 <TIM_OC3PolarityConfig>:
  *     @arg TIM_OCPolarity_High: Output Compare active high
  *     @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 8003258:	b480      	push	{r7}
 800325a:	b085      	sub	sp, #20
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	460b      	mov	r3, r1
 8003262:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 8003264:	f04f 0300 	mov.w	r3, #0
 8003268:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	8c1b      	ldrh	r3, [r3, #32]
 800326e:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC3P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC3P);
 8003270:	89fb      	ldrh	r3, [r7, #14]
 8003272:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003276:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
 8003278:	887b      	ldrh	r3, [r7, #2]
 800327a:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800327e:	b29a      	uxth	r2, r3
 8003280:	89fb      	ldrh	r3, [r7, #14]
 8003282:	4313      	orrs	r3, r2
 8003284:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	89fa      	ldrh	r2, [r7, #14]
 800328a:	841a      	strh	r2, [r3, #32]
}
 800328c:	f107 0714 	add.w	r7, r7, #20
 8003290:	46bd      	mov	sp, r7
 8003292:	bc80      	pop	{r7}
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop

08003298 <TIM_OC3NPolarityConfig>:
  *     @arg TIM_OCNPolarity_High: Output Compare active high
  *     @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 8003298:	b480      	push	{r7}
 800329a:	b085      	sub	sp, #20
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	460b      	mov	r3, r1
 80032a2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 80032a4:	f04f 0300 	mov.w	r3, #0
 80032a8:	81fb      	strh	r3, [r7, #14]
 
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	8c1b      	ldrh	r3, [r3, #32]
 80032ae:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC3NP Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC3NP);
 80032b0:	89fb      	ldrh	r3, [r7, #14]
 80032b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80032b6:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
 80032b8:	887b      	ldrh	r3, [r7, #2]
 80032ba:	ea4f 2303 	mov.w	r3, r3, lsl #8
 80032be:	b29a      	uxth	r2, r3
 80032c0:	89fb      	ldrh	r3, [r7, #14]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	89fa      	ldrh	r2, [r7, #14]
 80032ca:	841a      	strh	r2, [r3, #32]
}
 80032cc:	f107 0714 	add.w	r7, r7, #20
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bc80      	pop	{r7}
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop

080032d8 <TIM_OC4PolarityConfig>:
  *     @arg TIM_OCPolarity_High: Output Compare active high
  *     @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC4PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 80032d8:	b480      	push	{r7}
 80032da:	b085      	sub	sp, #20
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	460b      	mov	r3, r1
 80032e2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 80032e4:	f04f 0300 	mov.w	r3, #0
 80032e8:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	8c1b      	ldrh	r3, [r3, #32]
 80032ee:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC4P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC4P);
 80032f0:	89fb      	ldrh	r3, [r7, #14]
 80032f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80032f6:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
 80032f8:	887b      	ldrh	r3, [r7, #2]
 80032fa:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80032fe:	b29a      	uxth	r2, r3
 8003300:	89fb      	ldrh	r3, [r7, #14]
 8003302:	4313      	orrs	r3, r2
 8003304:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	89fa      	ldrh	r2, [r7, #14]
 800330a:	841a      	strh	r2, [r3, #32]
}
 800330c:	f107 0714 	add.w	r7, r7, #20
 8003310:	46bd      	mov	sp, r7
 8003312:	bc80      	pop	{r7}
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop

08003318 <TIM_CCxCmd>:
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *   This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
 8003318:	b480      	push	{r7}
 800331a:	b085      	sub	sp, #20
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	4613      	mov	r3, r2
 8003322:	460a      	mov	r2, r1
 8003324:	807a      	strh	r2, [r7, #2]
 8003326:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
 8003328:	f04f 0300 	mov.w	r3, #0
 800332c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_Set << TIM_Channel;
 800332e:	887b      	ldrh	r3, [r7, #2]
 8003330:	f04f 0201 	mov.w	r2, #1
 8003334:	fa02 f303 	lsl.w	r3, r2, r3
 8003338:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	8c1b      	ldrh	r3, [r3, #32]
 800333e:	b29a      	uxth	r2, r3
 8003340:	89fb      	ldrh	r3, [r7, #14]
 8003342:	ea6f 0303 	mvn.w	r3, r3
 8003346:	b29b      	uxth	r3, r3
 8003348:	4013      	ands	r3, r2
 800334a:	b29a      	uxth	r2, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	841a      	strh	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	8c1b      	ldrh	r3, [r3, #32]
 8003354:	b29a      	uxth	r2, r3
 8003356:	8839      	ldrh	r1, [r7, #0]
 8003358:	887b      	ldrh	r3, [r7, #2]
 800335a:	fa01 f303 	lsl.w	r3, r1, r3
 800335e:	b29b      	uxth	r3, r3
 8003360:	4313      	orrs	r3, r2
 8003362:	b29a      	uxth	r2, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	841a      	strh	r2, [r3, #32]
}
 8003368:	f107 0714 	add.w	r7, r7, #20
 800336c:	46bd      	mov	sp, r7
 800336e:	bc80      	pop	{r7}
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop

08003374 <TIM_CCxNCmd>:
  * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
  *   This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
  * @retval None
  */
void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
{
 8003374:	b480      	push	{r7}
 8003376:	b085      	sub	sp, #20
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	4613      	mov	r3, r2
 800337e:	460a      	mov	r2, r1
 8003380:	807a      	strh	r2, [r7, #2]
 8003382:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
 8003384:	f04f 0300 	mov.w	r3, #0
 8003388:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_Set << TIM_Channel;
 800338a:	887b      	ldrh	r3, [r7, #2]
 800338c:	f04f 0204 	mov.w	r2, #4
 8003390:	fa02 f303 	lsl.w	r3, r2, r3
 8003394:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	8c1b      	ldrh	r3, [r3, #32]
 800339a:	b29a      	uxth	r2, r3
 800339c:	89fb      	ldrh	r3, [r7, #14]
 800339e:	ea6f 0303 	mvn.w	r3, r3
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	4013      	ands	r3, r2
 80033a6:	b29a      	uxth	r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	841a      	strh	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	8c1b      	ldrh	r3, [r3, #32]
 80033b0:	b29a      	uxth	r2, r3
 80033b2:	8839      	ldrh	r1, [r7, #0]
 80033b4:	887b      	ldrh	r3, [r7, #2]
 80033b6:	fa01 f303 	lsl.w	r3, r1, r3
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	4313      	orrs	r3, r2
 80033be:	b29a      	uxth	r2, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	841a      	strh	r2, [r3, #32]
}
 80033c4:	f107 0714 	add.w	r7, r7, #20
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bc80      	pop	{r7}
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop

080033d0 <TIM_SelectOCxM>:
  *     @arg TIM_ForcedAction_Active
  *     @arg TIM_ForcedAction_InActive
  * @retval None
  */
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b085      	sub	sp, #20
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	4613      	mov	r3, r2
 80033da:	460a      	mov	r2, r1
 80033dc:	807a      	strh	r2, [r7, #2]
 80033de:	803b      	strh	r3, [r7, #0]
  uint32_t tmp = 0;
 80033e0:	f04f 0300 	mov.w	r3, #0
 80033e4:	60fb      	str	r3, [r7, #12]
  uint16_t tmp1 = 0;
 80033e6:	f04f 0300 	mov.w	r3, #0
 80033ea:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	60fb      	str	r3, [r7, #12]
  tmp += CCMR_Offset;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f103 0318 	add.w	r3, r3, #24
 80033f6:	60fb      	str	r3, [r7, #12]

  tmp1 = CCER_CCE_Set << (uint16_t)TIM_Channel;
 80033f8:	887b      	ldrh	r3, [r7, #2]
 80033fa:	f04f 0201 	mov.w	r2, #1
 80033fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003402:	817b      	strh	r3, [r7, #10]

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	8c1b      	ldrh	r3, [r3, #32]
 8003408:	b29a      	uxth	r2, r3
 800340a:	897b      	ldrh	r3, [r7, #10]
 800340c:	ea6f 0303 	mvn.w	r3, r3
 8003410:	b29b      	uxth	r3, r3
 8003412:	4013      	ands	r3, r2
 8003414:	b29a      	uxth	r2, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	841a      	strh	r2, [r3, #32]

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 800341a:	887b      	ldrh	r3, [r7, #2]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d002      	beq.n	8003426 <TIM_SelectOCxM+0x56>
 8003420:	887b      	ldrh	r3, [r7, #2]
 8003422:	2b08      	cmp	r3, #8
 8003424:	d113      	bne.n	800344e <TIM_SelectOCxM+0x7e>
  {
    tmp += (TIM_Channel>>1);
 8003426:	887b      	ldrh	r3, [r7, #2]
 8003428:	ea4f 0353 	mov.w	r3, r3, lsr #1
 800342c:	b29b      	uxth	r3, r3
 800342e:	68fa      	ldr	r2, [r7, #12]
 8003430:	18d3      	adds	r3, r2, r3
 8003432:	60fb      	str	r3, [r7, #12]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC1M);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	6812      	ldr	r2, [r2, #0]
 800343a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800343e:	601a      	str	r2, [r3, #0]
   
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	68fa      	ldr	r2, [r7, #12]
 8003444:	6811      	ldr	r1, [r2, #0]
 8003446:	883a      	ldrh	r2, [r7, #0]
 8003448:	430a      	orrs	r2, r1
 800344a:	601a      	str	r2, [r3, #0]
 800344c:	e018      	b.n	8003480 <TIM_SelectOCxM+0xb0>
  }
  else
  {
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
 800344e:	887b      	ldrh	r3, [r7, #2]
 8003450:	f1a3 0304 	sub.w	r3, r3, #4
 8003454:	b29b      	uxth	r3, r3
 8003456:	ea4f 0353 	mov.w	r3, r3, lsr #1
 800345a:	b29b      	uxth	r3, r3
 800345c:	68fa      	ldr	r2, [r7, #12]
 800345e:	18d3      	adds	r3, r2, r3
 8003460:	60fb      	str	r3, [r7, #12]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC2M);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	68fa      	ldr	r2, [r7, #12]
 8003466:	6812      	ldr	r2, [r2, #0]
 8003468:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800346c:	601a      	str	r2, [r3, #0]
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	68fa      	ldr	r2, [r7, #12]
 8003472:	6811      	ldr	r1, [r2, #0]
 8003474:	883a      	ldrh	r2, [r7, #0]
 8003476:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800347a:	b292      	uxth	r2, r2
 800347c:	430a      	orrs	r2, r1
 800347e:	601a      	str	r2, [r3, #0]
  }
}
 8003480:	f107 0714 	add.w	r7, r7, #20
 8003484:	46bd      	mov	sp, r7
 8003486:	bc80      	pop	{r7}
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop

0800348c <TIM_UpdateDisableConfig>:
  * @param  NewState: new state of the TIMx UDIS bit
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_UpdateDisableConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	460b      	mov	r3, r1
 8003496:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003498:	78fb      	ldrb	r3, [r7, #3]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d008      	beq.n	80034b0 <TIM_UpdateDisableConfig+0x24>
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	881b      	ldrh	r3, [r3, #0]
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	f043 0302 	orr.w	r3, r3, #2
 80034a8:	b29a      	uxth	r2, r3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	801a      	strh	r2, [r3, #0]
 80034ae:	e007      	b.n	80034c0 <TIM_UpdateDisableConfig+0x34>
  }
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_UDIS);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	881b      	ldrh	r3, [r3, #0]
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	f023 0302 	bic.w	r3, r3, #2
 80034ba:	b29a      	uxth	r2, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	801a      	strh	r2, [r3, #0]
  }
}
 80034c0:	f107 070c 	add.w	r7, r7, #12
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bc80      	pop	{r7}
 80034c8:	4770      	bx	lr
 80034ca:	bf00      	nop

080034cc <TIM_UpdateRequestConfig>:
                                       through the slave mode controller.
  *     @arg TIM_UpdateSource_Global: Source of update is counter overflow/underflow.
  * @retval None
  */
void TIM_UpdateRequestConfig(TIM_TypeDef* TIMx, uint16_t TIM_UpdateSource)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	460b      	mov	r3, r1
 80034d6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));
  if (TIM_UpdateSource != TIM_UpdateSource_Global)
 80034d8:	887b      	ldrh	r3, [r7, #2]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d008      	beq.n	80034f0 <TIM_UpdateRequestConfig+0x24>
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	881b      	ldrh	r3, [r3, #0]
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	f043 0304 	orr.w	r3, r3, #4
 80034e8:	b29a      	uxth	r2, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	801a      	strh	r2, [r3, #0]
 80034ee:	e007      	b.n	8003500 <TIM_UpdateRequestConfig+0x34>
  }
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_URS);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	881b      	ldrh	r3, [r3, #0]
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	f023 0304 	bic.w	r3, r3, #4
 80034fa:	b29a      	uxth	r2, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	801a      	strh	r2, [r3, #0]
  }
}
 8003500:	f107 070c 	add.w	r7, r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	bc80      	pop	{r7}
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop

0800350c <TIM_SelectHallSensor>:
  * @param  NewState: new state of the TIMx Hall sensor interface.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectHallSensor(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	460b      	mov	r3, r1
 8003516:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003518:	78fb      	ldrb	r3, [r7, #3]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d008      	beq.n	8003530 <TIM_SelectHallSensor+0x24>
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	889b      	ldrh	r3, [r3, #4]
 8003522:	b29b      	uxth	r3, r3
 8003524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003528:	b29a      	uxth	r2, r3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	809a      	strh	r2, [r3, #4]
 800352e:	e007      	b.n	8003540 <TIM_SelectHallSensor+0x34>
  }
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_TI1S);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	889b      	ldrh	r3, [r3, #4]
 8003534:	b29b      	uxth	r3, r3
 8003536:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800353a:	b29a      	uxth	r2, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	809a      	strh	r2, [r3, #4]
  }
}
 8003540:	f107 070c 	add.w	r7, r7, #12
 8003544:	46bd      	mov	sp, r7
 8003546:	bc80      	pop	{r7}
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop

0800354c <TIM_SelectOnePulseMode>:
  *     @arg TIM_OPMode_Single
  *     @arg TIM_OPMode_Repetitive
  * @retval None
  */
void TIM_SelectOnePulseMode(TIM_TypeDef* TIMx, uint16_t TIM_OPMode)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	460b      	mov	r3, r1
 8003556:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));
  /* Reset the OPM Bit */
  TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_OPM);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	881b      	ldrh	r3, [r3, #0]
 800355c:	b29b      	uxth	r3, r3
 800355e:	f023 0308 	bic.w	r3, r3, #8
 8003562:	b29a      	uxth	r2, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	801a      	strh	r2, [r3, #0]
  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	881b      	ldrh	r3, [r3, #0]
 800356c:	b29a      	uxth	r2, r3
 800356e:	887b      	ldrh	r3, [r7, #2]
 8003570:	4313      	orrs	r3, r2
 8003572:	b29a      	uxth	r2, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	801a      	strh	r2, [r3, #0]
}
 8003578:	f107 070c 	add.w	r7, r7, #12
 800357c:	46bd      	mov	sp, r7
 800357e:	bc80      	pop	{r7}
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop

08003584 <TIM_SelectOutputTrigger>:
  *     @arg TIM_TRGOSource_OC4Ref: OC4REF signal is used as the trigger output (TRGO).
  *
  * @retval None
  */
void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
{
 8003584:	b480      	push	{r7}
 8003586:	b083      	sub	sp, #12
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	460b      	mov	r3, r1
 800358e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST7_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));
  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_MMS);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	889b      	ldrh	r3, [r3, #4]
 8003594:	b29b      	uxth	r3, r3
 8003596:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800359a:	b29a      	uxth	r2, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	809a      	strh	r2, [r3, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	889b      	ldrh	r3, [r3, #4]
 80035a4:	b29a      	uxth	r2, r3
 80035a6:	887b      	ldrh	r3, [r7, #2]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	b29a      	uxth	r2, r3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	809a      	strh	r2, [r3, #4]
}
 80035b0:	f107 070c 	add.w	r7, r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bc80      	pop	{r7}
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop

080035bc <TIM_SelectSlaveMode>:
  *     @arg TIM_SlaveMode_Trigger:   The counter starts at a rising edge of the trigger TRGI.
  *     @arg TIM_SlaveMode_External1: Rising edges of the selected trigger (TRGI) clock the counter.
  * @retval None
  */
void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_SlaveMode)
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	460b      	mov	r3, r1
 80035c6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));
 /* Reset the SMS Bits */
  TIMx->SMCR &= (uint16_t)~((uint16_t)TIM_SMCR_SMS);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	891b      	ldrh	r3, [r3, #8]
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	f023 0307 	bic.w	r3, r3, #7
 80035d2:	b29a      	uxth	r2, r3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	811a      	strh	r2, [r3, #8]
  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	891b      	ldrh	r3, [r3, #8]
 80035dc:	b29a      	uxth	r2, r3
 80035de:	887b      	ldrh	r3, [r7, #2]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	b29a      	uxth	r2, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	811a      	strh	r2, [r3, #8]
}
 80035e8:	f107 070c 	add.w	r7, r7, #12
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bc80      	pop	{r7}
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop

080035f4 <TIM_SelectMasterSlaveMode>:
  *                                      and its slaves (through TRGO).
  *     @arg TIM_MasterSlaveMode_Disable: No action
  * @retval None
  */
void TIM_SelectMasterSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_MasterSlaveMode)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	460b      	mov	r3, r1
 80035fe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));
  /* Reset the MSM Bit */
  TIMx->SMCR &= (uint16_t)~((uint16_t)TIM_SMCR_MSM);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	891b      	ldrh	r3, [r3, #8]
 8003604:	b29b      	uxth	r3, r3
 8003606:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800360a:	b29a      	uxth	r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	811a      	strh	r2, [r3, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	891b      	ldrh	r3, [r3, #8]
 8003614:	b29a      	uxth	r2, r3
 8003616:	887b      	ldrh	r3, [r7, #2]
 8003618:	4313      	orrs	r3, r2
 800361a:	b29a      	uxth	r2, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	811a      	strh	r2, [r3, #8]
}
 8003620:	f107 070c 	add.w	r7, r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	bc80      	pop	{r7}
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop

0800362c <TIM_SetCounter>:
  * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
  * @param  Counter: specifies the Counter register new value.
  * @retval None
  */
void TIM_SetCounter(TIM_TypeDef* TIMx, uint16_t Counter)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	460b      	mov	r3, r1
 8003636:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	887a      	ldrh	r2, [r7, #2]
 800363c:	849a      	strh	r2, [r3, #36]	; 0x24
}
 800363e:	f107 070c 	add.w	r7, r7, #12
 8003642:	46bd      	mov	sp, r7
 8003644:	bc80      	pop	{r7}
 8003646:	4770      	bx	lr

08003648 <TIM_SetAutoreload>:
  * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
  * @param  Autoreload: specifies the Autoreload register new value.
  * @retval None
  */
void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint16_t Autoreload)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	460b      	mov	r3, r1
 8003652:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	887a      	ldrh	r2, [r7, #2]
 8003658:	859a      	strh	r2, [r3, #44]	; 0x2c
}
 800365a:	f107 070c 	add.w	r7, r7, #12
 800365e:	46bd      	mov	sp, r7
 8003660:	bc80      	pop	{r7}
 8003662:	4770      	bx	lr

08003664 <TIM_SetCompare1>:
  * @param  TIMx: where x can be 1 to 17 except 6 and 7 to select the TIM peripheral.
  * @param  Compare1: specifies the Capture Compare1 register new value.
  * @retval None
  */
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint16_t Compare1)
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	460b      	mov	r3, r1
 800366e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	887a      	ldrh	r2, [r7, #2]
 8003674:	869a      	strh	r2, [r3, #52]	; 0x34
}
 8003676:	f107 070c 	add.w	r7, r7, #12
 800367a:	46bd      	mov	sp, r7
 800367c:	bc80      	pop	{r7}
 800367e:	4770      	bx	lr

08003680 <TIM_SetCompare2>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9, 12 or 15 to select the TIM peripheral.
  * @param  Compare2: specifies the Capture Compare2 register new value.
  * @retval None
  */
void TIM_SetCompare2(TIM_TypeDef* TIMx, uint16_t Compare2)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	460b      	mov	r3, r1
 800368a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	887a      	ldrh	r2, [r7, #2]
 8003690:	871a      	strh	r2, [r3, #56]	; 0x38
}
 8003692:	f107 070c 	add.w	r7, r7, #12
 8003696:	46bd      	mov	sp, r7
 8003698:	bc80      	pop	{r7}
 800369a:	4770      	bx	lr

0800369c <TIM_SetCompare3>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare3: specifies the Capture Compare3 register new value.
  * @retval None
  */
void TIM_SetCompare3(TIM_TypeDef* TIMx, uint16_t Compare3)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	460b      	mov	r3, r1
 80036a6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	887a      	ldrh	r2, [r7, #2]
 80036ac:	879a      	strh	r2, [r3, #60]	; 0x3c
}
 80036ae:	f107 070c 	add.w	r7, r7, #12
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bc80      	pop	{r7}
 80036b6:	4770      	bx	lr

080036b8 <TIM_SetCompare4>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare4: specifies the Capture Compare4 register new value.
  * @retval None
  */
void TIM_SetCompare4(TIM_TypeDef* TIMx, uint16_t Compare4)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	460b      	mov	r3, r1
 80036c2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	887a      	ldrh	r2, [r7, #2]
 80036c8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
}
 80036cc:	f107 070c 	add.w	r7, r7, #12
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bc80      	pop	{r7}
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop

080036d8 <TIM_SetIC1Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	460b      	mov	r3, r1
 80036e2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC1PSC);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	8b1b      	ldrh	r3, [r3, #24]
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	f023 030c 	bic.w	r3, r3, #12
 80036ee:	b29a      	uxth	r2, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	831a      	strh	r2, [r3, #24]
  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	8b1b      	ldrh	r3, [r3, #24]
 80036f8:	b29a      	uxth	r2, r3
 80036fa:	887b      	ldrh	r3, [r7, #2]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	b29a      	uxth	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	831a      	strh	r2, [r3, #24]
}
 8003704:	f107 070c 	add.w	r7, r7, #12
 8003708:	46bd      	mov	sp, r7
 800370a:	bc80      	pop	{r7}
 800370c:	4770      	bx	lr
 800370e:	bf00      	nop

08003710 <TIM_SetIC2Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	460b      	mov	r3, r1
 800371a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	8b1b      	ldrh	r3, [r3, #24]
 8003720:	b29b      	uxth	r3, r3
 8003722:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003726:	b29a      	uxth	r2, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	831a      	strh	r2, [r3, #24]
  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	8b1b      	ldrh	r3, [r3, #24]
 8003730:	b29a      	uxth	r2, r3
 8003732:	887b      	ldrh	r3, [r7, #2]
 8003734:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8003738:	b29b      	uxth	r3, r3
 800373a:	4313      	orrs	r3, r2
 800373c:	b29a      	uxth	r2, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	831a      	strh	r2, [r3, #24]
}
 8003742:	f107 070c 	add.w	r7, r7, #12
 8003746:	46bd      	mov	sp, r7
 8003748:	bc80      	pop	{r7}
 800374a:	4770      	bx	lr

0800374c <TIM_SetIC3Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	460b      	mov	r3, r1
 8003756:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC3PSC);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	8b9b      	ldrh	r3, [r3, #28]
 800375c:	b29b      	uxth	r3, r3
 800375e:	f023 030c 	bic.w	r3, r3, #12
 8003762:	b29a      	uxth	r2, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	839a      	strh	r2, [r3, #28]
  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	8b9b      	ldrh	r3, [r3, #28]
 800376c:	b29a      	uxth	r2, r3
 800376e:	887b      	ldrh	r3, [r7, #2]
 8003770:	4313      	orrs	r3, r2
 8003772:	b29a      	uxth	r2, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	839a      	strh	r2, [r3, #28]
}
 8003778:	f107 070c 	add.w	r7, r7, #12
 800377c:	46bd      	mov	sp, r7
 800377e:	bc80      	pop	{r7}
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop

08003784 <TIM_SetIC4Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{  
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	460b      	mov	r3, r1
 800378e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC4PSC);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	8b9b      	ldrh	r3, [r3, #28]
 8003794:	b29b      	uxth	r3, r3
 8003796:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800379a:	b29a      	uxth	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	839a      	strh	r2, [r3, #28]
  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	8b9b      	ldrh	r3, [r3, #28]
 80037a4:	b29a      	uxth	r2, r3
 80037a6:	887b      	ldrh	r3, [r7, #2]
 80037a8:	ea4f 2303 	mov.w	r3, r3, lsl #8
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	4313      	orrs	r3, r2
 80037b0:	b29a      	uxth	r2, r3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	839a      	strh	r2, [r3, #28]
}
 80037b6:	f107 070c 	add.w	r7, r7, #12
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bc80      	pop	{r7}
 80037be:	4770      	bx	lr

080037c0 <TIM_SetClockDivision>:
  *     @arg TIM_CKD_DIV2: TDTS = 2*Tck_tim
  *     @arg TIM_CKD_DIV4: TDTS = 4*Tck_tim
  * @retval None
  */
void TIM_SetClockDivision(TIM_TypeDef* TIMx, uint16_t TIM_CKD)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	460b      	mov	r3, r1
 80037ca:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));
  /* Reset the CKD Bits */
  TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_CKD);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	881b      	ldrh	r3, [r3, #0]
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037d6:	b29a      	uxth	r2, r3
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	801a      	strh	r2, [r3, #0]
  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	881b      	ldrh	r3, [r3, #0]
 80037e0:	b29a      	uxth	r2, r3
 80037e2:	887b      	ldrh	r3, [r7, #2]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	b29a      	uxth	r2, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	801a      	strh	r2, [r3, #0]
}
 80037ec:	f107 070c 	add.w	r7, r7, #12
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bc80      	pop	{r7}
 80037f4:	4770      	bx	lr
 80037f6:	bf00      	nop

080037f8 <TIM_GetCapture1>:
  * @brief  Gets the TIMx Input Capture 1 value.
  * @param  TIMx: where x can be 1 to 17 except 6 and 7 to select the TIM peripheral.
  * @retval Capture Compare 1 Register value.
  */
uint16_t TIM_GetCapture1(TIM_TypeDef* TIMx)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8003804:	b29b      	uxth	r3, r3
}
 8003806:	4618      	mov	r0, r3
 8003808:	f107 070c 	add.w	r7, r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	bc80      	pop	{r7}
 8003810:	4770      	bx	lr
 8003812:	bf00      	nop

08003814 <TIM_GetCapture2>:
  * @brief  Gets the TIMx Input Capture 2 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9, 12 or 15 to select the TIM peripheral.
  * @retval Capture Compare 2 Register value.
  */
uint16_t TIM_GetCapture2(TIM_TypeDef* TIMx)
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8003820:	b29b      	uxth	r3, r3
}
 8003822:	4618      	mov	r0, r3
 8003824:	f107 070c 	add.w	r7, r7, #12
 8003828:	46bd      	mov	sp, r7
 800382a:	bc80      	pop	{r7}
 800382c:	4770      	bx	lr
 800382e:	bf00      	nop

08003830 <TIM_GetCapture3>:
  * @brief  Gets the TIMx Input Capture 3 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 3 Register value.
  */
uint16_t TIM_GetCapture3(TIM_TypeDef* TIMx)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800383c:	b29b      	uxth	r3, r3
}
 800383e:	4618      	mov	r0, r3
 8003840:	f107 070c 	add.w	r7, r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	bc80      	pop	{r7}
 8003848:	4770      	bx	lr
 800384a:	bf00      	nop

0800384c <TIM_GetCapture4>:
  * @brief  Gets the TIMx Input Capture 4 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 4 Register value.
  */
uint16_t TIM_GetCapture4(TIM_TypeDef* TIMx)
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800385a:	b29b      	uxth	r3, r3
}
 800385c:	4618      	mov	r0, r3
 800385e:	f107 070c 	add.w	r7, r7, #12
 8003862:	46bd      	mov	sp, r7
 8003864:	bc80      	pop	{r7}
 8003866:	4770      	bx	lr

08003868 <TIM_GetCounter>:
  * @brief  Gets the TIMx Counter value.
  * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
  * @retval Counter Register value.
  */
uint16_t TIM_GetCounter(TIM_TypeDef* TIMx)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Get the Counter Register value */
  return TIMx->CNT;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003874:	b29b      	uxth	r3, r3
}
 8003876:	4618      	mov	r0, r3
 8003878:	f107 070c 	add.w	r7, r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	bc80      	pop	{r7}
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop

08003884 <TIM_GetPrescaler>:
  * @brief  Gets the TIMx Prescaler value.
  * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
  * @retval Prescaler Register value.
  */
uint16_t TIM_GetPrescaler(TIM_TypeDef* TIMx)
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Get the Prescaler Register value */
  return TIMx->PSC;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003890:	b29b      	uxth	r3, r3
}
 8003892:	4618      	mov	r0, r3
 8003894:	f107 070c 	add.w	r7, r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	bc80      	pop	{r7}
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop

080038a0 <TIM_GetFlagStatus>:
  *   - TIM_FLAG_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_FLAG_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.    
  * @retval The new state of TIM_FLAG (SET or RESET).
  */
FlagStatus TIM_GetFlagStatus(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{ 
 80038a0:	b480      	push	{r7}
 80038a2:	b085      	sub	sp, #20
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	460b      	mov	r3, r1
 80038aa:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 80038ac:	f04f 0300 	mov.w	r3, #0
 80038b0:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));
  
  if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	8a1b      	ldrh	r3, [r3, #16]
 80038b6:	b29a      	uxth	r2, r3
 80038b8:	887b      	ldrh	r3, [r7, #2]
 80038ba:	4013      	ands	r3, r2
 80038bc:	b29b      	uxth	r3, r3
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d003      	beq.n	80038ca <TIM_GetFlagStatus+0x2a>
  {
    bitstatus = SET;
 80038c2:	f04f 0301 	mov.w	r3, #1
 80038c6:	73fb      	strb	r3, [r7, #15]
 80038c8:	e002      	b.n	80038d0 <TIM_GetFlagStatus+0x30>
  }
  else
  {
    bitstatus = RESET;
 80038ca:	f04f 0300 	mov.w	r3, #0
 80038ce:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80038d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	f107 0714 	add.w	r7, r7, #20
 80038d8:	46bd      	mov	sp, r7
 80038da:	bc80      	pop	{r7}
 80038dc:	4770      	bx	lr
 80038de:	bf00      	nop

080038e0 <TIM_ClearFlag>:
  *   - TIM_FLAG_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_FLAG_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.   
  * @retval None
  */
void TIM_ClearFlag(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{  
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	460b      	mov	r3, r1
 80038ea:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_CLEAR_FLAG(TIM_FLAG));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
 80038ec:	887b      	ldrh	r3, [r7, #2]
 80038ee:	ea6f 0303 	mvn.w	r3, r3
 80038f2:	b29a      	uxth	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	821a      	strh	r2, [r3, #16]
}
 80038f8:	f107 070c 	add.w	r7, r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bc80      	pop	{r7}
 8003900:	4770      	bx	lr
 8003902:	bf00      	nop

08003904 <TIM_GetITStatus>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.  
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8003904:	b480      	push	{r7}
 8003906:	b085      	sub	sp, #20
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	460b      	mov	r3, r1
 800390e:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8003910:	f04f 0300 	mov.w	r3, #0
 8003914:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 8003916:	f04f 0300 	mov.w	r3, #0
 800391a:	81bb      	strh	r3, [r7, #12]
 800391c:	f04f 0300 	mov.w	r3, #0
 8003920:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	8a1b      	ldrh	r3, [r3, #16]
 8003926:	b29a      	uxth	r2, r3
 8003928:	887b      	ldrh	r3, [r7, #2]
 800392a:	4013      	ands	r3, r2
 800392c:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	899b      	ldrh	r3, [r3, #12]
 8003932:	b29a      	uxth	r2, r3
 8003934:	887b      	ldrh	r3, [r7, #2]
 8003936:	4013      	ands	r3, r2
 8003938:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 800393a:	89bb      	ldrh	r3, [r7, #12]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d006      	beq.n	800394e <TIM_GetITStatus+0x4a>
 8003940:	897b      	ldrh	r3, [r7, #10]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d003      	beq.n	800394e <TIM_GetITStatus+0x4a>
  {
    bitstatus = SET;
 8003946:	f04f 0301 	mov.w	r3, #1
 800394a:	73fb      	strb	r3, [r7, #15]
 800394c:	e002      	b.n	8003954 <TIM_GetITStatus+0x50>
  }
  else
  {
    bitstatus = RESET;
 800394e:	f04f 0300 	mov.w	r3, #0
 8003952:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003954:	7bfb      	ldrb	r3, [r7, #15]
}
 8003956:	4618      	mov	r0, r3
 8003958:	f107 0714 	add.w	r7, r7, #20
 800395c:	46bd      	mov	sp, r7
 800395e:	bc80      	pop	{r7}
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop

08003964 <TIM_ClearITPendingBit>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.    
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	460b      	mov	r3, r1
 800396e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8003970:	887b      	ldrh	r3, [r7, #2]
 8003972:	ea6f 0303 	mvn.w	r3, r3
 8003976:	b29a      	uxth	r2, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	821a      	strh	r2, [r3, #16]
}
 800397c:	f107 070c 	add.w	r7, r7, #12
 8003980:	46bd      	mov	sp, r7
 8003982:	bc80      	pop	{r7}
 8003984:	4770      	bx	lr
 8003986:	bf00      	nop

08003988 <TI1_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8003988:	b480      	push	{r7}
 800398a:	b087      	sub	sp, #28
 800398c:	af00      	add	r7, sp, #0
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	8179      	strh	r1, [r7, #10]
 8003992:	813a      	strh	r2, [r7, #8]
 8003994:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0;
 8003996:	f04f 0300 	mov.w	r3, #0
 800399a:	82bb      	strh	r3, [r7, #20]
 800399c:	f04f 0300 	mov.w	r3, #0
 80039a0:	82fb      	strh	r3, [r7, #22]
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	8c1b      	ldrh	r3, [r3, #32]
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	f023 0301 	bic.w	r3, r3, #1
 80039ac:	b29a      	uxth	r2, r3
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	8b1b      	ldrh	r3, [r3, #24]
 80039b6:	82bb      	strh	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	8c1b      	ldrh	r3, [r3, #32]
 80039bc:	82fb      	strh	r3, [r7, #22]
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
 80039be:	8abb      	ldrh	r3, [r7, #20]
 80039c0:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 80039c4:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 80039c6:	88fb      	ldrh	r3, [r7, #6]
 80039c8:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80039cc:	b29a      	uxth	r2, r3
 80039ce:	893b      	ldrh	r3, [r7, #8]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	b29a      	uxth	r2, r3
 80039d4:	8abb      	ldrh	r3, [r7, #20]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	82bb      	strh	r3, [r7, #20]
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 80039da:	68fa      	ldr	r2, [r7, #12]
 80039dc:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80039e0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d01f      	beq.n	8003a28 <TI1_Config+0xa0>
 80039e8:	68fa      	ldr	r2, [r7, #12]
 80039ea:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 80039ee:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d018      	beq.n	8003a28 <TI1_Config+0xa0>
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039fc:	d014      	beq.n	8003a28 <TI1_Config+0xa0>
 80039fe:	68fa      	ldr	r2, [r7, #12]
 8003a00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a04:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d00d      	beq.n	8003a28 <TI1_Config+0xa0>
 8003a0c:	68fa      	ldr	r2, [r7, #12]
 8003a0e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003a12:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d006      	beq.n	8003a28 <TI1_Config+0xa0>
     (TIMx == TIM4) ||(TIMx == TIM5))
 8003a1a:	68fa      	ldr	r2, [r7, #12]
 8003a1c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003a20:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d10b      	bne.n	8003a40 <TI1_Config+0xb8>
  {
    /* Select the Polarity and set the CC1E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P));
 8003a28:	8afb      	ldrh	r3, [r7, #22]
 8003a2a:	f023 0302 	bic.w	r3, r3, #2
 8003a2e:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8003a30:	897a      	ldrh	r2, [r7, #10]
 8003a32:	8afb      	ldrh	r3, [r7, #22]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	f043 0301 	orr.w	r3, r3, #1
 8003a3c:	82fb      	strh	r3, [r7, #22]
 8003a3e:	e00a      	b.n	8003a56 <TI1_Config+0xce>
  }
  else
  {
    /* Select the Polarity and set the CC1E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003a40:	8afb      	ldrh	r3, [r7, #22]
 8003a42:	f023 030a 	bic.w	r3, r3, #10
 8003a46:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8003a48:	897a      	ldrh	r2, [r7, #10]
 8003a4a:	8afb      	ldrh	r3, [r7, #22]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	f043 0301 	orr.w	r3, r3, #1
 8003a54:	82fb      	strh	r3, [r7, #22]
  }

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	8aba      	ldrh	r2, [r7, #20]
 8003a5a:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	8afa      	ldrh	r2, [r7, #22]
 8003a60:	841a      	strh	r2, [r3, #32]
}
 8003a62:	f107 071c 	add.w	r7, r7, #28
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bc80      	pop	{r7}
 8003a6a:	4770      	bx	lr

08003a6c <TI2_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b087      	sub	sp, #28
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	60f8      	str	r0, [r7, #12]
 8003a74:	8179      	strh	r1, [r7, #10]
 8003a76:	813a      	strh	r2, [r7, #8]
 8003a78:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
 8003a7a:	f04f 0300 	mov.w	r3, #0
 8003a7e:	82bb      	strh	r3, [r7, #20]
 8003a80:	f04f 0300 	mov.w	r3, #0
 8003a84:	82fb      	strh	r3, [r7, #22]
 8003a86:	f04f 0300 	mov.w	r3, #0
 8003a8a:	827b      	strh	r3, [r7, #18]
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	8c1b      	ldrh	r3, [r3, #32]
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	f023 0310 	bic.w	r3, r3, #16
 8003a96:	b29a      	uxth	r2, r3
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	8b1b      	ldrh	r3, [r3, #24]
 8003aa0:	82bb      	strh	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	8c1b      	ldrh	r3, [r3, #32]
 8003aa6:	82fb      	strh	r3, [r7, #22]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
 8003aa8:	897b      	ldrh	r3, [r7, #10]
 8003aaa:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8003aae:	827b      	strh	r3, [r7, #18]
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
 8003ab0:	8abb      	ldrh	r3, [r7, #20]
 8003ab2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ab6:	ea4f 5303 	mov.w	r3, r3, lsl #20
 8003aba:	ea4f 5313 	mov.w	r3, r3, lsr #20
 8003abe:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8003ac0:	88fb      	ldrh	r3, [r7, #6]
 8003ac2:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8003ac6:	b29a      	uxth	r2, r3
 8003ac8:	8abb      	ldrh	r3, [r7, #20]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8003ace:	893b      	ldrh	r3, [r7, #8]
 8003ad0:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8003ad4:	b29a      	uxth	r2, r3
 8003ad6:	8abb      	ldrh	r3, [r7, #20]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	82bb      	strh	r3, [r7, #20]
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 8003adc:	68fa      	ldr	r2, [r7, #12]
 8003ade:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8003ae2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d01f      	beq.n	8003b2a <TI2_Config+0xbe>
 8003aea:	68fa      	ldr	r2, [r7, #12]
 8003aec:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 8003af0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d018      	beq.n	8003b2a <TI2_Config+0xbe>
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003afe:	d014      	beq.n	8003b2a <TI2_Config+0xbe>
 8003b00:	68fa      	ldr	r2, [r7, #12]
 8003b02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b06:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d00d      	beq.n	8003b2a <TI2_Config+0xbe>
 8003b0e:	68fa      	ldr	r2, [r7, #12]
 8003b10:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003b14:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d006      	beq.n	8003b2a <TI2_Config+0xbe>
     (TIMx == TIM4) ||(TIMx == TIM5))
 8003b1c:	68fa      	ldr	r2, [r7, #12]
 8003b1e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003b22:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d10b      	bne.n	8003b42 <TI2_Config+0xd6>
  {
    /* Select the Polarity and set the CC2E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P));
 8003b2a:	8afb      	ldrh	r3, [r7, #22]
 8003b2c:	f023 0320 	bic.w	r3, r3, #32
 8003b30:	82fb      	strh	r3, [r7, #22]
    tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8003b32:	8a7a      	ldrh	r2, [r7, #18]
 8003b34:	8afb      	ldrh	r3, [r7, #22]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	f043 0310 	orr.w	r3, r3, #16
 8003b3e:	82fb      	strh	r3, [r7, #22]
 8003b40:	e00a      	b.n	8003b58 <TI2_Config+0xec>
  }
  else
  {
    /* Select the Polarity and set the CC2E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003b42:	8afb      	ldrh	r3, [r7, #22]
 8003b44:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b48:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC2E);
 8003b4a:	897a      	ldrh	r2, [r7, #10]
 8003b4c:	8afb      	ldrh	r3, [r7, #22]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	f043 0310 	orr.w	r3, r3, #16
 8003b56:	82fb      	strh	r3, [r7, #22]
  }
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	8aba      	ldrh	r2, [r7, #20]
 8003b5c:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	8afa      	ldrh	r2, [r7, #22]
 8003b62:	841a      	strh	r2, [r3, #32]
}
 8003b64:	f107 071c 	add.w	r7, r7, #28
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bc80      	pop	{r7}
 8003b6c:	4770      	bx	lr
 8003b6e:	bf00      	nop

08003b70 <TI3_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b087      	sub	sp, #28
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	8179      	strh	r1, [r7, #10]
 8003b7a:	813a      	strh	r2, [r7, #8]
 8003b7c:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 8003b7e:	f04f 0300 	mov.w	r3, #0
 8003b82:	82bb      	strh	r3, [r7, #20]
 8003b84:	f04f 0300 	mov.w	r3, #0
 8003b88:	82fb      	strh	r3, [r7, #22]
 8003b8a:	f04f 0300 	mov.w	r3, #0
 8003b8e:	827b      	strh	r3, [r7, #18]
  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	8c1b      	ldrh	r3, [r3, #32]
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b9a:	b29a      	uxth	r2, r3
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	8b9b      	ldrh	r3, [r3, #28]
 8003ba4:	82bb      	strh	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	8c1b      	ldrh	r3, [r3, #32]
 8003baa:	82fb      	strh	r3, [r7, #22]
  tmp = (uint16_t)(TIM_ICPolarity << 8);
 8003bac:	897b      	ldrh	r3, [r7, #10]
 8003bae:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8003bb2:	827b      	strh	r3, [r7, #18]
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR2_CC3S)) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC3F)));
 8003bb4:	8abb      	ldrh	r3, [r7, #20]
 8003bb6:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 8003bba:	82bb      	strh	r3, [r7, #20]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8003bbc:	88fb      	ldrh	r3, [r7, #6]
 8003bbe:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8003bc2:	b29a      	uxth	r2, r3
 8003bc4:	893b      	ldrh	r3, [r7, #8]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	b29a      	uxth	r2, r3
 8003bca:	8abb      	ldrh	r3, [r7, #20]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	82bb      	strh	r3, [r7, #20]
    
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 8003bd0:	68fa      	ldr	r2, [r7, #12]
 8003bd2:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8003bd6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d01f      	beq.n	8003c1e <TI3_Config+0xae>
 8003bde:	68fa      	ldr	r2, [r7, #12]
 8003be0:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 8003be4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d018      	beq.n	8003c1e <TI3_Config+0xae>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bf2:	d014      	beq.n	8003c1e <TI3_Config+0xae>
 8003bf4:	68fa      	ldr	r2, [r7, #12]
 8003bf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003bfa:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d00d      	beq.n	8003c1e <TI3_Config+0xae>
 8003c02:	68fa      	ldr	r2, [r7, #12]
 8003c04:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003c08:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d006      	beq.n	8003c1e <TI3_Config+0xae>
     (TIMx == TIM4) ||(TIMx == TIM5))
 8003c10:	68fa      	ldr	r2, [r7, #12]
 8003c12:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003c16:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d10b      	bne.n	8003c36 <TI3_Config+0xc6>
  {
    /* Select the Polarity and set the CC3E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P));
 8003c1e:	8afb      	ldrh	r3, [r7, #22]
 8003c20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c24:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 8003c26:	8a7a      	ldrh	r2, [r7, #18]
 8003c28:	8afb      	ldrh	r3, [r7, #22]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c32:	82fb      	strh	r3, [r7, #22]
 8003c34:	e00a      	b.n	8003c4c <TI3_Config+0xdc>
  }
  else
  {
    /* Select the Polarity and set the CC3E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003c36:	8afb      	ldrh	r3, [r7, #22]
 8003c38:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003c3c:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC3E);
 8003c3e:	897a      	ldrh	r2, [r7, #10]
 8003c40:	8afb      	ldrh	r3, [r7, #22]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c4a:	82fb      	strh	r3, [r7, #22]
  }
  
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	8aba      	ldrh	r2, [r7, #20]
 8003c50:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	8afa      	ldrh	r2, [r7, #22]
 8003c56:	841a      	strh	r2, [r3, #32]
}
 8003c58:	f107 071c 	add.w	r7, r7, #28
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bc80      	pop	{r7}
 8003c60:	4770      	bx	lr
 8003c62:	bf00      	nop

08003c64 <TI4_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b087      	sub	sp, #28
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	8179      	strh	r1, [r7, #10]
 8003c6e:	813a      	strh	r2, [r7, #8]
 8003c70:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 8003c72:	f04f 0300 	mov.w	r3, #0
 8003c76:	82bb      	strh	r3, [r7, #20]
 8003c78:	f04f 0300 	mov.w	r3, #0
 8003c7c:	82fb      	strh	r3, [r7, #22]
 8003c7e:	f04f 0300 	mov.w	r3, #0
 8003c82:	827b      	strh	r3, [r7, #18]

   /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC4E);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	8c1b      	ldrh	r3, [r3, #32]
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c8e:	b29a      	uxth	r2, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	8b9b      	ldrh	r3, [r3, #28]
 8003c98:	82bb      	strh	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	8c1b      	ldrh	r3, [r3, #32]
 8003c9e:	82fb      	strh	r3, [r7, #22]
  tmp = (uint16_t)(TIM_ICPolarity << 12);
 8003ca0:	897b      	ldrh	r3, [r7, #10]
 8003ca2:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8003ca6:	827b      	strh	r3, [r7, #18]
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
 8003ca8:	8abb      	ldrh	r3, [r7, #20]
 8003caa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cae:	ea4f 5303 	mov.w	r3, r3, lsl #20
 8003cb2:	ea4f 5313 	mov.w	r3, r3, lsr #20
 8003cb6:	82bb      	strh	r3, [r7, #20]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 8003cb8:	893b      	ldrh	r3, [r7, #8]
 8003cba:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8003cbe:	b29a      	uxth	r2, r3
 8003cc0:	8abb      	ldrh	r3, [r7, #20]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	82bb      	strh	r3, [r7, #20]
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 8003cc6:	88fb      	ldrh	r3, [r7, #6]
 8003cc8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8003ccc:	b29a      	uxth	r2, r3
 8003cce:	8abb      	ldrh	r3, [r7, #20]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	82bb      	strh	r3, [r7, #20]
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 8003cd4:	68fa      	ldr	r2, [r7, #12]
 8003cd6:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8003cda:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d01f      	beq.n	8003d22 <TI4_Config+0xbe>
 8003ce2:	68fa      	ldr	r2, [r7, #12]
 8003ce4:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 8003ce8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d018      	beq.n	8003d22 <TI4_Config+0xbe>
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cf6:	d014      	beq.n	8003d22 <TI4_Config+0xbe>
 8003cf8:	68fa      	ldr	r2, [r7, #12]
 8003cfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003cfe:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d00d      	beq.n	8003d22 <TI4_Config+0xbe>
 8003d06:	68fa      	ldr	r2, [r7, #12]
 8003d08:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003d0c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d006      	beq.n	8003d22 <TI4_Config+0xbe>
     (TIMx == TIM4) ||(TIMx == TIM5))
 8003d14:	68fa      	ldr	r2, [r7, #12]
 8003d16:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003d1a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d10b      	bne.n	8003d3a <TI4_Config+0xd6>
  {
    /* Select the Polarity and set the CC4E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC4P));
 8003d22:	8afb      	ldrh	r3, [r7, #22]
 8003d24:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d28:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 8003d2a:	8a7a      	ldrh	r2, [r7, #18]
 8003d2c:	8afb      	ldrh	r3, [r7, #22]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003d36:	82fb      	strh	r3, [r7, #22]
 8003d38:	e00e      	b.n	8003d58 <TI4_Config+0xf4>
  }
  else
  {
    /* Select the Polarity and set the CC4E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC4NP));
 8003d3a:	8afb      	ldrh	r3, [r7, #22]
 8003d3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d40:	ea4f 4343 	mov.w	r3, r3, lsl #17
 8003d44:	ea4f 4353 	mov.w	r3, r3, lsr #17
 8003d48:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC4E);
 8003d4a:	897a      	ldrh	r2, [r7, #10]
 8003d4c:	8afb      	ldrh	r3, [r7, #22]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003d56:	82fb      	strh	r3, [r7, #22]
  }
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	8aba      	ldrh	r2, [r7, #20]
 8003d5c:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	8afa      	ldrh	r2, [r7, #22]
 8003d62:	841a      	strh	r2, [r3, #32]
}
 8003d64:	f107 071c 	add.w	r7, r7, #28
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bc80      	pop	{r7}
 8003d6c:	4770      	bx	lr
 8003d6e:	bf00      	nop

08003d70 <__get_PSP>:
 * Return the actual process stack pointer
 */
uint32_t __get_PSP(void) __attribute__( ( naked ) );
uint32_t __get_PSP(void)
{
  uint32_t result=0;
 8003d70:	f04f 0400 	mov.w	r4, #0

  __ASM volatile ("MRS %0, psp\n\t" 
 8003d74:	f3ef 8409 	mrs	r4, PSP
 8003d78:	4620      	mov	r0, r4
 8003d7a:	4770      	bx	lr
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
 8003d7c:	4623      	mov	r3, r4
}
 8003d7e:	4618      	mov	r0, r3

08003d80 <__set_PSP>:
 * Assign the value ProcessStackPointer to the MSP 
 * (process stack pointer) Cortex processor register
 */
void __set_PSP(uint32_t topOfProcStack) __attribute__( ( naked ) );
void __set_PSP(uint32_t topOfProcStack)
{
 8003d80:	4603      	mov	r3, r0
  __ASM volatile ("MSR psp, %0\n\t"
 8003d82:	f383 8809 	msr	PSP, r3
 8003d86:	4770      	bx	lr

08003d88 <__get_MSP>:
 * Cortex processor register
 */
uint32_t __get_MSP(void) __attribute__( ( naked ) );
uint32_t __get_MSP(void)
{
  uint32_t result=0;
 8003d88:	f04f 0400 	mov.w	r4, #0

  __ASM volatile ("MRS %0, msp\n\t" 
 8003d8c:	f3ef 8408 	mrs	r4, MSP
 8003d90:	4620      	mov	r0, r4
 8003d92:	4770      	bx	lr
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
 8003d94:	4623      	mov	r3, r4
}
 8003d96:	4618      	mov	r0, r3

08003d98 <__set_MSP>:
 * Assign the value mainStackPointer to the MSP 
 * (main stack pointer) Cortex processor register
 */
void __set_MSP(uint32_t topOfMainStack) __attribute__( ( naked ) );
void __set_MSP(uint32_t topOfMainStack)
{
 8003d98:	4603      	mov	r3, r0
  __ASM volatile ("MSR msp, %0\n\t"
 8003d9a:	f383 8808 	msr	MSP, r3
 8003d9e:	4770      	bx	lr

08003da0 <__get_BASEPRI>:
 * @return BasePriority
 *
 * Return the content of the base priority register
 */
uint32_t __get_BASEPRI(void)
{
 8003da0:	b490      	push	{r4, r7}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af00      	add	r7, sp, #0
  uint32_t result=0;
 8003da6:	f04f 0300 	mov.w	r3, #0
 8003daa:	607b      	str	r3, [r7, #4]
  
  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
 8003dac:	f3ef 8412 	mrs	r4, BASEPRI_MAX
 8003db0:	607c      	str	r4, [r7, #4]
  return(result);
 8003db2:	687b      	ldr	r3, [r7, #4]
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	f107 0708 	add.w	r7, r7, #8
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bc90      	pop	{r4, r7}
 8003dbe:	4770      	bx	lr

08003dc0 <__set_BASEPRI>:
 * @param  basePri  BasePriority
 *
 * Set the base priority register
 */
void __set_BASEPRI(uint32_t value)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) );
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f383 8811 	msr	BASEPRI, r3
}
 8003dce:	f107 070c 	add.w	r7, r7, #12
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bc80      	pop	{r7}
 8003dd6:	4770      	bx	lr

08003dd8 <__get_PRIMASK>:
 * @return PriMask
 *
 * Return state of the priority mask bit from the priority mask register
 */
uint32_t __get_PRIMASK(void)
{
 8003dd8:	b490      	push	{r4, r7}
 8003dda:	b082      	sub	sp, #8
 8003ddc:	af00      	add	r7, sp, #0
  uint32_t result=0;
 8003dde:	f04f 0300 	mov.w	r3, #0
 8003de2:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003de4:	f3ef 8410 	mrs	r4, PRIMASK
 8003de8:	607c      	str	r4, [r7, #4]
  return(result);
 8003dea:	687b      	ldr	r3, [r7, #4]
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	f107 0708 	add.w	r7, r7, #8
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bc90      	pop	{r4, r7}
 8003df6:	4770      	bx	lr

08003df8 <__set_PRIMASK>:
 * @param  priMask  PriMask
 *
 * Set the priority mask bit in the priority mask register
 */
void __set_PRIMASK(uint32_t priMask)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f383 8810 	msr	PRIMASK, r3
}
 8003e06:	f107 070c 	add.w	r7, r7, #12
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bc80      	pop	{r7}
 8003e0e:	4770      	bx	lr

08003e10 <__get_FAULTMASK>:
 * @return FaultMask
 *
 * Return the content of the fault mask register
 */
uint32_t __get_FAULTMASK(void)
{
 8003e10:	b490      	push	{r4, r7}
 8003e12:	b082      	sub	sp, #8
 8003e14:	af00      	add	r7, sp, #0
  uint32_t result=0;
 8003e16:	f04f 0300 	mov.w	r3, #0
 8003e1a:	607b      	str	r3, [r7, #4]
  
  __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 8003e1c:	f3ef 8413 	mrs	r4, FAULTMASK
 8003e20:	607c      	str	r4, [r7, #4]
  return(result);
 8003e22:	687b      	ldr	r3, [r7, #4]
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	f107 0708 	add.w	r7, r7, #8
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bc90      	pop	{r4, r7}
 8003e2e:	4770      	bx	lr

08003e30 <__set_FAULTMASK>:
 * @param  faultMask  faultMask value
 *
 * Set the fault mask register
 */
void __set_FAULTMASK(uint32_t faultMask)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) );
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f383 8813 	msr	FAULTMASK, r3
}
 8003e3e:	f107 070c 	add.w	r7, r7, #12
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bc80      	pop	{r7}
 8003e46:	4770      	bx	lr

08003e48 <__get_CONTROL>:
*  @return Control value
 *
 * Return the content of the control register
 */
uint32_t __get_CONTROL(void)
{
 8003e48:	b490      	push	{r4, r7}
 8003e4a:	b082      	sub	sp, #8
 8003e4c:	af00      	add	r7, sp, #0
  uint32_t result=0;
 8003e4e:	f04f 0300 	mov.w	r3, #0
 8003e52:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8003e54:	f3ef 8414 	mrs	r4, CONTROL
 8003e58:	607c      	str	r4, [r7, #4]
  return(result);
 8003e5a:	687b      	ldr	r3, [r7, #4]
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f107 0708 	add.w	r7, r7, #8
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bc90      	pop	{r4, r7}
 8003e66:	4770      	bx	lr

08003e68 <__set_CONTROL>:
 * @param  control  Control value
 *
 * Set the control register
 */
void __set_CONTROL(uint32_t control)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR control, %0" : : "r" (control) );
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f383 8814 	msr	CONTROL, r3
}
 8003e76:	f107 070c 	add.w	r7, r7, #12
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bc80      	pop	{r7}
 8003e7e:	4770      	bx	lr

08003e80 <__REV>:
 * @return        reversed value
 *
 * Reverse byte order in integer value
 */
uint32_t __REV(uint32_t value)
{
 8003e80:	b490      	push	{r4, r7}
 8003e82:	b084      	sub	sp, #16
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
 8003e88:	f04f 0300 	mov.w	r3, #0
 8003e8c:	60fb      	str	r3, [r7, #12]
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	ba1c      	rev	r4, r3
 8003e92:	60fc      	str	r4, [r7, #12]
  return(result);
 8003e94:	68fb      	ldr	r3, [r7, #12]
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	f107 0710 	add.w	r7, r7, #16
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bc90      	pop	{r4, r7}
 8003ea0:	4770      	bx	lr
 8003ea2:	bf00      	nop

08003ea4 <__REV16>:
 * @return        reversed value
 *
 * Reverse byte order in unsigned short value
 */
uint32_t __REV16(uint16_t value)
{
 8003ea4:	b490      	push	{r4, r7}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	4603      	mov	r3, r0
 8003eac:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
 8003eae:	f04f 0300 	mov.w	r3, #0
 8003eb2:	60fb      	str	r3, [r7, #12]
  
  __ASM volatile ("rev16 %0, %1" : "=r" (result) : "r" (value) );
 8003eb4:	88fb      	ldrh	r3, [r7, #6]
 8003eb6:	ba5c      	rev16	r4, r3
 8003eb8:	60fc      	str	r4, [r7, #12]
  return(result);
 8003eba:	68fb      	ldr	r3, [r7, #12]
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f107 0710 	add.w	r7, r7, #16
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bc90      	pop	{r4, r7}
 8003ec6:	4770      	bx	lr

08003ec8 <__REVSH>:
 * @return        reversed value
 *
 * Reverse byte order in signed short value with sign extension to integer
 */
int32_t __REVSH(int16_t value)
{
 8003ec8:	b490      	push	{r4, r7}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	4603      	mov	r3, r0
 8003ed0:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
 8003ed2:	f04f 0300 	mov.w	r3, #0
 8003ed6:	60fb      	str	r3, [r7, #12]
  
  __ASM volatile ("revsh %0, %1" : "=r" (result) : "r" (value) );
 8003ed8:	88fb      	ldrh	r3, [r7, #6]
 8003eda:	badc      	revsh	r4, r3
 8003edc:	60fc      	str	r4, [r7, #12]
  return(result);
 8003ede:	68fb      	ldr	r3, [r7, #12]
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f107 0710 	add.w	r7, r7, #16
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bc90      	pop	{r4, r7}
 8003eea:	4770      	bx	lr

08003eec <__RBIT>:
 * @return        reversed value
 *
 * Reverse bit order of value
 */
uint32_t __RBIT(uint32_t value)
{
 8003eec:	b490      	push	{r4, r7}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
 8003ef4:	f04f 0300 	mov.w	r3, #0
 8003ef8:	60fb      	str	r3, [r7, #12]
  
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	fa93 f4a3 	rbit	r4, r3
 8003f00:	60fc      	str	r4, [r7, #12]
   return(result);
 8003f02:	68fb      	ldr	r3, [r7, #12]
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	f107 0710 	add.w	r7, r7, #16
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bc90      	pop	{r4, r7}
 8003f0e:	4770      	bx	lr

08003f10 <__LDREXB>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 8 bit value
 */
uint8_t __LDREXB(uint8_t *addr)
{
 8003f10:	b490      	push	{r4, r7}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
    uint8_t result=0;
 8003f18:	f04f 0300 	mov.w	r3, #0
 8003f1c:	73fb      	strb	r3, [r7, #15]
  
   __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) );
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	e8d3 4f4f 	ldrexb	r4, [r3]
 8003f24:	73fc      	strb	r4, [r7, #15]
   return(result);
 8003f26:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f107 0710 	add.w	r7, r7, #16
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bc90      	pop	{r4, r7}
 8003f32:	4770      	bx	lr

08003f34 <__LDREXH>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 16 bit values
 */
uint16_t __LDREXH(uint16_t *addr)
{
 8003f34:	b490      	push	{r4, r7}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
    uint16_t result=0;
 8003f3c:	f04f 0300 	mov.w	r3, #0
 8003f40:	81fb      	strh	r3, [r7, #14]
  
   __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) );
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	e8d3 4f5f 	ldrexh	r4, [r3]
 8003f48:	81fc      	strh	r4, [r7, #14]
   return(result);
 8003f4a:	89fb      	ldrh	r3, [r7, #14]
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f107 0710 	add.w	r7, r7, #16
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bc90      	pop	{r4, r7}
 8003f56:	4770      	bx	lr

08003f58 <__LDREXW>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 32 bit values
 */
uint32_t __LDREXW(uint32_t *addr)
{
 8003f58:	b490      	push	{r4, r7}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
    uint32_t result=0;
 8003f60:	f04f 0300 	mov.w	r3, #0
 8003f64:	60fb      	str	r3, [r7, #12]
  
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	e853 4f00 	ldrex	r4, [r3]
 8003f6c:	60fc      	str	r4, [r7, #12]
   return(result);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	f107 0710 	add.w	r7, r7, #16
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bc90      	pop	{r4, r7}
 8003f7a:	4770      	bx	lr

08003f7c <__STREXB>:
 * @return        successful / failed
 *
 * Exclusive STR command for 8 bit values
 */
uint32_t __STREXB(uint8_t value, uint8_t *addr)
{
 8003f7c:	b490      	push	{r4, r7}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	4603      	mov	r3, r0
 8003f84:	6039      	str	r1, [r7, #0]
 8003f86:	71fb      	strb	r3, [r7, #7]
   uint32_t result=0;
 8003f88:	f04f 0300 	mov.w	r3, #0
 8003f8c:	60fb      	str	r3, [r7, #12]
  
   __ASM volatile ("strexb %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	79fa      	ldrb	r2, [r7, #7]
 8003f92:	e8c3 2f44 	strexb	r4, r2, [r3]
 8003f96:	60fc      	str	r4, [r7, #12]
   return(result);
 8003f98:	68fb      	ldr	r3, [r7, #12]
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f107 0710 	add.w	r7, r7, #16
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bc90      	pop	{r4, r7}
 8003fa4:	4770      	bx	lr
 8003fa6:	bf00      	nop

08003fa8 <__STREXH>:
 * @return        successful / failed
 *
 * Exclusive STR command for 16 bit values
 */
uint32_t __STREXH(uint16_t value, uint16_t *addr)
{
 8003fa8:	b490      	push	{r4, r7}
 8003faa:	b084      	sub	sp, #16
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	4603      	mov	r3, r0
 8003fb0:	6039      	str	r1, [r7, #0]
 8003fb2:	80fb      	strh	r3, [r7, #6]
   uint32_t result=0;
 8003fb4:	f04f 0300 	mov.w	r3, #0
 8003fb8:	60fb      	str	r3, [r7, #12]
  
   __ASM volatile ("strexh %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	88fa      	ldrh	r2, [r7, #6]
 8003fbe:	e8c3 2f54 	strexh	r4, r2, [r3]
 8003fc2:	60fc      	str	r4, [r7, #12]
   return(result);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f107 0710 	add.w	r7, r7, #16
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bc90      	pop	{r4, r7}
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop

08003fd4 <__STREXW>:
 * @return        successful / failed
 *
 * Exclusive STR command for 32 bit values
 */
uint32_t __STREXW(uint32_t value, uint32_t *addr)
{
 8003fd4:	b490      	push	{r4, r7}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
   uint32_t result=0;
 8003fde:	f04f 0300 	mov.w	r3, #0
 8003fe2:	60fb      	str	r3, [r7, #12]
  
   __ASM volatile ("strex %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	e843 2400 	strex	r4, r2, [r3]
 8003fec:	60fc      	str	r4, [r7, #12]
   return(result);
 8003fee:	68fb      	ldr	r3, [r7, #12]
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f107 0710 	add.w	r7, r7, #16
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bc90      	pop	{r4, r7}
 8003ffa:	4770      	bx	lr

08003ffc <abort>:
 8003ffc:	b508      	push	{r3, lr}
 8003ffe:	2006      	movs	r0, #6
 8004000:	f000 f934 	bl	800426c <raise>
 8004004:	2001      	movs	r0, #1
 8004006:	f7fc fbb1 	bl	800076c <_exit>
 800400a:	bf00      	nop

0800400c <__libc_init_array>:
 800400c:	b570      	push	{r4, r5, r6, lr}
 800400e:	f644 3674 	movw	r6, #19316	; 0x4b74
 8004012:	f644 3574 	movw	r5, #19316	; 0x4b74
 8004016:	f6c0 0600 	movt	r6, #2048	; 0x800
 800401a:	f6c0 0500 	movt	r5, #2048	; 0x800
 800401e:	1b76      	subs	r6, r6, r5
 8004020:	10b6      	asrs	r6, r6, #2
 8004022:	d006      	beq.n	8004032 <__libc_init_array+0x26>
 8004024:	2400      	movs	r4, #0
 8004026:	f855 3b04 	ldr.w	r3, [r5], #4
 800402a:	3401      	adds	r4, #1
 800402c:	4798      	blx	r3
 800402e:	42a6      	cmp	r6, r4
 8004030:	d1f9      	bne.n	8004026 <__libc_init_array+0x1a>
 8004032:	f644 3678 	movw	r6, #19320	; 0x4b78
 8004036:	f644 3574 	movw	r5, #19316	; 0x4b74
 800403a:	f6c0 0600 	movt	r6, #2048	; 0x800
 800403e:	f6c0 0500 	movt	r5, #2048	; 0x800
 8004042:	1b76      	subs	r6, r6, r5
 8004044:	f000 fd8a 	bl	8004b5c <_init>
 8004048:	10b6      	asrs	r6, r6, #2
 800404a:	d006      	beq.n	800405a <__libc_init_array+0x4e>
 800404c:	2400      	movs	r4, #0
 800404e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004052:	3401      	adds	r4, #1
 8004054:	4798      	blx	r3
 8004056:	42a6      	cmp	r6, r4
 8004058:	d1f9      	bne.n	800404e <__libc_init_array+0x42>
 800405a:	bd70      	pop	{r4, r5, r6, pc}
 800405c:	0000      	movs	r0, r0
	...

08004060 <srand>:
 8004060:	b570      	push	{r4, r5, r6, lr}
 8004062:	f240 0400 	movw	r4, #0
 8004066:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800406a:	4606      	mov	r6, r0
 800406c:	6825      	ldr	r5, [r4, #0]
 800406e:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8004070:	b119      	cbz	r1, 800407a <srand+0x1a>
 8004072:	2300      	movs	r3, #0
 8004074:	610e      	str	r6, [r1, #16]
 8004076:	614b      	str	r3, [r1, #20]
 8004078:	bd70      	pop	{r4, r5, r6, pc}
 800407a:	2018      	movs	r0, #24
 800407c:	f000 fa4a 	bl	8004514 <malloc>
 8004080:	6823      	ldr	r3, [r4, #0]
 8004082:	2201      	movs	r2, #1
 8004084:	63a8      	str	r0, [r5, #56]	; 0x38
 8004086:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004088:	f243 330e 	movw	r3, #13070	; 0x330e
 800408c:	800b      	strh	r3, [r1, #0]
 800408e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 8004092:	804b      	strh	r3, [r1, #2]
 8004094:	f241 2334 	movw	r3, #4660	; 0x1234
 8004098:	808b      	strh	r3, [r1, #4]
 800409a:	f24e 636d 	movw	r3, #58989	; 0xe66d
 800409e:	80cb      	strh	r3, [r1, #6]
 80040a0:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80040a4:	810b      	strh	r3, [r1, #8]
 80040a6:	2305      	movs	r3, #5
 80040a8:	814b      	strh	r3, [r1, #10]
 80040aa:	230b      	movs	r3, #11
 80040ac:	818b      	strh	r3, [r1, #12]
 80040ae:	2300      	movs	r3, #0
 80040b0:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80040b4:	2300      	movs	r3, #0
 80040b6:	610e      	str	r6, [r1, #16]
 80040b8:	614b      	str	r3, [r1, #20]
 80040ba:	bd70      	pop	{r4, r5, r6, pc}

080040bc <rand>:
 80040bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040be:	f240 0400 	movw	r4, #0
 80040c2:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80040c6:	6827      	ldr	r7, [r4, #0]
 80040c8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80040ca:	b1d9      	cbz	r1, 8004104 <rand+0x48>
 80040cc:	690a      	ldr	r2, [r1, #16]
 80040ce:	f24f 402d 	movw	r0, #62509	; 0xf42d
 80040d2:	694e      	ldr	r6, [r1, #20]
 80040d4:	f647 732d 	movw	r3, #32557	; 0x7f2d
 80040d8:	f6c5 0051 	movt	r0, #22609	; 0x5851
 80040dc:	f6c4 4395 	movt	r3, #19605	; 0x4c95
 80040e0:	2401      	movs	r4, #1
 80040e2:	2500      	movs	r5, #0
 80040e4:	fb00 f002 	mul.w	r0, r0, r2
 80040e8:	fb03 0006 	mla	r0, r3, r6, r0
 80040ec:	fba2 2303 	umull	r2, r3, r2, r3
 80040f0:	18c3      	adds	r3, r0, r3
 80040f2:	18a4      	adds	r4, r4, r2
 80040f4:	eb45 0503 	adc.w	r5, r5, r3
 80040f8:	e9c1 4504 	strd	r4, r5, [r1, #16]
 80040fc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8004100:	4630      	mov	r0, r6
 8004102:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004104:	2018      	movs	r0, #24
 8004106:	f24f 462d 	movw	r6, #62509	; 0xf42d
 800410a:	f000 fa03 	bl	8004514 <malloc>
 800410e:	6823      	ldr	r3, [r4, #0]
 8004110:	a511      	add	r5, pc, #68	; (adr r5, 8004158 <rand+0x9c>)
 8004112:	e9d5 4500 	ldrd	r4, r5, [r5]
 8004116:	f6c5 0651 	movt	r6, #22609	; 0x5851
 800411a:	2201      	movs	r2, #1
 800411c:	63b8      	str	r0, [r7, #56]	; 0x38
 800411e:	4630      	mov	r0, r6
 8004120:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004122:	f243 330e 	movw	r3, #13070	; 0x330e
 8004126:	800b      	strh	r3, [r1, #0]
 8004128:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 800412c:	804b      	strh	r3, [r1, #2]
 800412e:	f241 2334 	movw	r3, #4660	; 0x1234
 8004132:	808b      	strh	r3, [r1, #4]
 8004134:	f24e 636d 	movw	r3, #58989	; 0xe66d
 8004138:	80cb      	strh	r3, [r1, #6]
 800413a:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 800413e:	810b      	strh	r3, [r1, #8]
 8004140:	2305      	movs	r3, #5
 8004142:	814b      	strh	r3, [r1, #10]
 8004144:	230b      	movs	r3, #11
 8004146:	818b      	strh	r3, [r1, #12]
 8004148:	2300      	movs	r3, #0
 800414a:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800414e:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8004152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004154:	f3af 8000 	nop.w
 8004158:	4c957f2e 	.word	0x4c957f2e
 800415c:	5851f42d 	.word	0x5851f42d

08004160 <_init_signal_r>:
 8004160:	b538      	push	{r3, r4, r5, lr}
 8004162:	4604      	mov	r4, r0
 8004164:	6c45      	ldr	r5, [r0, #68]	; 0x44
 8004166:	b10d      	cbz	r5, 800416c <_init_signal_r+0xc>
 8004168:	2000      	movs	r0, #0
 800416a:	bd38      	pop	{r3, r4, r5, pc}
 800416c:	2180      	movs	r1, #128	; 0x80
 800416e:	f000 f9e1 	bl	8004534 <_malloc_r>
 8004172:	6460      	str	r0, [r4, #68]	; 0x44
 8004174:	b140      	cbz	r0, 8004188 <_init_signal_r+0x28>
 8004176:	462b      	mov	r3, r5
 8004178:	e000      	b.n	800417c <_init_signal_r+0x1c>
 800417a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800417c:	5143      	str	r3, [r0, r5]
 800417e:	3504      	adds	r5, #4
 8004180:	2d80      	cmp	r5, #128	; 0x80
 8004182:	d1fa      	bne.n	800417a <_init_signal_r+0x1a>
 8004184:	2000      	movs	r0, #0
 8004186:	bd38      	pop	{r3, r4, r5, pc}
 8004188:	f04f 30ff 	mov.w	r0, #4294967295
 800418c:	bd38      	pop	{r3, r4, r5, pc}
 800418e:	bf00      	nop

08004190 <_signal_r>:
 8004190:	291f      	cmp	r1, #31
 8004192:	b510      	push	{r4, lr}
 8004194:	4604      	mov	r4, r0
 8004196:	b082      	sub	sp, #8
 8004198:	d807      	bhi.n	80041aa <_signal_r+0x1a>
 800419a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800419c:	b153      	cbz	r3, 80041b4 <_signal_r+0x24>
 800419e:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 80041a2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 80041a6:	b002      	add	sp, #8
 80041a8:	bd10      	pop	{r4, pc}
 80041aa:	2316      	movs	r3, #22
 80041ac:	f04f 30ff 	mov.w	r0, #4294967295
 80041b0:	6023      	str	r3, [r4, #0]
 80041b2:	e7f8      	b.n	80041a6 <_signal_r+0x16>
 80041b4:	9101      	str	r1, [sp, #4]
 80041b6:	9200      	str	r2, [sp, #0]
 80041b8:	f7ff ffd2 	bl	8004160 <_init_signal_r>
 80041bc:	9901      	ldr	r1, [sp, #4]
 80041be:	9a00      	ldr	r2, [sp, #0]
 80041c0:	b908      	cbnz	r0, 80041c6 <_signal_r+0x36>
 80041c2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80041c4:	e7eb      	b.n	800419e <_signal_r+0xe>
 80041c6:	f04f 30ff 	mov.w	r0, #4294967295
 80041ca:	e7ec      	b.n	80041a6 <_signal_r+0x16>

080041cc <_raise_r>:
 80041cc:	291f      	cmp	r1, #31
 80041ce:	b538      	push	{r3, r4, r5, lr}
 80041d0:	460c      	mov	r4, r1
 80041d2:	4605      	mov	r5, r0
 80041d4:	d81f      	bhi.n	8004216 <_raise_r+0x4a>
 80041d6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80041d8:	b19a      	cbz	r2, 8004202 <_raise_r+0x36>
 80041da:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80041de:	b183      	cbz	r3, 8004202 <_raise_r+0x36>
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d00c      	beq.n	80041fe <_raise_r+0x32>
 80041e4:	1c58      	adds	r0, r3, #1
 80041e6:	d006      	beq.n	80041f6 <_raise_r+0x2a>
 80041e8:	2500      	movs	r5, #0
 80041ea:	4608      	mov	r0, r1
 80041ec:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 80041f0:	4798      	blx	r3
 80041f2:	4628      	mov	r0, r5
 80041f4:	bd38      	pop	{r3, r4, r5, pc}
 80041f6:	2316      	movs	r3, #22
 80041f8:	2001      	movs	r0, #1
 80041fa:	602b      	str	r3, [r5, #0]
 80041fc:	bd38      	pop	{r3, r4, r5, pc}
 80041fe:	2000      	movs	r0, #0
 8004200:	bd38      	pop	{r3, r4, r5, pc}
 8004202:	4628      	mov	r0, r5
 8004204:	f000 f868 	bl	80042d8 <_getpid_r>
 8004208:	4622      	mov	r2, r4
 800420a:	4601      	mov	r1, r0
 800420c:	4628      	mov	r0, r5
 800420e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004212:	f000 b84d 	b.w	80042b0 <_kill_r>
 8004216:	2316      	movs	r3, #22
 8004218:	f04f 30ff 	mov.w	r0, #4294967295
 800421c:	602b      	str	r3, [r5, #0]
 800421e:	bd38      	pop	{r3, r4, r5, pc}

08004220 <__sigtramp_r>:
 8004220:	291f      	cmp	r1, #31
 8004222:	b510      	push	{r4, lr}
 8004224:	4604      	mov	r4, r0
 8004226:	b082      	sub	sp, #8
 8004228:	d81c      	bhi.n	8004264 <__sigtramp_r+0x44>
 800422a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800422c:	b19b      	cbz	r3, 8004256 <__sigtramp_r+0x36>
 800422e:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 8004232:	2001      	movs	r0, #1
 8004234:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8004238:	b14a      	cbz	r2, 800424e <__sigtramp_r+0x2e>
 800423a:	1c50      	adds	r0, r2, #1
 800423c:	d009      	beq.n	8004252 <__sigtramp_r+0x32>
 800423e:	2003      	movs	r0, #3
 8004240:	2a01      	cmp	r2, #1
 8004242:	d004      	beq.n	800424e <__sigtramp_r+0x2e>
 8004244:	2400      	movs	r4, #0
 8004246:	4608      	mov	r0, r1
 8004248:	601c      	str	r4, [r3, #0]
 800424a:	4790      	blx	r2
 800424c:	4620      	mov	r0, r4
 800424e:	b002      	add	sp, #8
 8004250:	bd10      	pop	{r4, pc}
 8004252:	2002      	movs	r0, #2
 8004254:	e7fb      	b.n	800424e <__sigtramp_r+0x2e>
 8004256:	9101      	str	r1, [sp, #4]
 8004258:	f7ff ff82 	bl	8004160 <_init_signal_r>
 800425c:	9901      	ldr	r1, [sp, #4]
 800425e:	b908      	cbnz	r0, 8004264 <__sigtramp_r+0x44>
 8004260:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004262:	e7e4      	b.n	800422e <__sigtramp_r+0xe>
 8004264:	f04f 30ff 	mov.w	r0, #4294967295
 8004268:	e7f1      	b.n	800424e <__sigtramp_r+0x2e>
 800426a:	bf00      	nop

0800426c <raise>:
 800426c:	f240 0300 	movw	r3, #0
 8004270:	4601      	mov	r1, r0
 8004272:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004276:	6818      	ldr	r0, [r3, #0]
 8004278:	f7ff bfa8 	b.w	80041cc <_raise_r>

0800427c <signal>:
 800427c:	f240 0300 	movw	r3, #0
 8004280:	460a      	mov	r2, r1
 8004282:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004286:	4601      	mov	r1, r0
 8004288:	6818      	ldr	r0, [r3, #0]
 800428a:	f7ff bf81 	b.w	8004190 <_signal_r>
 800428e:	bf00      	nop

08004290 <_init_signal>:
 8004290:	f240 0300 	movw	r3, #0
 8004294:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004298:	6818      	ldr	r0, [r3, #0]
 800429a:	f7ff bf61 	b.w	8004160 <_init_signal_r>
 800429e:	bf00      	nop

080042a0 <__sigtramp>:
 80042a0:	f240 0300 	movw	r3, #0
 80042a4:	4601      	mov	r1, r0
 80042a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80042aa:	6818      	ldr	r0, [r3, #0]
 80042ac:	f7ff bfb8 	b.w	8004220 <__sigtramp_r>

080042b0 <_kill_r>:
 80042b0:	b538      	push	{r3, r4, r5, lr}
 80042b2:	f240 549c 	movw	r4, #1436	; 0x59c
 80042b6:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80042ba:	4605      	mov	r5, r0
 80042bc:	4608      	mov	r0, r1
 80042be:	4611      	mov	r1, r2
 80042c0:	2300      	movs	r3, #0
 80042c2:	6023      	str	r3, [r4, #0]
 80042c4:	f7fc fa3e 	bl	8000744 <_kill>
 80042c8:	1c43      	adds	r3, r0, #1
 80042ca:	d000      	beq.n	80042ce <_kill_r+0x1e>
 80042cc:	bd38      	pop	{r3, r4, r5, pc}
 80042ce:	6823      	ldr	r3, [r4, #0]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d0fb      	beq.n	80042cc <_kill_r+0x1c>
 80042d4:	602b      	str	r3, [r5, #0]
 80042d6:	bd38      	pop	{r3, r4, r5, pc}

080042d8 <_getpid_r>:
 80042d8:	f7fc ba4e 	b.w	8000778 <_getpid>

080042dc <isatty>:
 80042dc:	f7fc bb04 	b.w	80008e8 <_isatty>

080042e0 <_malloc_trim_r>:
 80042e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042e2:	f240 04f4 	movw	r4, #244	; 0xf4
 80042e6:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80042ea:	460f      	mov	r7, r1
 80042ec:	4605      	mov	r5, r0
 80042ee:	f000 fbe1 	bl	8004ab4 <__malloc_lock>
 80042f2:	68a3      	ldr	r3, [r4, #8]
 80042f4:	4628      	mov	r0, r5
 80042f6:	685e      	ldr	r6, [r3, #4]
 80042f8:	f026 0603 	bic.w	r6, r6, #3
 80042fc:	f506 637e 	add.w	r3, r6, #4064	; 0xfe0
 8004300:	330f      	adds	r3, #15
 8004302:	1bdf      	subs	r7, r3, r7
 8004304:	0b3f      	lsrs	r7, r7, #12
 8004306:	3f01      	subs	r7, #1
 8004308:	033f      	lsls	r7, r7, #12
 800430a:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
 800430e:	db07      	blt.n	8004320 <_malloc_trim_r+0x40>
 8004310:	2100      	movs	r1, #0
 8004312:	f000 fbd3 	bl	8004abc <_sbrk_r>
 8004316:	68a3      	ldr	r3, [r4, #8]
 8004318:	199b      	adds	r3, r3, r6
 800431a:	4298      	cmp	r0, r3
 800431c:	4628      	mov	r0, r5
 800431e:	d003      	beq.n	8004328 <_malloc_trim_r+0x48>
 8004320:	f000 fbca 	bl	8004ab8 <__malloc_unlock>
 8004324:	2000      	movs	r0, #0
 8004326:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004328:	4279      	negs	r1, r7
 800432a:	f000 fbc7 	bl	8004abc <_sbrk_r>
 800432e:	3001      	adds	r0, #1
 8004330:	d010      	beq.n	8004354 <_malloc_trim_r+0x74>
 8004332:	f240 534c 	movw	r3, #1356	; 0x54c
 8004336:	68a1      	ldr	r1, [r4, #8]
 8004338:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800433c:	1bf6      	subs	r6, r6, r7
 800433e:	4628      	mov	r0, r5
 8004340:	f046 0601 	orr.w	r6, r6, #1
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	604e      	str	r6, [r1, #4]
 8004348:	1bd7      	subs	r7, r2, r7
 800434a:	601f      	str	r7, [r3, #0]
 800434c:	f000 fbb4 	bl	8004ab8 <__malloc_unlock>
 8004350:	2001      	movs	r0, #1
 8004352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004354:	2100      	movs	r1, #0
 8004356:	4628      	mov	r0, r5
 8004358:	f000 fbb0 	bl	8004abc <_sbrk_r>
 800435c:	68a3      	ldr	r3, [r4, #8]
 800435e:	1ac2      	subs	r2, r0, r3
 8004360:	2a0f      	cmp	r2, #15
 8004362:	dd0d      	ble.n	8004380 <_malloc_trim_r+0xa0>
 8004364:	f240 44fc 	movw	r4, #1276	; 0x4fc
 8004368:	f240 514c 	movw	r1, #1356	; 0x54c
 800436c:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8004370:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8004374:	f042 0201 	orr.w	r2, r2, #1
 8004378:	605a      	str	r2, [r3, #4]
 800437a:	6823      	ldr	r3, [r4, #0]
 800437c:	1ac0      	subs	r0, r0, r3
 800437e:	6008      	str	r0, [r1, #0]
 8004380:	4628      	mov	r0, r5
 8004382:	e7cd      	b.n	8004320 <_malloc_trim_r+0x40>

08004384 <_free_r>:
 8004384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004386:	460d      	mov	r5, r1
 8004388:	4604      	mov	r4, r0
 800438a:	2900      	cmp	r1, #0
 800438c:	d075      	beq.n	800447a <_free_r+0xf6>
 800438e:	f000 fb91 	bl	8004ab4 <__malloc_lock>
 8004392:	f855 6c04 	ldr.w	r6, [r5, #-4]
 8004396:	f240 00f4 	movw	r0, #244	; 0xf4
 800439a:	f1a5 0108 	sub.w	r1, r5, #8
 800439e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80043a2:	f026 0301 	bic.w	r3, r6, #1
 80043a6:	18ca      	adds	r2, r1, r3
 80043a8:	f8d0 c008 	ldr.w	ip, [r0, #8]
 80043ac:	6857      	ldr	r7, [r2, #4]
 80043ae:	4594      	cmp	ip, r2
 80043b0:	f027 0703 	bic.w	r7, r7, #3
 80043b4:	d07e      	beq.n	80044b4 <_free_r+0x130>
 80043b6:	f016 0601 	ands.w	r6, r6, #1
 80043ba:	6057      	str	r7, [r2, #4]
 80043bc:	d04d      	beq.n	800445a <_free_r+0xd6>
 80043be:	2600      	movs	r6, #0
 80043c0:	19d5      	adds	r5, r2, r7
 80043c2:	686d      	ldr	r5, [r5, #4]
 80043c4:	f015 0f01 	tst.w	r5, #1
 80043c8:	d106      	bne.n	80043d8 <_free_r+0x54>
 80043ca:	19db      	adds	r3, r3, r7
 80043cc:	6895      	ldr	r5, [r2, #8]
 80043ce:	2e00      	cmp	r6, #0
 80043d0:	d064      	beq.n	800449c <_free_r+0x118>
 80043d2:	68d2      	ldr	r2, [r2, #12]
 80043d4:	60ea      	str	r2, [r5, #12]
 80043d6:	6095      	str	r5, [r2, #8]
 80043d8:	f043 0201 	orr.w	r2, r3, #1
 80043dc:	50cb      	str	r3, [r1, r3]
 80043de:	604a      	str	r2, [r1, #4]
 80043e0:	2e00      	cmp	r6, #0
 80043e2:	d135      	bne.n	8004450 <_free_r+0xcc>
 80043e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043e8:	d348      	bcc.n	800447c <_free_r+0xf8>
 80043ea:	099e      	lsrs	r6, r3, #6
 80043ec:	0a5a      	lsrs	r2, r3, #9
 80043ee:	3638      	adds	r6, #56	; 0x38
 80043f0:	00f5      	lsls	r5, r6, #3
 80043f2:	2a04      	cmp	r2, #4
 80043f4:	d916      	bls.n	8004424 <_free_r+0xa0>
 80043f6:	f102 065b 	add.w	r6, r2, #91	; 0x5b
 80043fa:	00f5      	lsls	r5, r6, #3
 80043fc:	2a14      	cmp	r2, #20
 80043fe:	d911      	bls.n	8004424 <_free_r+0xa0>
 8004400:	0b1e      	lsrs	r6, r3, #12
 8004402:	366e      	adds	r6, #110	; 0x6e
 8004404:	00f5      	lsls	r5, r6, #3
 8004406:	2a54      	cmp	r2, #84	; 0x54
 8004408:	d90c      	bls.n	8004424 <_free_r+0xa0>
 800440a:	0bde      	lsrs	r6, r3, #15
 800440c:	3677      	adds	r6, #119	; 0x77
 800440e:	00f5      	lsls	r5, r6, #3
 8004410:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8004414:	d906      	bls.n	8004424 <_free_r+0xa0>
 8004416:	f240 5554 	movw	r5, #1364	; 0x554
 800441a:	42aa      	cmp	r2, r5
 800441c:	d874      	bhi.n	8004508 <_free_r+0x184>
 800441e:	0c9e      	lsrs	r6, r3, #18
 8004420:	367c      	adds	r6, #124	; 0x7c
 8004422:	00f5      	lsls	r5, r6, #3
 8004424:	1940      	adds	r0, r0, r5
 8004426:	f240 05f4 	movw	r5, #244	; 0xf4
 800442a:	f2c2 0500 	movt	r5, #8192	; 0x2000
 800442e:	6882      	ldr	r2, [r0, #8]
 8004430:	4282      	cmp	r2, r0
 8004432:	d103      	bne.n	800443c <_free_r+0xb8>
 8004434:	e05f      	b.n	80044f6 <_free_r+0x172>
 8004436:	6892      	ldr	r2, [r2, #8]
 8004438:	4290      	cmp	r0, r2
 800443a:	d004      	beq.n	8004446 <_free_r+0xc2>
 800443c:	6855      	ldr	r5, [r2, #4]
 800443e:	f025 0503 	bic.w	r5, r5, #3
 8004442:	42ab      	cmp	r3, r5
 8004444:	d3f7      	bcc.n	8004436 <_free_r+0xb2>
 8004446:	68d3      	ldr	r3, [r2, #12]
 8004448:	60cb      	str	r3, [r1, #12]
 800444a:	608a      	str	r2, [r1, #8]
 800444c:	60d1      	str	r1, [r2, #12]
 800444e:	6099      	str	r1, [r3, #8]
 8004450:	4620      	mov	r0, r4
 8004452:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004456:	f000 bb2f 	b.w	8004ab8 <__malloc_unlock>
 800445a:	f855 5c08 	ldr.w	r5, [r5, #-8]
 800445e:	f100 0c08 	add.w	ip, r0, #8
 8004462:	1b49      	subs	r1, r1, r5
 8004464:	195b      	adds	r3, r3, r5
 8004466:	688d      	ldr	r5, [r1, #8]
 8004468:	4565      	cmp	r5, ip
 800446a:	d042      	beq.n	80044f2 <_free_r+0x16e>
 800446c:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8004470:	f8c5 c00c 	str.w	ip, [r5, #12]
 8004474:	f8cc 5008 	str.w	r5, [ip, #8]
 8004478:	e7a2      	b.n	80043c0 <_free_r+0x3c>
 800447a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800447c:	08db      	lsrs	r3, r3, #3
 800447e:	2501      	movs	r5, #1
 8004480:	6846      	ldr	r6, [r0, #4]
 8004482:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 8004486:	109b      	asrs	r3, r3, #2
 8004488:	fa05 f303 	lsl.w	r3, r5, r3
 800448c:	60ca      	str	r2, [r1, #12]
 800448e:	6895      	ldr	r5, [r2, #8]
 8004490:	4333      	orrs	r3, r6
 8004492:	6043      	str	r3, [r0, #4]
 8004494:	608d      	str	r5, [r1, #8]
 8004496:	60e9      	str	r1, [r5, #12]
 8004498:	6091      	str	r1, [r2, #8]
 800449a:	e7d9      	b.n	8004450 <_free_r+0xcc>
 800449c:	4f1c      	ldr	r7, [pc, #112]	; (8004510 <_free_r+0x18c>)
 800449e:	42bd      	cmp	r5, r7
 80044a0:	d197      	bne.n	80043d2 <_free_r+0x4e>
 80044a2:	6141      	str	r1, [r0, #20]
 80044a4:	f043 0201 	orr.w	r2, r3, #1
 80044a8:	6101      	str	r1, [r0, #16]
 80044aa:	60cd      	str	r5, [r1, #12]
 80044ac:	608d      	str	r5, [r1, #8]
 80044ae:	604a      	str	r2, [r1, #4]
 80044b0:	50cb      	str	r3, [r1, r3]
 80044b2:	e7cd      	b.n	8004450 <_free_r+0xcc>
 80044b4:	07f2      	lsls	r2, r6, #31
 80044b6:	443b      	add	r3, r7
 80044b8:	d407      	bmi.n	80044ca <_free_r+0x146>
 80044ba:	f855 2c08 	ldr.w	r2, [r5, #-8]
 80044be:	1a89      	subs	r1, r1, r2
 80044c0:	189b      	adds	r3, r3, r2
 80044c2:	688d      	ldr	r5, [r1, #8]
 80044c4:	68ca      	ldr	r2, [r1, #12]
 80044c6:	60ea      	str	r2, [r5, #12]
 80044c8:	6095      	str	r5, [r2, #8]
 80044ca:	f240 5200 	movw	r2, #1280	; 0x500
 80044ce:	f043 0501 	orr.w	r5, r3, #1
 80044d2:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80044d6:	604d      	str	r5, [r1, #4]
 80044d8:	6081      	str	r1, [r0, #8]
 80044da:	6812      	ldr	r2, [r2, #0]
 80044dc:	4293      	cmp	r3, r2
 80044de:	d3b7      	bcc.n	8004450 <_free_r+0xcc>
 80044e0:	f240 5348 	movw	r3, #1352	; 0x548
 80044e4:	4620      	mov	r0, r4
 80044e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80044ea:	6819      	ldr	r1, [r3, #0]
 80044ec:	f7ff fef8 	bl	80042e0 <_malloc_trim_r>
 80044f0:	e7ae      	b.n	8004450 <_free_r+0xcc>
 80044f2:	2601      	movs	r6, #1
 80044f4:	e764      	b.n	80043c0 <_free_r+0x3c>
 80044f6:	2701      	movs	r7, #1
 80044f8:	6868      	ldr	r0, [r5, #4]
 80044fa:	10b6      	asrs	r6, r6, #2
 80044fc:	4613      	mov	r3, r2
 80044fe:	fa07 f606 	lsl.w	r6, r7, r6
 8004502:	4330      	orrs	r0, r6
 8004504:	6068      	str	r0, [r5, #4]
 8004506:	e79f      	b.n	8004448 <_free_r+0xc4>
 8004508:	f44f 757c 	mov.w	r5, #1008	; 0x3f0
 800450c:	267e      	movs	r6, #126	; 0x7e
 800450e:	e789      	b.n	8004424 <_free_r+0xa0>
 8004510:	200000fc 	.word	0x200000fc

08004514 <malloc>:
 8004514:	f240 0300 	movw	r3, #0
 8004518:	4601      	mov	r1, r0
 800451a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800451e:	6818      	ldr	r0, [r3, #0]
 8004520:	f000 b808 	b.w	8004534 <_malloc_r>

08004524 <free>:
 8004524:	f240 0300 	movw	r3, #0
 8004528:	4601      	mov	r1, r0
 800452a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800452e:	6818      	ldr	r0, [r3, #0]
 8004530:	f7ff bf28 	b.w	8004384 <_free_r>

08004534 <_malloc_r>:
 8004534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004538:	f101 040b 	add.w	r4, r1, #11
 800453c:	2c16      	cmp	r4, #22
 800453e:	b083      	sub	sp, #12
 8004540:	4606      	mov	r6, r0
 8004542:	d930      	bls.n	80045a6 <_malloc_r+0x72>
 8004544:	f024 0407 	bic.w	r4, r4, #7
 8004548:	0fe3      	lsrs	r3, r4, #31
 800454a:	428c      	cmp	r4, r1
 800454c:	bf2c      	ite	cs
 800454e:	4619      	movcs	r1, r3
 8004550:	f043 0101 	orrcc.w	r1, r3, #1
 8004554:	2900      	cmp	r1, #0
 8004556:	d12f      	bne.n	80045b8 <_malloc_r+0x84>
 8004558:	4630      	mov	r0, r6
 800455a:	f000 faab 	bl	8004ab4 <__malloc_lock>
 800455e:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8004562:	d22d      	bcs.n	80045c0 <_malloc_r+0x8c>
 8004564:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
 8004568:	f240 05f4 	movw	r5, #244	; 0xf4
 800456c:	f2c2 0500 	movt	r5, #8192	; 0x2000
 8004570:	eb05 02ce 	add.w	r2, r5, lr, lsl #3
 8004574:	68d3      	ldr	r3, [r2, #12]
 8004576:	4293      	cmp	r3, r2
 8004578:	f000 8223 	beq.w	80049c2 <_malloc_r+0x48e>
 800457c:	685c      	ldr	r4, [r3, #4]
 800457e:	f103 0708 	add.w	r7, r3, #8
 8004582:	68da      	ldr	r2, [r3, #12]
 8004584:	4630      	mov	r0, r6
 8004586:	f024 0403 	bic.w	r4, r4, #3
 800458a:	6899      	ldr	r1, [r3, #8]
 800458c:	191b      	adds	r3, r3, r4
 800458e:	685c      	ldr	r4, [r3, #4]
 8004590:	60ca      	str	r2, [r1, #12]
 8004592:	f044 0401 	orr.w	r4, r4, #1
 8004596:	6091      	str	r1, [r2, #8]
 8004598:	605c      	str	r4, [r3, #4]
 800459a:	f000 fa8d 	bl	8004ab8 <__malloc_unlock>
 800459e:	4638      	mov	r0, r7
 80045a0:	b003      	add	sp, #12
 80045a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045a6:	2300      	movs	r3, #0
 80045a8:	2410      	movs	r4, #16
 80045aa:	428c      	cmp	r4, r1
 80045ac:	bf2c      	ite	cs
 80045ae:	4619      	movcs	r1, r3
 80045b0:	f043 0101 	orrcc.w	r1, r3, #1
 80045b4:	2900      	cmp	r1, #0
 80045b6:	d0cf      	beq.n	8004558 <_malloc_r+0x24>
 80045b8:	230c      	movs	r3, #12
 80045ba:	2700      	movs	r7, #0
 80045bc:	6033      	str	r3, [r6, #0]
 80045be:	e7ee      	b.n	800459e <_malloc_r+0x6a>
 80045c0:	ea5f 2e54 	movs.w	lr, r4, lsr #9
 80045c4:	bf04      	itt	eq
 80045c6:	ea4f 0ed4 	moveq.w	lr, r4, lsr #3
 80045ca:	ea4f 01ce 	moveq.w	r1, lr, lsl #3
 80045ce:	f040 808c 	bne.w	80046ea <_malloc_r+0x1b6>
 80045d2:	f240 05f4 	movw	r5, #244	; 0xf4
 80045d6:	f2c2 0500 	movt	r5, #8192	; 0x2000
 80045da:	1869      	adds	r1, r5, r1
 80045dc:	68cf      	ldr	r7, [r1, #12]
 80045de:	42b9      	cmp	r1, r7
 80045e0:	d106      	bne.n	80045f0 <_malloc_r+0xbc>
 80045e2:	e00d      	b.n	8004600 <_malloc_r+0xcc>
 80045e4:	2a00      	cmp	r2, #0
 80045e6:	f280 8181 	bge.w	80048ec <_malloc_r+0x3b8>
 80045ea:	68ff      	ldr	r7, [r7, #12]
 80045ec:	42b9      	cmp	r1, r7
 80045ee:	d007      	beq.n	8004600 <_malloc_r+0xcc>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f023 0303 	bic.w	r3, r3, #3
 80045f6:	1b1a      	subs	r2, r3, r4
 80045f8:	2a0f      	cmp	r2, #15
 80045fa:	ddf3      	ble.n	80045e4 <_malloc_r+0xb0>
 80045fc:	f10e 3eff 	add.w	lr, lr, #4294967295
 8004600:	f10e 0e01 	add.w	lr, lr, #1
 8004604:	f240 00f4 	movw	r0, #244	; 0xf4
 8004608:	692f      	ldr	r7, [r5, #16]
 800460a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800460e:	f100 0208 	add.w	r2, r0, #8
 8004612:	4297      	cmp	r7, r2
 8004614:	bf08      	it	eq
 8004616:	6843      	ldreq	r3, [r0, #4]
 8004618:	d026      	beq.n	8004668 <_malloc_r+0x134>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f023 0c03 	bic.w	ip, r3, #3
 8004620:	ebc4 030c 	rsb	r3, r4, ip
 8004624:	2b0f      	cmp	r3, #15
 8004626:	f300 819c 	bgt.w	8004962 <_malloc_r+0x42e>
 800462a:	2b00      	cmp	r3, #0
 800462c:	6142      	str	r2, [r0, #20]
 800462e:	6102      	str	r2, [r0, #16]
 8004630:	f280 8095 	bge.w	800475e <_malloc_r+0x22a>
 8004634:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8004638:	f080 8173 	bcs.w	8004922 <_malloc_r+0x3ee>
 800463c:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 8004640:	f04f 0801 	mov.w	r8, #1
 8004644:	6843      	ldr	r3, [r0, #4]
 8004646:	eb00 01cc 	add.w	r1, r0, ip, lsl #3
 800464a:	ea4f 0cac 	mov.w	ip, ip, asr #2
 800464e:	fa08 f80c 	lsl.w	r8, r8, ip
 8004652:	60f9      	str	r1, [r7, #12]
 8004654:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8004658:	ea48 0303 	orr.w	r3, r8, r3
 800465c:	6043      	str	r3, [r0, #4]
 800465e:	f8c7 c008 	str.w	ip, [r7, #8]
 8004662:	f8cc 700c 	str.w	r7, [ip, #12]
 8004666:	608f      	str	r7, [r1, #8]
 8004668:	2701      	movs	r7, #1
 800466a:	ea4f 01ae 	mov.w	r1, lr, asr #2
 800466e:	fa07 f701 	lsl.w	r7, r7, r1
 8004672:	429f      	cmp	r7, r3
 8004674:	d87e      	bhi.n	8004774 <_malloc_r+0x240>
 8004676:	423b      	tst	r3, r7
 8004678:	d106      	bne.n	8004688 <_malloc_r+0x154>
 800467a:	f02e 0e03 	bic.w	lr, lr, #3
 800467e:	007f      	lsls	r7, r7, #1
 8004680:	f10e 0e04 	add.w	lr, lr, #4
 8004684:	423b      	tst	r3, r7
 8004686:	d0fa      	beq.n	800467e <_malloc_r+0x14a>
 8004688:	eb05 09ce 	add.w	r9, r5, lr, lsl #3
 800468c:	46f0      	mov	r8, lr
 800468e:	46cc      	mov	ip, r9
 8004690:	f8dc 000c 	ldr.w	r0, [ip, #12]
 8004694:	4584      	cmp	ip, r0
 8004696:	d107      	bne.n	80046a8 <_malloc_r+0x174>
 8004698:	e174      	b.n	8004984 <_malloc_r+0x450>
 800469a:	2b00      	cmp	r3, #0
 800469c:	f280 819b 	bge.w	80049d6 <_malloc_r+0x4a2>
 80046a0:	68c0      	ldr	r0, [r0, #12]
 80046a2:	4584      	cmp	ip, r0
 80046a4:	f000 816e 	beq.w	8004984 <_malloc_r+0x450>
 80046a8:	6841      	ldr	r1, [r0, #4]
 80046aa:	f021 0103 	bic.w	r1, r1, #3
 80046ae:	1b0b      	subs	r3, r1, r4
 80046b0:	2b0f      	cmp	r3, #15
 80046b2:	ddf2      	ble.n	800469a <_malloc_r+0x166>
 80046b4:	4607      	mov	r7, r0
 80046b6:	1901      	adds	r1, r0, r4
 80046b8:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 80046bc:	f044 0801 	orr.w	r8, r4, #1
 80046c0:	f857 4f08 	ldr.w	r4, [r7, #8]!
 80046c4:	f043 0c01 	orr.w	ip, r3, #1
 80046c8:	f8c0 8004 	str.w	r8, [r0, #4]
 80046cc:	4630      	mov	r0, r6
 80046ce:	f8c1 c004 	str.w	ip, [r1, #4]
 80046d2:	f8c4 e00c 	str.w	lr, [r4, #12]
 80046d6:	f8ce 4008 	str.w	r4, [lr, #8]
 80046da:	6169      	str	r1, [r5, #20]
 80046dc:	6129      	str	r1, [r5, #16]
 80046de:	60ca      	str	r2, [r1, #12]
 80046e0:	608a      	str	r2, [r1, #8]
 80046e2:	50cb      	str	r3, [r1, r3]
 80046e4:	f000 f9e8 	bl	8004ab8 <__malloc_unlock>
 80046e8:	e759      	b.n	800459e <_malloc_r+0x6a>
 80046ea:	f1be 0f04 	cmp.w	lr, #4
 80046ee:	bf9e      	ittt	ls
 80046f0:	ea4f 1e94 	movls.w	lr, r4, lsr #6
 80046f4:	f10e 0e38 	addls.w	lr, lr, #56	; 0x38
 80046f8:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 80046fc:	f67f af69 	bls.w	80045d2 <_malloc_r+0x9e>
 8004700:	f1be 0f14 	cmp.w	lr, #20
 8004704:	bf9c      	itt	ls
 8004706:	f10e 0e5b 	addls.w	lr, lr, #91	; 0x5b
 800470a:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 800470e:	f67f af60 	bls.w	80045d2 <_malloc_r+0x9e>
 8004712:	f1be 0f54 	cmp.w	lr, #84	; 0x54
 8004716:	bf9e      	ittt	ls
 8004718:	ea4f 3e14 	movls.w	lr, r4, lsr #12
 800471c:	f10e 0e6e 	addls.w	lr, lr, #110	; 0x6e
 8004720:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 8004724:	f67f af55 	bls.w	80045d2 <_malloc_r+0x9e>
 8004728:	f5be 7faa 	cmp.w	lr, #340	; 0x154
 800472c:	bf9e      	ittt	ls
 800472e:	ea4f 3ed4 	movls.w	lr, r4, lsr #15
 8004732:	f10e 0e77 	addls.w	lr, lr, #119	; 0x77
 8004736:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 800473a:	f67f af4a 	bls.w	80045d2 <_malloc_r+0x9e>
 800473e:	f240 5354 	movw	r3, #1364	; 0x554
 8004742:	459e      	cmp	lr, r3
 8004744:	bf95      	itete	ls
 8004746:	ea4f 4e94 	movls.w	lr, r4, lsr #18
 800474a:	f44f 717c 	movhi.w	r1, #1008	; 0x3f0
 800474e:	f10e 0e7c 	addls.w	lr, lr, #124	; 0x7c
 8004752:	f04f 0e7e 	movhi.w	lr, #126	; 0x7e
 8004756:	bf98      	it	ls
 8004758:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 800475c:	e739      	b.n	80045d2 <_malloc_r+0x9e>
 800475e:	eb07 030c 	add.w	r3, r7, ip
 8004762:	4630      	mov	r0, r6
 8004764:	3708      	adds	r7, #8
 8004766:	685a      	ldr	r2, [r3, #4]
 8004768:	f042 0201 	orr.w	r2, r2, #1
 800476c:	605a      	str	r2, [r3, #4]
 800476e:	f000 f9a3 	bl	8004ab8 <__malloc_unlock>
 8004772:	e714      	b.n	800459e <_malloc_r+0x6a>
 8004774:	68af      	ldr	r7, [r5, #8]
 8004776:	f240 03f4 	movw	r3, #244	; 0xf4
 800477a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	f022 0803 	bic.w	r8, r2, #3
 8004784:	4544      	cmp	r4, r8
 8004786:	ebc4 0208 	rsb	r2, r4, r8
 800478a:	bf94      	ite	ls
 800478c:	2100      	movls	r1, #0
 800478e:	2101      	movhi	r1, #1
 8004790:	2a0f      	cmp	r2, #15
 8004792:	bfd8      	it	le
 8004794:	f041 0101 	orrle.w	r1, r1, #1
 8004798:	2900      	cmp	r1, #0
 800479a:	f000 80b5 	beq.w	8004908 <_malloc_r+0x3d4>
 800479e:	f240 5a48 	movw	sl, #1352	; 0x548
 80047a2:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80047a6:	f2c2 0a00 	movt	sl, #8192	; 0x2000
 80047aa:	3201      	adds	r2, #1
 80047ac:	f8da 3000 	ldr.w	r3, [sl]
 80047b0:	4423      	add	r3, r4
 80047b2:	bf08      	it	eq
 80047b4:	f103 0b10 	addeq.w	fp, r3, #16
 80047b8:	d006      	beq.n	80047c8 <_malloc_r+0x294>
 80047ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047be:	330f      	adds	r3, #15
 80047c0:	f423 637e 	bic.w	r3, r3, #4064	; 0xfe0
 80047c4:	f023 0b1f 	bic.w	fp, r3, #31
 80047c8:	4630      	mov	r0, r6
 80047ca:	4659      	mov	r1, fp
 80047cc:	f000 f976 	bl	8004abc <_sbrk_r>
 80047d0:	1c42      	adds	r2, r0, #1
 80047d2:	4681      	mov	r9, r0
 80047d4:	f000 8131 	beq.w	8004a3a <_malloc_r+0x506>
 80047d8:	eb07 0308 	add.w	r3, r7, r8
 80047dc:	4283      	cmp	r3, r0
 80047de:	f200 8106 	bhi.w	80049ee <_malloc_r+0x4ba>
 80047e2:	f8da 2004 	ldr.w	r2, [sl, #4]
 80047e6:	454b      	cmp	r3, r9
 80047e8:	445a      	add	r2, fp
 80047ea:	f8ca 2004 	str.w	r2, [sl, #4]
 80047ee:	f000 8131 	beq.w	8004a54 <_malloc_r+0x520>
 80047f2:	f8d5 0408 	ldr.w	r0, [r5, #1032]	; 0x408
 80047f6:	f240 01f4 	movw	r1, #244	; 0xf4
 80047fa:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80047fe:	3001      	adds	r0, #1
 8004800:	4630      	mov	r0, r6
 8004802:	bf17      	itett	ne
 8004804:	ebc3 0309 	rsbne	r3, r3, r9
 8004808:	f8c1 9408 	streq.w	r9, [r1, #1032]	; 0x408
 800480c:	18d2      	addne	r2, r2, r3
 800480e:	f8ca 2004 	strne.w	r2, [sl, #4]
 8004812:	f019 0307 	ands.w	r3, r9, #7
 8004816:	bf1f      	itttt	ne
 8004818:	f1c3 0208 	rsbne	r2, r3, #8
 800481c:	f5c3 5380 	rsbne	r3, r3, #4096	; 0x1000
 8004820:	4491      	addne	r9, r2
 8004822:	f103 0208 	addne.w	r2, r3, #8
 8004826:	eb09 030b 	add.w	r3, r9, fp
 800482a:	bf08      	it	eq
 800482c:	f44f 5280 	moveq.w	r2, #4096	; 0x1000
 8004830:	051b      	lsls	r3, r3, #20
 8004832:	0d1b      	lsrs	r3, r3, #20
 8004834:	ebc3 0b02 	rsb	fp, r3, r2
 8004838:	4659      	mov	r1, fp
 800483a:	f000 f93f 	bl	8004abc <_sbrk_r>
 800483e:	1c43      	adds	r3, r0, #1
 8004840:	f000 811d 	beq.w	8004a7e <_malloc_r+0x54a>
 8004844:	ebc9 0100 	rsb	r1, r9, r0
 8004848:	4459      	add	r1, fp
 800484a:	f041 0101 	orr.w	r1, r1, #1
 800484e:	f8da 2004 	ldr.w	r2, [sl, #4]
 8004852:	42af      	cmp	r7, r5
 8004854:	f240 5348 	movw	r3, #1352	; 0x548
 8004858:	f8c5 9008 	str.w	r9, [r5, #8]
 800485c:	445a      	add	r2, fp
 800485e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004862:	f8c9 1004 	str.w	r1, [r9, #4]
 8004866:	f8ca 2004 	str.w	r2, [sl, #4]
 800486a:	d019      	beq.n	80048a0 <_malloc_r+0x36c>
 800486c:	f1b8 0f0f 	cmp.w	r8, #15
 8004870:	f240 80dd 	bls.w	8004a2e <_malloc_r+0x4fa>
 8004874:	f1a8 010c 	sub.w	r1, r8, #12
 8004878:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800487c:	f021 0107 	bic.w	r1, r1, #7
 8004880:	f04f 0e05 	mov.w	lr, #5
 8004884:	1878      	adds	r0, r7, r1
 8004886:	290f      	cmp	r1, #15
 8004888:	f00c 0c01 	and.w	ip, ip, #1
 800488c:	ea41 0c0c 	orr.w	ip, r1, ip
 8004890:	f8c7 c004 	str.w	ip, [r7, #4]
 8004894:	f8c0 e004 	str.w	lr, [r0, #4]
 8004898:	f8c0 e008 	str.w	lr, [r0, #8]
 800489c:	f200 80e6 	bhi.w	8004a6c <_malloc_r+0x538>
 80048a0:	f240 5348 	movw	r3, #1352	; 0x548
 80048a4:	f8da 102c 	ldr.w	r1, [sl, #44]	; 0x2c
 80048a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80048ac:	68af      	ldr	r7, [r5, #8]
 80048ae:	428a      	cmp	r2, r1
 80048b0:	f8da 1030 	ldr.w	r1, [sl, #48]	; 0x30
 80048b4:	bf88      	it	hi
 80048b6:	62da      	strhi	r2, [r3, #44]	; 0x2c
 80048b8:	f240 5348 	movw	r3, #1352	; 0x548
 80048bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80048c0:	428a      	cmp	r2, r1
 80048c2:	bf88      	it	hi
 80048c4:	631a      	strhi	r2, [r3, #48]	; 0x30
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f023 0303 	bic.w	r3, r3, #3
 80048cc:	429c      	cmp	r4, r3
 80048ce:	ebc4 0203 	rsb	r2, r4, r3
 80048d2:	bf94      	ite	ls
 80048d4:	2300      	movls	r3, #0
 80048d6:	2301      	movhi	r3, #1
 80048d8:	2a0f      	cmp	r2, #15
 80048da:	bfd8      	it	le
 80048dc:	f043 0301 	orrle.w	r3, r3, #1
 80048e0:	b193      	cbz	r3, 8004908 <_malloc_r+0x3d4>
 80048e2:	4630      	mov	r0, r6
 80048e4:	2700      	movs	r7, #0
 80048e6:	f000 f8e7 	bl	8004ab8 <__malloc_unlock>
 80048ea:	e658      	b.n	800459e <_malloc_r+0x6a>
 80048ec:	18fb      	adds	r3, r7, r3
 80048ee:	68fa      	ldr	r2, [r7, #12]
 80048f0:	68b9      	ldr	r1, [r7, #8]
 80048f2:	4630      	mov	r0, r6
 80048f4:	685c      	ldr	r4, [r3, #4]
 80048f6:	3708      	adds	r7, #8
 80048f8:	60ca      	str	r2, [r1, #12]
 80048fa:	f044 0401 	orr.w	r4, r4, #1
 80048fe:	6091      	str	r1, [r2, #8]
 8004900:	605c      	str	r4, [r3, #4]
 8004902:	f000 f8d9 	bl	8004ab8 <__malloc_unlock>
 8004906:	e64a      	b.n	800459e <_malloc_r+0x6a>
 8004908:	193b      	adds	r3, r7, r4
 800490a:	f042 0201 	orr.w	r2, r2, #1
 800490e:	f044 0401 	orr.w	r4, r4, #1
 8004912:	4630      	mov	r0, r6
 8004914:	607c      	str	r4, [r7, #4]
 8004916:	3708      	adds	r7, #8
 8004918:	605a      	str	r2, [r3, #4]
 800491a:	60ab      	str	r3, [r5, #8]
 800491c:	f000 f8cc 	bl	8004ab8 <__malloc_unlock>
 8004920:	e63d      	b.n	800459e <_malloc_r+0x6a>
 8004922:	ea4f 235c 	mov.w	r3, ip, lsr #9
 8004926:	2b04      	cmp	r3, #4
 8004928:	d95c      	bls.n	80049e4 <_malloc_r+0x4b0>
 800492a:	2b14      	cmp	r3, #20
 800492c:	d878      	bhi.n	8004a20 <_malloc_r+0x4ec>
 800492e:	335b      	adds	r3, #91	; 0x5b
 8004930:	00d8      	lsls	r0, r3, #3
 8004932:	1828      	adds	r0, r5, r0
 8004934:	f240 08f4 	movw	r8, #244	; 0xf4
 8004938:	f2c2 0800 	movt	r8, #8192	; 0x2000
 800493c:	6881      	ldr	r1, [r0, #8]
 800493e:	4281      	cmp	r1, r0
 8004940:	d103      	bne.n	800494a <_malloc_r+0x416>
 8004942:	e060      	b.n	8004a06 <_malloc_r+0x4d2>
 8004944:	6889      	ldr	r1, [r1, #8]
 8004946:	4288      	cmp	r0, r1
 8004948:	d004      	beq.n	8004954 <_malloc_r+0x420>
 800494a:	684b      	ldr	r3, [r1, #4]
 800494c:	f023 0303 	bic.w	r3, r3, #3
 8004950:	459c      	cmp	ip, r3
 8004952:	d3f7      	bcc.n	8004944 <_malloc_r+0x410>
 8004954:	68c8      	ldr	r0, [r1, #12]
 8004956:	686b      	ldr	r3, [r5, #4]
 8004958:	60f8      	str	r0, [r7, #12]
 800495a:	60b9      	str	r1, [r7, #8]
 800495c:	60cf      	str	r7, [r1, #12]
 800495e:	6087      	str	r7, [r0, #8]
 8004960:	e682      	b.n	8004668 <_malloc_r+0x134>
 8004962:	1939      	adds	r1, r7, r4
 8004964:	f043 0501 	orr.w	r5, r3, #1
 8004968:	6141      	str	r1, [r0, #20]
 800496a:	f044 0401 	orr.w	r4, r4, #1
 800496e:	6101      	str	r1, [r0, #16]
 8004970:	4630      	mov	r0, r6
 8004972:	607c      	str	r4, [r7, #4]
 8004974:	3708      	adds	r7, #8
 8004976:	60ca      	str	r2, [r1, #12]
 8004978:	608a      	str	r2, [r1, #8]
 800497a:	604d      	str	r5, [r1, #4]
 800497c:	50cb      	str	r3, [r1, r3]
 800497e:	f000 f89b 	bl	8004ab8 <__malloc_unlock>
 8004982:	e60c      	b.n	800459e <_malloc_r+0x6a>
 8004984:	f108 0801 	add.w	r8, r8, #1
 8004988:	f10c 0c08 	add.w	ip, ip, #8
 800498c:	f018 0f03 	tst.w	r8, #3
 8004990:	f47f ae7e 	bne.w	8004690 <_malloc_r+0x15c>
 8004994:	464b      	mov	r3, r9
 8004996:	f01e 0f03 	tst.w	lr, #3
 800499a:	f1a3 0108 	sub.w	r1, r3, #8
 800499e:	f10e 3eff 	add.w	lr, lr, #4294967295
 80049a2:	d079      	beq.n	8004a98 <_malloc_r+0x564>
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	428b      	cmp	r3, r1
 80049a8:	d0f5      	beq.n	8004996 <_malloc_r+0x462>
 80049aa:	686b      	ldr	r3, [r5, #4]
 80049ac:	007f      	lsls	r7, r7, #1
 80049ae:	429f      	cmp	r7, r3
 80049b0:	f63f aee0 	bhi.w	8004774 <_malloc_r+0x240>
 80049b4:	2f00      	cmp	r7, #0
 80049b6:	f43f aedd 	beq.w	8004774 <_malloc_r+0x240>
 80049ba:	421f      	tst	r7, r3
 80049bc:	d071      	beq.n	8004aa2 <_malloc_r+0x56e>
 80049be:	46c6      	mov	lr, r8
 80049c0:	e662      	b.n	8004688 <_malloc_r+0x154>
 80049c2:	f103 0208 	add.w	r2, r3, #8
 80049c6:	695b      	ldr	r3, [r3, #20]
 80049c8:	429a      	cmp	r2, r3
 80049ca:	bf08      	it	eq
 80049cc:	f10e 0e02 	addeq.w	lr, lr, #2
 80049d0:	f43f ae18 	beq.w	8004604 <_malloc_r+0xd0>
 80049d4:	e5d2      	b.n	800457c <_malloc_r+0x48>
 80049d6:	4607      	mov	r7, r0
 80049d8:	1843      	adds	r3, r0, r1
 80049da:	68c2      	ldr	r2, [r0, #12]
 80049dc:	4630      	mov	r0, r6
 80049de:	f857 1f08 	ldr.w	r1, [r7, #8]!
 80049e2:	e5d4      	b.n	800458e <_malloc_r+0x5a>
 80049e4:	ea4f 139c 	mov.w	r3, ip, lsr #6
 80049e8:	3338      	adds	r3, #56	; 0x38
 80049ea:	00d8      	lsls	r0, r3, #3
 80049ec:	e7a1      	b.n	8004932 <_malloc_r+0x3fe>
 80049ee:	42af      	cmp	r7, r5
 80049f0:	f240 02f4 	movw	r2, #244	; 0xf4
 80049f4:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80049f8:	f43f aef3 	beq.w	80047e2 <_malloc_r+0x2ae>
 80049fc:	6897      	ldr	r7, [r2, #8]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f023 0303 	bic.w	r3, r3, #3
 8004a04:	e762      	b.n	80048cc <_malloc_r+0x398>
 8004a06:	f04f 0901 	mov.w	r9, #1
 8004a0a:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8004a0e:	109b      	asrs	r3, r3, #2
 8004a10:	4608      	mov	r0, r1
 8004a12:	fa09 f303 	lsl.w	r3, r9, r3
 8004a16:	ea43 030c 	orr.w	r3, r3, ip
 8004a1a:	f8c8 3004 	str.w	r3, [r8, #4]
 8004a1e:	e79b      	b.n	8004958 <_malloc_r+0x424>
 8004a20:	2b54      	cmp	r3, #84	; 0x54
 8004a22:	d80f      	bhi.n	8004a44 <_malloc_r+0x510>
 8004a24:	ea4f 331c 	mov.w	r3, ip, lsr #12
 8004a28:	336e      	adds	r3, #110	; 0x6e
 8004a2a:	00d8      	lsls	r0, r3, #3
 8004a2c:	e781      	b.n	8004932 <_malloc_r+0x3fe>
 8004a2e:	2301      	movs	r3, #1
 8004a30:	464f      	mov	r7, r9
 8004a32:	f8c9 3004 	str.w	r3, [r9, #4]
 8004a36:	2300      	movs	r3, #0
 8004a38:	e748      	b.n	80048cc <_malloc_r+0x398>
 8004a3a:	68af      	ldr	r7, [r5, #8]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f023 0303 	bic.w	r3, r3, #3
 8004a42:	e743      	b.n	80048cc <_malloc_r+0x398>
 8004a44:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8004a48:	d81d      	bhi.n	8004a86 <_malloc_r+0x552>
 8004a4a:	ea4f 33dc 	mov.w	r3, ip, lsr #15
 8004a4e:	3377      	adds	r3, #119	; 0x77
 8004a50:	00d8      	lsls	r0, r3, #3
 8004a52:	e76e      	b.n	8004932 <_malloc_r+0x3fe>
 8004a54:	0519      	lsls	r1, r3, #20
 8004a56:	0d09      	lsrs	r1, r1, #20
 8004a58:	2900      	cmp	r1, #0
 8004a5a:	f47f aeca 	bne.w	80047f2 <_malloc_r+0x2be>
 8004a5e:	68ab      	ldr	r3, [r5, #8]
 8004a60:	eb0b 0108 	add.w	r1, fp, r8
 8004a64:	f041 0101 	orr.w	r1, r1, #1
 8004a68:	6059      	str	r1, [r3, #4]
 8004a6a:	e719      	b.n	80048a0 <_malloc_r+0x36c>
 8004a6c:	4630      	mov	r0, r6
 8004a6e:	f107 0108 	add.w	r1, r7, #8
 8004a72:	9301      	str	r3, [sp, #4]
 8004a74:	f7ff fc86 	bl	8004384 <_free_r>
 8004a78:	9b01      	ldr	r3, [sp, #4]
 8004a7a:	685a      	ldr	r2, [r3, #4]
 8004a7c:	e710      	b.n	80048a0 <_malloc_r+0x36c>
 8004a7e:	2101      	movs	r1, #1
 8004a80:	f04f 0b00 	mov.w	fp, #0
 8004a84:	e6e3      	b.n	800484e <_malloc_r+0x31a>
 8004a86:	f240 5154 	movw	r1, #1364	; 0x554
 8004a8a:	428b      	cmp	r3, r1
 8004a8c:	d80d      	bhi.n	8004aaa <_malloc_r+0x576>
 8004a8e:	ea4f 439c 	mov.w	r3, ip, lsr #18
 8004a92:	337c      	adds	r3, #124	; 0x7c
 8004a94:	00d8      	lsls	r0, r3, #3
 8004a96:	e74c      	b.n	8004932 <_malloc_r+0x3fe>
 8004a98:	686b      	ldr	r3, [r5, #4]
 8004a9a:	ea23 0307 	bic.w	r3, r3, r7
 8004a9e:	606b      	str	r3, [r5, #4]
 8004aa0:	e784      	b.n	80049ac <_malloc_r+0x478>
 8004aa2:	007f      	lsls	r7, r7, #1
 8004aa4:	f108 0804 	add.w	r8, r8, #4
 8004aa8:	e787      	b.n	80049ba <_malloc_r+0x486>
 8004aaa:	f44f 707c 	mov.w	r0, #1008	; 0x3f0
 8004aae:	237e      	movs	r3, #126	; 0x7e
 8004ab0:	e73f      	b.n	8004932 <_malloc_r+0x3fe>
 8004ab2:	bf00      	nop

08004ab4 <__malloc_lock>:
 8004ab4:	4770      	bx	lr
 8004ab6:	bf00      	nop

08004ab8 <__malloc_unlock>:
 8004ab8:	4770      	bx	lr
 8004aba:	bf00      	nop

08004abc <_sbrk_r>:
 8004abc:	b538      	push	{r3, r4, r5, lr}
 8004abe:	f240 549c 	movw	r4, #1436	; 0x59c
 8004ac2:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8004ac6:	4605      	mov	r5, r0
 8004ac8:	4608      	mov	r0, r1
 8004aca:	2300      	movs	r3, #0
 8004acc:	6023      	str	r3, [r4, #0]
 8004ace:	f7fb fe6f 	bl	80007b0 <_sbrk>
 8004ad2:	1c43      	adds	r3, r0, #1
 8004ad4:	d000      	beq.n	8004ad8 <_sbrk_r+0x1c>
 8004ad6:	bd38      	pop	{r3, r4, r5, pc}
 8004ad8:	6823      	ldr	r3, [r4, #0]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d0fb      	beq.n	8004ad6 <_sbrk_r+0x1a>
 8004ade:	602b      	str	r3, [r5, #0]
 8004ae0:	bd38      	pop	{r3, r4, r5, pc}
 8004ae2:	bf00      	nop

08004ae4 <_ZN6Trieda4testEi>:
class Trieda {

public:
	int x;

	void test(int a) {
 8004ae4:	b480      	push	{r7}
 8004ae6:	b083      	sub	sp, #12
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	6039      	str	r1, [r7, #0]
		this->x = a + 10;
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	f103 020a 	add.w	r2, r3, #10
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	601a      	str	r2, [r3, #0]
	}
 8004af8:	f107 070c 	add.w	r7, r7, #12
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bc80      	pop	{r7}
 8004b00:	4770      	bx	lr
 8004b02:	bf00      	nop

08004b04 <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004b04:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8004b06:	f000 b804 	b.w	8004b12 <LoopCopyDataInit>

08004b0a <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004b0a:	4b0d      	ldr	r3, [pc, #52]	; (8004b40 <LoopFillZerobss+0x16>)
	ldr	r3, [r3, r1]
 8004b0c:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004b0e:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004b10:	3104      	adds	r1, #4

08004b12 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004b12:	480c      	ldr	r0, [pc, #48]	; (8004b44 <LoopFillZerobss+0x1a>)
	ldr	r3, =_edata
 8004b14:	4b0c      	ldr	r3, [pc, #48]	; (8004b48 <LoopFillZerobss+0x1e>)
	adds	r2, r0, r1
 8004b16:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8004b18:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004b1a:	f4ff aff6 	bcc.w	8004b0a <CopyDataInit>
	ldr	r2, =_sbss
 8004b1e:	4a0b      	ldr	r2, [pc, #44]	; (8004b4c <LoopFillZerobss+0x22>)
	b	LoopFillZerobss
 8004b20:	f000 b803 	b.w	8004b2a <LoopFillZerobss>

08004b24 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004b24:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004b26:	f842 3b04 	str.w	r3, [r2], #4

08004b2a <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004b2a:	4b09      	ldr	r3, [pc, #36]	; (8004b50 <LoopFillZerobss+0x26>)
	cmp	r2, r3
 8004b2c:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004b2e:	f4ff aff9 	bcc.w	8004b24 <FillZerobss>
	
/* Call the clock system intitialization function.*/
  bl  SystemInit 
 8004b32:	f7fb fee5 	bl	8000900 <SystemInit>
/* Call static constructors */
  bl __libc_init_array  
 8004b36:	f7ff fa69 	bl	800400c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004b3a:	f7fb fbeb 	bl	8000314 <main>
	bx	lr
 8004b3e:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 8004b40:	08004b7c 	.word	0x08004b7c
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004b44:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004b48:	2000052c 	.word	0x2000052c
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 8004b4c:	2000052c 	.word	0x2000052c
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 8004b50:	200005a0 	.word	0x200005a0

08004b54 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004b54:	f7ff bffe 	b.w	8004b54 <ADC1_IRQHandler>
 8004b58:	00000043 	.word	0x00000043

08004b5c <_init>:
 8004b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b5e:	bf00      	nop
 8004b60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b62:	bc08      	pop	{r3}
 8004b64:	469e      	mov	lr, r3
 8004b66:	4770      	bx	lr

08004b68 <_fini>:
 8004b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b6a:	bf00      	nop
 8004b6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b6e:	bc08      	pop	{r3}
 8004b70:	469e      	mov	lr, r3
 8004b72:	4770      	bx	lr
